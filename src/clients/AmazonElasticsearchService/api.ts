import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class AmazonElasticsearchService extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[]) {
    super(scope, id);
  }
  public acceptInboundCrossClusterSearchConnection(input: shapes.AcceptInboundCrossClusterSearchConnectionRequest): AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponse {
    return new AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponse(this, 'AcceptInboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public addTags(input: shapes.AddTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'addTags',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AddTags.'),
        parameters: {
          arn: input.arn,
          tagList: input.tagList,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddTags', props);
  }
  public associatePackage(input: shapes.AssociatePackageRequest): AmazonElasticsearchServiceAssociatePackageResponse {
    return new AmazonElasticsearchServiceAssociatePackageResponse(this, 'AssociatePackageResponse', this.resources, input);
  }
  public cancelElasticsearchServiceSoftwareUpdate(input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest): AmazonElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponse {
    return new AmazonElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponse(this, 'CancelElasticsearchServiceSoftwareUpdateResponse', this.resources, input);
  }
  public createElasticsearchDomain(input: shapes.CreateElasticsearchDomainRequest): AmazonElasticsearchServiceCreateElasticsearchDomainResponse {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponse(this, 'CreateElasticsearchDomainResponse', this.resources, input);
  }
  public createOutboundCrossClusterSearchConnection(input: shapes.CreateOutboundCrossClusterSearchConnectionRequest): AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponse {
    return new AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponse(this, 'CreateOutboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public createPackage(input: shapes.CreatePackageRequest): AmazonElasticsearchServiceCreatePackageResponse {
    return new AmazonElasticsearchServiceCreatePackageResponse(this, 'CreatePackageResponse', this.resources, input);
  }
  public deleteElasticsearchDomain(input: shapes.DeleteElasticsearchDomainRequest): AmazonElasticsearchServiceDeleteElasticsearchDomainResponse {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponse(this, 'DeleteElasticsearchDomainResponse', this.resources, input);
  }
  public deleteElasticsearchServiceRole(): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchServiceRole',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchServiceRole.'),
      },
    };
    new cr.AwsCustomResource(this, 'DeleteElasticsearchServiceRole', props);
  }
  public deleteInboundCrossClusterSearchConnection(input: shapes.DeleteInboundCrossClusterSearchConnectionRequest): AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponse {
    return new AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponse(this, 'DeleteInboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public deleteOutboundCrossClusterSearchConnection(input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest): AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponse {
    return new AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponse(this, 'DeleteOutboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public deletePackage(input: shapes.DeletePackageRequest): AmazonElasticsearchServiceDeletePackageResponse {
    return new AmazonElasticsearchServiceDeletePackageResponse(this, 'DeletePackageResponse', this.resources, input);
  }
  public describeElasticsearchDomain(input: shapes.DescribeElasticsearchDomainRequest): AmazonElasticsearchServiceDescribeElasticsearchDomainResponse {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponse(this, 'DescribeElasticsearchDomainResponse', this.resources, input);
  }
  public describeElasticsearchDomainConfig(input: shapes.DescribeElasticsearchDomainConfigRequest): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponse {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponse(this, 'DescribeElasticsearchDomainConfigResponse', this.resources, input);
  }
  public describeElasticsearchDomains(input: shapes.DescribeElasticsearchDomainsRequest): AmazonElasticsearchServiceDescribeElasticsearchDomainsResponse {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainsResponse(this, 'DescribeElasticsearchDomainsResponse', this.resources, input);
  }
  public describeElasticsearchInstanceTypeLimits(input: shapes.DescribeElasticsearchInstanceTypeLimitsRequest): AmazonElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsResponse {
    return new AmazonElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsResponse(this, 'DescribeElasticsearchInstanceTypeLimitsResponse', this.resources, input);
  }
  public describeInboundCrossClusterSearchConnections(input: shapes.DescribeInboundCrossClusterSearchConnectionsRequest): AmazonElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsResponse {
    return new AmazonElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsResponse(this, 'DescribeInboundCrossClusterSearchConnectionsResponse', this.resources, input);
  }
  public describeOutboundCrossClusterSearchConnections(input: shapes.DescribeOutboundCrossClusterSearchConnectionsRequest): AmazonElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsResponse {
    return new AmazonElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsResponse(this, 'DescribeOutboundCrossClusterSearchConnectionsResponse', this.resources, input);
  }
  public describePackages(input: shapes.DescribePackagesRequest): AmazonElasticsearchServiceDescribePackagesResponse {
    return new AmazonElasticsearchServiceDescribePackagesResponse(this, 'DescribePackagesResponse', this.resources, input);
  }
  public describeReservedElasticsearchInstanceOfferings(input: shapes.DescribeReservedElasticsearchInstanceOfferingsRequest): AmazonElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsResponse {
    return new AmazonElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsResponse(this, 'DescribeReservedElasticsearchInstanceOfferingsResponse', this.resources, input);
  }
  public describeReservedElasticsearchInstances(input: shapes.DescribeReservedElasticsearchInstancesRequest): AmazonElasticsearchServiceDescribeReservedElasticsearchInstancesResponse {
    return new AmazonElasticsearchServiceDescribeReservedElasticsearchInstancesResponse(this, 'DescribeReservedElasticsearchInstancesResponse', this.resources, input);
  }
  public dissociatePackage(input: shapes.DissociatePackageRequest): AmazonElasticsearchServiceDissociatePackageResponse {
    return new AmazonElasticsearchServiceDissociatePackageResponse(this, 'DissociatePackageResponse', this.resources, input);
  }
  public fetchCompatibleElasticsearchVersions(input: shapes.GetCompatibleElasticsearchVersionsRequest): AmazonElasticsearchServiceGetCompatibleElasticsearchVersionsResponse {
    return new AmazonElasticsearchServiceGetCompatibleElasticsearchVersionsResponse(this, 'GetCompatibleElasticsearchVersionsResponse', this.resources, input);
  }
  public fetchPackageVersionHistory(input: shapes.GetPackageVersionHistoryRequest): AmazonElasticsearchServiceGetPackageVersionHistoryResponse {
    return new AmazonElasticsearchServiceGetPackageVersionHistoryResponse(this, 'GetPackageVersionHistoryResponse', this.resources, input);
  }
  public fetchUpgradeHistory(input: shapes.GetUpgradeHistoryRequest): AmazonElasticsearchServiceGetUpgradeHistoryResponse {
    return new AmazonElasticsearchServiceGetUpgradeHistoryResponse(this, 'GetUpgradeHistoryResponse', this.resources, input);
  }
  public fetchUpgradeStatus(input: shapes.GetUpgradeStatusRequest): AmazonElasticsearchServiceGetUpgradeStatusResponse {
    return new AmazonElasticsearchServiceGetUpgradeStatusResponse(this, 'GetUpgradeStatusResponse', this.resources, input);
  }
  public listDomainNames(): AmazonElasticsearchServiceListDomainNamesResponse {
    return new AmazonElasticsearchServiceListDomainNamesResponse(this, 'ListDomainNamesResponse', this.resources);
  }
  public listDomainsForPackage(input: shapes.ListDomainsForPackageRequest): AmazonElasticsearchServiceListDomainsForPackageResponse {
    return new AmazonElasticsearchServiceListDomainsForPackageResponse(this, 'ListDomainsForPackageResponse', this.resources, input);
  }
  public listElasticsearchInstanceTypes(input: shapes.ListElasticsearchInstanceTypesRequest): AmazonElasticsearchServiceListElasticsearchInstanceTypesResponse {
    return new AmazonElasticsearchServiceListElasticsearchInstanceTypesResponse(this, 'ListElasticsearchInstanceTypesResponse', this.resources, input);
  }
  public listElasticsearchVersions(input: shapes.ListElasticsearchVersionsRequest): AmazonElasticsearchServiceListElasticsearchVersionsResponse {
    return new AmazonElasticsearchServiceListElasticsearchVersionsResponse(this, 'ListElasticsearchVersionsResponse', this.resources, input);
  }
  public listPackagesForDomain(input: shapes.ListPackagesForDomainRequest): AmazonElasticsearchServiceListPackagesForDomainResponse {
    return new AmazonElasticsearchServiceListPackagesForDomainResponse(this, 'ListPackagesForDomainResponse', this.resources, input);
  }
  public listTags(input: shapes.ListTagsRequest): AmazonElasticsearchServiceListTagsResponse {
    return new AmazonElasticsearchServiceListTagsResponse(this, 'ListTagsResponse', this.resources, input);
  }
  public purchaseReservedElasticsearchInstanceOffering(input: shapes.PurchaseReservedElasticsearchInstanceOfferingRequest): AmazonElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingResponse {
    return new AmazonElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingResponse(this, 'PurchaseReservedElasticsearchInstanceOfferingResponse', this.resources, input);
  }
  public rejectInboundCrossClusterSearchConnection(input: shapes.RejectInboundCrossClusterSearchConnectionRequest): AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponse {
    return new AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponse(this, 'RejectInboundCrossClusterSearchConnectionResponse', this.resources, input);
  }
  public removeTags(input: shapes.RemoveTagsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'removeTags',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.RemoveTags.'),
        parameters: {
          arn: input.arn,
          tagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveTags', props);
  }
  public startElasticsearchServiceSoftwareUpdate(input: shapes.StartElasticsearchServiceSoftwareUpdateRequest): AmazonElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponse {
    return new AmazonElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponse(this, 'StartElasticsearchServiceSoftwareUpdateResponse', this.resources, input);
  }
  public updateElasticsearchDomainConfig(input: shapes.UpdateElasticsearchDomainConfigRequest): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponse {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponse(this, 'UpdateElasticsearchDomainConfigResponse', this.resources, input);
  }
  public updatePackage(input: shapes.UpdatePackageRequest): AmazonElasticsearchServiceUpdatePackageResponse {
    return new AmazonElasticsearchServiceUpdatePackageResponse(this, 'UpdatePackageResponse', this.resources, input);
  }
  public upgradeElasticsearchDomain(input: shapes.UpgradeElasticsearchDomainRequest): AmazonElasticsearchServiceUpgradeElasticsearchDomainResponse {
    return new AmazonElasticsearchServiceUpgradeElasticsearchDomainResponse(this, 'UpgradeElasticsearchDomainResponse', this.resources, input);
  }
}
export class AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection {
    return new AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection(this, 'InboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionStatus(): AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus {
    return new AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus(this, 'InboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class AmazonElasticsearchServiceAcceptInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AcceptInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'acceptInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AcceptInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class AmazonElasticsearchServiceAssociatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AssociatePackageRequest) {
    super(scope, id);
  }
  public get domainPackageDetails(): AmazonElasticsearchServiceAssociatePackageResponseDomainPackageDetails {
    return new AmazonElasticsearchServiceAssociatePackageResponseDomainPackageDetails(this, 'DomainPackageDetails', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceAssociatePackageResponseDomainPackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AssociatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AssociatePackage.DomainPackageDetails.PackageID'),
        outputPath: 'DomainPackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageID', props);
    return resource.getResponseField('DomainPackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AssociatePackage.DomainPackageDetails.PackageName'),
        outputPath: 'DomainPackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageName', props);
    return resource.getResponseField('DomainPackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AssociatePackage.DomainPackageDetails.PackageType'),
        outputPath: 'DomainPackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageType', props);
    return resource.getResponseField('DomainPackageDetails.PackageType') as unknown as string;
  }
  public get lastUpdated(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AssociatePackage.DomainPackageDetails.LastUpdated'),
        outputPath: 'DomainPackageDetails.LastUpdated',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.LastUpdated', props);
    return resource.getResponseField('DomainPackageDetails.LastUpdated') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AssociatePackage.DomainPackageDetails.DomainName'),
        outputPath: 'DomainPackageDetails.DomainName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.DomainName', props);
    return resource.getResponseField('DomainPackageDetails.DomainName') as unknown as string;
  }
  public get domainPackageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AssociatePackage.DomainPackageDetails.DomainPackageStatus'),
        outputPath: 'DomainPackageDetails.DomainPackageStatus',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.DomainPackageStatus', props);
    return resource.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as string;
  }
  public get packageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AssociatePackage.DomainPackageDetails.PackageVersion'),
        outputPath: 'DomainPackageDetails.PackageVersion',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.PackageVersion', props);
    return resource.getResponseField('DomainPackageDetails.PackageVersion') as unknown as string;
  }
  public get referencePath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AssociatePackage.DomainPackageDetails.ReferencePath'),
        outputPath: 'DomainPackageDetails.ReferencePath',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ReferencePath', props);
    return resource.getResponseField('DomainPackageDetails.ReferencePath') as unknown as string;
  }
  public get errorDetails(): AmazonElasticsearchServiceAssociatePackageResponseDomainPackageDetailsErrorDetails {
    return new AmazonElasticsearchServiceAssociatePackageResponseDomainPackageDetailsErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceAssociatePackageResponseDomainPackageDetailsErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.AssociatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'associatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AssociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class AmazonElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get serviceSoftwareOptions(): AmazonElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions {
    return new AmazonElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CancelElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
        outputPath: 'ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'cancelElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainStatus(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatus {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatus(this, 'ElasticsearchDomainStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }
  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }
  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }
  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }
  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }
  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }
  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }
  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }
  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }
  public get elasticsearchClusterConfig(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get ebsOptions(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }
  public get snapshotOptions(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get vpcOptions(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get cognitoOptions(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }
  public get logPublishingOptions(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get serviceSoftwareOptions(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
  public get domainEndpointOptions(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get advancedSecurityOptions(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.Iops',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.Iops') as unknown as number;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.VPCId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds') as unknown as string[];
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.RoleArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.RoleArn') as unknown as string;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp {
    return new AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class AmazonElasticsearchServiceCreateElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchVersion: this.input.elasticsearchVersion,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          accessPolicies: this.input.accessPolicies,
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          encryptionAtRestOptions: {
            enabled: this.input.encryptionAtRestOptions?.enabled,
            kmsKeyId: this.input.encryptionAtRestOptions?.kmsKeyId,
          },
          nodeToNodeEncryptionOptions: {
            enabled: this.input.nodeToNodeEncryptionOptions?.enabled,
          },
          advancedOptions: this.input.advancedOptions,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponseDomainInformation {
    return new AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponseDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponseDomainInformation {
    return new AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponseDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get connectionAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateOutboundCrossClusterSearchConnection.'),
        outputPath: '',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get connectionStatus(): AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionStatus {
    return new AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionStatus(this, 'OutboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateOutboundCrossClusterSearchConnection.'),
        outputPath: '',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponseDomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId'),
        outputPath: 'SourceDomainInfo.OwnerId',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName'),
        outputPath: 'SourceDomainInfo.DomainName',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region'),
        outputPath: 'SourceDomainInfo.Region',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.SourceDomainInfo.Region', props);
    return resource.getResponseField('SourceDomainInfo.Region') as unknown as string;
  }
}
export class AmazonElasticsearchServiceCreateOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreateOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode'),
        outputPath: 'ConnectionStatus.StatusCode',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message'),
        outputPath: 'ConnectionStatus.Message',
        parameters: {
          sourceDomainInfo: {
            ownerId: this.input.sourceDomainInfo.ownerId,
            domainName: this.input.sourceDomainInfo.domainName,
            region: this.input.sourceDomainInfo.region,
          },
          destinationDomainInfo: {
            ownerId: this.input.destinationDomainInfo.ownerId,
            domainName: this.input.destinationDomainInfo.domainName,
            region: this.input.destinationDomainInfo.region,
          },
          connectionAlias: this.input.connectionAlias,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOutboundCrossClusterSearchConnection.ConnectionStatus.Message', props);
    return resource.getResponseField('ConnectionStatus.Message') as unknown as string;
  }
}
export class AmazonElasticsearchServiceCreatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreatePackageRequest) {
    super(scope, id);
  }
  public get packageDetails(): AmazonElasticsearchServiceCreatePackageResponsePackageDetails {
    return new AmazonElasticsearchServiceCreatePackageResponsePackageDetails(this, 'PackageDetails', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceCreatePackageResponsePackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreatePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreatePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreatePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }
  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreatePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }
  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreatePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }
  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreatePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }
  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreatePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }
  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreatePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }
  public get errorDetails(): AmazonElasticsearchServiceCreatePackageResponsePackageDetailsErrorDetails {
    return new AmazonElasticsearchServiceCreatePackageResponsePackageDetailsErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceCreatePackageResponsePackageDetailsErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.CreatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'createPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageName: this.input.packageName,
          packageType: this.input.packageType,
          packageDescription: this.input.packageDescription,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainStatus(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatus {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatus(this, 'ElasticsearchDomainStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }
  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }
  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }
  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }
  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }
  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }
  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }
  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }
  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }
  public get elasticsearchClusterConfig(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get ebsOptions(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }
  public get snapshotOptions(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get vpcOptions(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get cognitoOptions(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }
  public get logPublishingOptions(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get serviceSoftwareOptions(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
  public get domainEndpointOptions(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get advancedSecurityOptions(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.Iops',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.Iops') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.VPCId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds') as unknown as string[];
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.RoleArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.RoleArn') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp {
    return new AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDeleteElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection {
    return new AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection(this, 'InboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionStatus(): AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus {
    return new AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus(this, 'InboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDeleteInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnection {
    return new AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnection(this, 'OutboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionDomainInformation {
    return new AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionDomainInformation {
    return new AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionAlias(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias'),
        outputPath: 'CrossClusterSearchConnection.ConnectionAlias',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionAlias', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionAlias') as unknown as string;
  }
  public get connectionStatus(): AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionOutboundCrossClusterSearchConnectionStatus {
    return new AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionOutboundCrossClusterSearchConnectionStatus(this, 'OutboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionDomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDeleteOutboundCrossClusterSearchConnectionResponseOutboundCrossClusterSearchConnectionOutboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeleteOutboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deleteOutboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteOutboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDeletePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeletePackageRequest) {
    super(scope, id);
  }
  public get packageDetails(): AmazonElasticsearchServiceDeletePackageResponsePackageDetails {
    return new AmazonElasticsearchServiceDeletePackageResponsePackageDetails(this, 'PackageDetails', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDeletePackageResponsePackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeletePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeletePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeletePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeletePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }
  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeletePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }
  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeletePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }
  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeletePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }
  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeletePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }
  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeletePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }
  public get errorDetails(): AmazonElasticsearchServiceDeletePackageResponsePackageDetailsErrorDetails {
    return new AmazonElasticsearchServiceDeletePackageResponsePackageDetailsErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDeletePackageResponsePackageDetailsErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DeletePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'deletePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeletePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainStatus(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatus(this, 'ElasticsearchDomainStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainId'),
        outputPath: 'DomainStatus.DomainId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainId', props);
    return resource.getResponseField('DomainStatus.DomainId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainName'),
        outputPath: 'DomainStatus.DomainName',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainName', props);
    return resource.getResponseField('DomainStatus.DomainName') as unknown as string;
  }
  public get arn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ARN'),
        outputPath: 'DomainStatus.ARN',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ARN', props);
    return resource.getResponseField('DomainStatus.ARN') as unknown as string;
  }
  public get created(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.Created'),
        outputPath: 'DomainStatus.Created',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Created', props);
    return resource.getResponseField('DomainStatus.Created') as unknown as boolean;
  }
  public get deleted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.Deleted'),
        outputPath: 'DomainStatus.Deleted',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Deleted', props);
    return resource.getResponseField('DomainStatus.Deleted') as unknown as boolean;
  }
  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.Endpoint'),
        outputPath: 'DomainStatus.Endpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Endpoint', props);
    return resource.getResponseField('DomainStatus.Endpoint') as unknown as string;
  }
  public get endpoints(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.Endpoints'),
        outputPath: 'DomainStatus.Endpoints',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Endpoints', props);
    return resource.getResponseField('DomainStatus.Endpoints') as unknown as Record<string, string>;
  }
  public get processing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.Processing'),
        outputPath: 'DomainStatus.Processing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.Processing', props);
    return resource.getResponseField('DomainStatus.Processing') as unknown as boolean;
  }
  public get upgradeProcessing(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing'),
        outputPath: 'DomainStatus.UpgradeProcessing',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.UpgradeProcessing', props);
    return resource.getResponseField('DomainStatus.UpgradeProcessing') as unknown as boolean;
  }
  public get elasticsearchVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion'),
        outputPath: 'DomainStatus.ElasticsearchVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchVersion', props);
    return resource.getResponseField('DomainStatus.ElasticsearchVersion') as unknown as string;
  }
  public get elasticsearchClusterConfig(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get ebsOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get accessPolicies(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AccessPolicies'),
        outputPath: 'DomainStatus.AccessPolicies',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AccessPolicies', props);
    return resource.getResponseField('DomainStatus.AccessPolicies') as unknown as string;
  }
  public get snapshotOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get vpcOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get cognitoOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get advancedOptions(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedOptions'),
        outputPath: 'DomainStatus.AdvancedOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedOptions', props);
    return resource.getResponseField('DomainStatus.AdvancedOptions') as unknown as Record<string, string>;
  }
  public get logPublishingOptions(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions'),
        outputPath: 'DomainStatus.LogPublishingOptions',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.LogPublishingOptions', props);
    return resource.getResponseField('DomainStatus.LogPublishingOptions') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get serviceSoftwareOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
  public get domainEndpointOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get advancedSecurityOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.WarmCount') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainStatus.ElasticsearchClusterConfig.ElasticsearchClusterConfig.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusEBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.EBSEnabled', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeType', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.VolumeSize', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops'),
        outputPath: 'DomainStatus.EBSOptions.EBSOptions.Iops',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EBSOptions.EBSOptions.Iops', props);
    return resource.getResponseField('DomainStatus.EBSOptions.EBSOptions.Iops') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusSnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour'),
        outputPath: 'DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainStatus.SnapshotOptions.SnapshotOptions.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusVPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.VPCId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.VPCId', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SubnetIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.AvailabilityZones', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds'),
        outputPath: 'DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds', props);
    return resource.getResponseField('DomainStatus.VPCOptions.VPCOptions.SecurityGroupIds') as unknown as string[];
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusCognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.UserPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn'),
        outputPath: 'DomainStatus.CognitoOptions.CognitoOptions.RoleArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.CognitoOptions.CognitoOptions.RoleArn', props);
    return resource.getResponseField('DomainStatus.CognitoOptions.CognitoOptions.RoleArn') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusEncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId'),
        outputPath: 'DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId', props);
    return resource.getResponseField('DomainStatus.EncryptionAtRestOptions.EncryptionAtRestOptions.KmsKeyId') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusNodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled'),
        outputPath: 'DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Enabled') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('DomainStatus.ServiceSoftwareOptions.ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusDomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn'),
        outputPath: 'DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainStatus.DomainEndpointOptions.DomainEndpointOptions.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainResponseElasticsearchDomainStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomain.DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainStatus.AdvancedSecurityOptions.AdvancedSecurityOptions.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get domainConfig(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfig {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfig(this, 'ElasticsearchDomainConfig', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get elasticsearchVersion(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus(this, 'ElasticsearchVersionStatus', this.resources, this.input);
  }
  public get elasticsearchClusterConfig(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus(this, 'ElasticsearchClusterConfigStatus', this.resources, this.input);
  }
  public get ebsOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus(this, 'EBSOptionsStatus', this.resources, this.input);
  }
  public get accessPolicies(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus(this, 'AccessPoliciesStatus', this.resources, this.input);
  }
  public get snapshotOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus(this, 'SnapshotOptionsStatus', this.resources, this.input);
  }
  public get vpcOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus(this, 'VPCDerivedInfoStatus', this.resources, this.input);
  }
  public get cognitoOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus(this, 'CognitoOptionsStatus', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus(this, 'EncryptionAtRestOptionsStatus', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus(this, 'NodeToNodeEncryptionOptionsStatus', this.resources, this.input);
  }
  public get advancedOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus(this, 'AdvancedOptionsStatus', this.resources, this.input);
  }
  public get logPublishingOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus(this, 'LogPublishingOptionsStatus', this.resources, this.input);
  }
  public get domainEndpointOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus(this, 'DomainEndpointOptionsStatus', this.resources, this.input);
  }
  public get advancedSecurityOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus(this, 'AdvancedSecurityOptionsStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options') as unknown as string;
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Options') as unknown as string;
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds') as unknown as string[];
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Options') as unknown as Record<string, string>;
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Options',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Options') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp {
    return new AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchDomainsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchDomainsRequest) {
    super(scope, id);
  }
  public get domainStatusList(): shapes.ElasticsearchDomainStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchDomains',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchDomains.'),
        outputPath: '',
        parameters: {
          domainNames: this.input.domainNames,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchDomains.', props);
    return resource.getResponseField('') as unknown as shapes.ElasticsearchDomainStatus[];
  }
}
export class AmazonElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeElasticsearchInstanceTypeLimitsRequest) {
    super(scope, id);
  }
  public get limitsByRole(): Record<string, shapes.Limits> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeElasticsearchInstanceTypeLimits',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeElasticsearchInstanceTypeLimits.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          instanceType: this.input.instanceType,
          elasticsearchVersion: this.input.elasticsearchVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeElasticsearchInstanceTypeLimits.', props);
    return resource.getResponseField('') as unknown as Record<string, shapes.Limits>;
  }
}
export class AmazonElasticsearchServiceDescribeInboundCrossClusterSearchConnectionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeInboundCrossClusterSearchConnectionsRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnections(): shapes.InboundCrossClusterSearchConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeInboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as shapes.InboundCrossClusterSearchConnection[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeInboundCrossClusterSearchConnections',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeInboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeOutboundCrossClusterSearchConnectionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeOutboundCrossClusterSearchConnectionsRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnections(): shapes.OutboundCrossClusterSearchConnection[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeOutboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOutboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as shapes.OutboundCrossClusterSearchConnection[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeOutboundCrossClusterSearchConnections',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeOutboundCrossClusterSearchConnections.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOutboundCrossClusterSearchConnections.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribePackagesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribePackagesRequest) {
    super(scope, id);
  }
  public get packageDetailsList(): shapes.PackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describePackages',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribePackages.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePackages.', props);
    return resource.getResponseField('') as unknown as shapes.PackageDetails[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describePackages',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribePackages.'),
        outputPath: '',
        parameters: {
          filters: this.input.filters,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePackages.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeReservedElasticsearchInstanceOfferingsRequest) {
    super(scope, id);
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeReservedElasticsearchInstanceOfferings.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstanceOfferings.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get reservedElasticsearchInstanceOfferings(): shapes.ReservedElasticsearchInstanceOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstanceOfferings',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeReservedElasticsearchInstanceOfferings.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstanceOfferings.', props);
    return resource.getResponseField('') as unknown as shapes.ReservedElasticsearchInstanceOffering[];
  }
}
export class AmazonElasticsearchServiceDescribeReservedElasticsearchInstancesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DescribeReservedElasticsearchInstancesRequest) {
    super(scope, id);
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeReservedElasticsearchInstances.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceId: this.input.reservedElasticsearchInstanceId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstances.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get reservedElasticsearchInstances(): shapes.ReservedElasticsearchInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'describeReservedElasticsearchInstances',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DescribeReservedElasticsearchInstances.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceId: this.input.reservedElasticsearchInstanceId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedElasticsearchInstances.', props);
    return resource.getResponseField('') as unknown as shapes.ReservedElasticsearchInstance[];
  }
}
export class AmazonElasticsearchServiceDissociatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DissociatePackageRequest) {
    super(scope, id);
  }
  public get domainPackageDetails(): AmazonElasticsearchServiceDissociatePackageResponseDomainPackageDetails {
    return new AmazonElasticsearchServiceDissociatePackageResponseDomainPackageDetails(this, 'DomainPackageDetails', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDissociatePackageResponseDomainPackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DissociatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DissociatePackage.DomainPackageDetails.PackageID'),
        outputPath: 'DomainPackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageID', props);
    return resource.getResponseField('DomainPackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DissociatePackage.DomainPackageDetails.PackageName'),
        outputPath: 'DomainPackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageName', props);
    return resource.getResponseField('DomainPackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DissociatePackage.DomainPackageDetails.PackageType'),
        outputPath: 'DomainPackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageType', props);
    return resource.getResponseField('DomainPackageDetails.PackageType') as unknown as string;
  }
  public get lastUpdated(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DissociatePackage.DomainPackageDetails.LastUpdated'),
        outputPath: 'DomainPackageDetails.LastUpdated',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.LastUpdated', props);
    return resource.getResponseField('DomainPackageDetails.LastUpdated') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DissociatePackage.DomainPackageDetails.DomainName'),
        outputPath: 'DomainPackageDetails.DomainName',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.DomainName', props);
    return resource.getResponseField('DomainPackageDetails.DomainName') as unknown as string;
  }
  public get domainPackageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DissociatePackage.DomainPackageDetails.DomainPackageStatus'),
        outputPath: 'DomainPackageDetails.DomainPackageStatus',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.DomainPackageStatus', props);
    return resource.getResponseField('DomainPackageDetails.DomainPackageStatus') as unknown as string;
  }
  public get packageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DissociatePackage.DomainPackageDetails.PackageVersion'),
        outputPath: 'DomainPackageDetails.PackageVersion',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.PackageVersion', props);
    return resource.getResponseField('DomainPackageDetails.PackageVersion') as unknown as string;
  }
  public get referencePath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DissociatePackage.DomainPackageDetails.ReferencePath'),
        outputPath: 'DomainPackageDetails.ReferencePath',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ReferencePath', props);
    return resource.getResponseField('DomainPackageDetails.ReferencePath') as unknown as string;
  }
  public get errorDetails(): AmazonElasticsearchServiceDissociatePackageResponseDomainPackageDetailsErrorDetails {
    return new AmazonElasticsearchServiceDissociatePackageResponseDomainPackageDetailsErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceDissociatePackageResponseDomainPackageDetailsErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.DissociatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'dissociatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DissociatePackage.DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('DomainPackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class AmazonElasticsearchServiceGetCompatibleElasticsearchVersionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetCompatibleElasticsearchVersionsRequest) {
    super(scope, id);
  }
  public get compatibleElasticsearchVersions(): shapes.CompatibleVersionsMap[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getCompatibleElasticsearchVersions',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.GetCompatibleElasticsearchVersions.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetCompatibleElasticsearchVersions.', props);
    return resource.getResponseField('') as unknown as shapes.CompatibleVersionsMap[];
  }
}
export class AmazonElasticsearchServiceGetPackageVersionHistoryResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetPackageVersionHistoryRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.GetPackageVersionHistory.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get packageVersionHistoryList(): shapes.PackageVersionHistory[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.GetPackageVersionHistory.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.', props);
    return resource.getResponseField('') as unknown as shapes.PackageVersionHistory[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getPackageVersionHistory',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.GetPackageVersionHistory.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetPackageVersionHistory.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceGetUpgradeHistoryResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetUpgradeHistoryRequest) {
    super(scope, id);
  }
  public get upgradeHistories(): shapes.UpgradeHistory[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.GetUpgradeHistory.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeHistory.', props);
    return resource.getResponseField('') as unknown as shapes.UpgradeHistory[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeHistory',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.GetUpgradeHistory.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeHistory.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceGetUpgradeStatusResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.GetUpgradeStatusRequest) {
    super(scope, id);
  }
  public get upgradeStep(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.GetUpgradeStatus.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get stepStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.GetUpgradeStatus.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get upgradeName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'getUpgradeStatus',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.GetUpgradeStatus.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'GetUpgradeStatus.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceListDomainNamesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[]) {
    super(scope, id);
  }
  public get domainNames(): shapes.DomainInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listDomainNames',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.ListDomainNames.'),
        outputPath: '',
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainNames.', props);
    return resource.getResponseField('') as unknown as shapes.DomainInfo[];
  }
}
export class AmazonElasticsearchServiceListDomainsForPackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListDomainsForPackageRequest) {
    super(scope, id);
  }
  public get domainPackageDetailsList(): shapes.DomainPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.ListDomainsForPackage.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainsForPackage.', props);
    return resource.getResponseField('') as unknown as shapes.DomainPackageDetails[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listDomainsForPackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.ListDomainsForPackage.'),
        outputPath: '',
        parameters: {
          packageId: this.input.packageId,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListDomainsForPackage.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceListElasticsearchInstanceTypesResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListElasticsearchInstanceTypesRequest) {
    super(scope, id);
  }
  public get elasticsearchInstanceTypes(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.ListElasticsearchInstanceTypes.'),
        outputPath: '',
        parameters: {
          elasticsearchVersion: this.input.elasticsearchVersion,
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchInstanceTypes.', props);
    return resource.getResponseField('') as unknown as string[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchInstanceTypes',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.ListElasticsearchInstanceTypes.'),
        outputPath: '',
        parameters: {
          elasticsearchVersion: this.input.elasticsearchVersion,
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchInstanceTypes.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceListElasticsearchVersionsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListElasticsearchVersionsRequest) {
    super(scope, id);
  }
  public get elasticsearchVersions(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.ListElasticsearchVersions.'),
        outputPath: '',
        parameters: {
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchVersions.', props);
    return resource.getResponseField('') as unknown as string[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listElasticsearchVersions',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.ListElasticsearchVersions.'),
        outputPath: '',
        parameters: {
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListElasticsearchVersions.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceListPackagesForDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListPackagesForDomainRequest) {
    super(scope, id);
  }
  public get domainPackageDetailsList(): shapes.DomainPackageDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.ListPackagesForDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPackagesForDomain.', props);
    return resource.getResponseField('') as unknown as shapes.DomainPackageDetails[];
  }
  public get nextToken(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listPackagesForDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.ListPackagesForDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          maxResults: this.input.maxResults,
          nextToken: this.input.nextToken,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListPackagesForDomain.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceListTagsResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.ListTagsRequest) {
    super(scope, id);
  }
  public get tagList(): shapes.Tag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'listTags',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.ListTags.'),
        outputPath: '',
        parameters: {
          arn: this.input.arn,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListTags.', props);
    return resource.getResponseField('') as unknown as shapes.Tag[];
  }
}
export class AmazonElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.PurchaseReservedElasticsearchInstanceOfferingRequest) {
    super(scope, id);
  }
  public get reservedElasticsearchInstanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.PurchaseReservedElasticsearchInstanceOffering.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          reservationName: this.input.reservationName,
          instanceCount: this.input.instanceCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedElasticsearchInstanceOffering.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get reservationName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'purchaseReservedElasticsearchInstanceOffering',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.PurchaseReservedElasticsearchInstanceOffering.'),
        outputPath: '',
        parameters: {
          reservedElasticsearchInstanceOfferingId: this.input.reservedElasticsearchInstanceOfferingId,
          reservationName: this.input.reservationName,
          instanceCount: this.input.instanceCount,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedElasticsearchInstanceOffering.', props);
    return resource.getResponseField('') as unknown as string;
  }
}
export class AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get crossClusterSearchConnection(): AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection {
    return new AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection(this, 'InboundCrossClusterSearchConnection', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnection extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get sourceDomainInfo(): AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get destinationDomainInfo(): AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation {
    return new AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation(this, 'DomainInformation', this.resources, this.input);
  }
  public get crossClusterSearchConnectionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId'),
        outputPath: 'CrossClusterSearchConnection.CrossClusterSearchConnectionId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.CrossClusterSearchConnectionId', props);
    return resource.getResponseField('CrossClusterSearchConnection.CrossClusterSearchConnectionId') as unknown as string;
  }
  public get connectionStatus(): AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus {
    return new AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus(this, 'InboundCrossClusterSearchConnectionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionDomainInformation extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.OwnerId') as unknown as string;
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.DomainName') as unknown as string;
  }
  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region'),
        outputPath: 'CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region', props);
    return resource.getResponseField('CrossClusterSearchConnection.SourceDomainInfo.SourceDomainInfo.Region') as unknown as string;
  }
}
export class AmazonElasticsearchServiceRejectInboundCrossClusterSearchConnectionResponseInboundCrossClusterSearchConnectionInboundCrossClusterSearchConnectionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.RejectInboundCrossClusterSearchConnectionRequest) {
    super(scope, id);
  }
  public get statusCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.StatusCode') as unknown as string;
  }
  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'rejectInboundCrossClusterSearchConnection',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message'),
        outputPath: 'CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message',
        parameters: {
          crossClusterSearchConnectionId: this.input.crossClusterSearchConnectionId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RejectInboundCrossClusterSearchConnection.CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message', props);
    return resource.getResponseField('CrossClusterSearchConnection.ConnectionStatus.ConnectionStatus.Message') as unknown as string;
  }
}
export class AmazonElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.StartElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get serviceSoftwareOptions(): AmazonElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions {
    return new AmazonElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions(this, 'ServiceSoftwareOptions', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponseServiceSoftwareOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.StartElasticsearchServiceSoftwareUpdateRequest) {
    super(scope, id);
  }
  public get currentVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion'),
        outputPath: 'ServiceSoftwareOptions.CurrentVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.CurrentVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.CurrentVersion') as unknown as string;
  }
  public get newVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion'),
        outputPath: 'ServiceSoftwareOptions.NewVersion',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.NewVersion', props);
    return resource.getResponseField('ServiceSoftwareOptions.NewVersion') as unknown as string;
  }
  public get updateAvailable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable'),
        outputPath: 'ServiceSoftwareOptions.UpdateAvailable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateAvailable', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateAvailable') as unknown as boolean;
  }
  public get cancellable(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable'),
        outputPath: 'ServiceSoftwareOptions.Cancellable',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Cancellable', props);
    return resource.getResponseField('ServiceSoftwareOptions.Cancellable') as unknown as boolean;
  }
  public get updateStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus'),
        outputPath: 'ServiceSoftwareOptions.UpdateStatus',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.UpdateStatus', props);
    return resource.getResponseField('ServiceSoftwareOptions.UpdateStatus') as unknown as string;
  }
  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description'),
        outputPath: 'ServiceSoftwareOptions.Description',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.Description', props);
    return resource.getResponseField('ServiceSoftwareOptions.Description') as unknown as string;
  }
  public get automatedUpdateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate'),
        outputPath: 'ServiceSoftwareOptions.AutomatedUpdateDate',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.AutomatedUpdateDate', props);
    return resource.getResponseField('ServiceSoftwareOptions.AutomatedUpdateDate') as unknown as string;
  }
  public get optionalDeployment(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'startElasticsearchServiceSoftwareUpdate',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment'),
        outputPath: 'ServiceSoftwareOptions.OptionalDeployment',
        parameters: {
          domainName: this.input.domainName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartElasticsearchServiceSoftwareUpdate.ServiceSoftwareOptions.OptionalDeployment', props);
    return resource.getResponseField('ServiceSoftwareOptions.OptionalDeployment') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get domainConfig(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfig {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfig(this, 'ElasticsearchDomainConfig', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get elasticsearchVersion(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus(this, 'ElasticsearchVersionStatus', this.resources, this.input);
  }
  public get elasticsearchClusterConfig(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus(this, 'ElasticsearchClusterConfigStatus', this.resources, this.input);
  }
  public get ebsOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus(this, 'EBSOptionsStatus', this.resources, this.input);
  }
  public get accessPolicies(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus(this, 'AccessPoliciesStatus', this.resources, this.input);
  }
  public get snapshotOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus(this, 'SnapshotOptionsStatus', this.resources, this.input);
  }
  public get vpcOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus(this, 'VPCDerivedInfoStatus', this.resources, this.input);
  }
  public get cognitoOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus(this, 'CognitoOptionsStatus', this.resources, this.input);
  }
  public get encryptionAtRestOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus(this, 'EncryptionAtRestOptionsStatus', this.resources, this.input);
  }
  public get nodeToNodeEncryptionOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus(this, 'NodeToNodeEncryptionOptionsStatus', this.resources, this.input);
  }
  public get advancedOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus(this, 'AdvancedOptionsStatus', this.resources, this.input);
  }
  public get logPublishingOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus(this, 'LogPublishingOptionsStatus', this.resources, this.input);
  }
  public get domainEndpointOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus(this, 'DomainEndpointOptionsStatus', this.resources, this.input);
  }
  public get advancedSecurityOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus(this, 'AdvancedSecurityOptionsStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Options') as unknown as string;
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchVersionStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchVersion.ElasticsearchVersion.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig(this, 'ElasticsearchClusterConfig', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get instanceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceType') as unknown as string;
  }
  public get instanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.InstanceCount') as unknown as number;
  }
  public get dedicatedMasterEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterEnabled') as unknown as boolean;
  }
  public get zoneAwarenessEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessEnabled') as unknown as boolean;
  }
  public get zoneAwarenessConfig(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig(this, 'ZoneAwarenessConfig', this.resources, this.input);
  }
  public get dedicatedMasterType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterType') as unknown as string;
  }
  public get dedicatedMasterCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.DedicatedMasterCount') as unknown as number;
  }
  public get warmEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmEnabled') as unknown as boolean;
  }
  public get warmType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmType') as unknown as string;
  }
  public get warmCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.WarmCount') as unknown as number;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusElasticsearchClusterConfigZoneAwarenessConfig extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get availabilityZoneCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Options.Options.ZoneAwarenessConfig.ZoneAwarenessConfig.AvailabilityZoneCount') as unknown as number;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigElasticsearchClusterConfigStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.ElasticsearchClusterConfig.ElasticsearchClusterConfig.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions(this, 'EBSOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusEBSOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get ebsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.EBSEnabled') as unknown as boolean;
  }
  public get volumeType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeType') as unknown as string;
  }
  public get volumeSize(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.VolumeSize') as unknown as number;
  }
  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Options.Options.Iops') as unknown as number;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEBSOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EBSOptions.EBSOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Options', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Options') as unknown as string;
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAccessPoliciesStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AccessPolicies.AccessPolicies.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions(this, 'SnapshotOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusSnapshotOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get automatedSnapshotStartHour(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Options.Options.AutomatedSnapshotStartHour') as unknown as number;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigSnapshotOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.SnapshotOptions.SnapshotOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo(this, 'VPCDerivedInfo', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusVPCDerivedInfo extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.VPCId') as unknown as string;
  }
  public get subnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SubnetIds') as unknown as string[];
  }
  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.AvailabilityZones') as unknown as string[];
  }
  public get securityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Options.Options.SecurityGroupIds') as unknown as string[];
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigVPCDerivedInfoStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.VPCOptions.VPCOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions(this, 'CognitoOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusCognitoOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get userPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.UserPoolId') as unknown as string;
  }
  public get identityPoolId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.IdentityPoolId') as unknown as string;
  }
  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Options.Options.RoleArn') as unknown as string;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigCognitoOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.CognitoOptions.CognitoOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions(this, 'EncryptionAtRestOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusEncryptionAtRestOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Options.Options.KmsKeyId') as unknown as string;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigEncryptionAtRestOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.EncryptionAtRestOptions.EncryptionAtRestOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions(this, 'NodeToNodeEncryptionOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusNodeToNodeEncryptionOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Options.Options.Enabled') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigNodeToNodeEncryptionOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.NodeToNodeEncryptionOptions.NodeToNodeEncryptionOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, string> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Options', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Options') as unknown as Record<string, string>;
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedOptions.AdvancedOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): Record<string, shapes.LogPublishingOption> {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Options',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Options', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Options') as unknown as Record<string, shapes.LogPublishingOption>;
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigLogPublishingOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.LogPublishingOptions.LogPublishingOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions(this, 'DomainEndpointOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusDomainEndpointOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enforceHttps(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.EnforceHTTPS') as unknown as boolean;
  }
  public get tlsSecurityPolicy(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.TLSSecurityPolicy') as unknown as string;
  }
  public get customEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointEnabled') as unknown as boolean;
  }
  public get customEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpoint') as unknown as string;
  }
  public get customEndpointCertificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Options.Options.CustomEndpointCertificateArn') as unknown as string;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigDomainEndpointOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.DomainEndpointOptions.DomainEndpointOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get options(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions(this, 'AdvancedSecurityOptions', this.resources, this.input);
  }
  public get status(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus(this, 'OptionStatus', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptions extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.Enabled') as unknown as boolean;
  }
  public get internalUserDatabaseEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.InternalUserDatabaseEnabled') as unknown as boolean;
  }
  public get samlOptions(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput(this, 'SAMLOptionsOutput', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutput extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Enabled') as unknown as boolean;
  }
  public get idp(): AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp {
    return new AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp(this, 'SAMLIdp', this.resources, this.input);
  }
  public get subjectKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SubjectKey') as unknown as string;
  }
  public get rolesKey(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.RolesKey') as unknown as string;
  }
  public get sessionTimeoutMinutes(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.SessionTimeoutMinutes') as unknown as number;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusAdvancedSecurityOptionsSAMLOptionsOutputSAMLIdp extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get metadataContent(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.MetadataContent') as unknown as string;
  }
  public get entityId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Options.Options.SAMLOptions.SAMLOptions.Idp.Idp.EntityId') as unknown as string;
  }
}
export class AmazonElasticsearchServiceUpdateElasticsearchDomainConfigResponseElasticsearchDomainConfigAdvancedSecurityOptionsStatusOptionStatus extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdateElasticsearchDomainConfigRequest) {
    super(scope, id);
  }
  public get creationDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.CreationDate') as unknown as string;
  }
  public get updateDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateDate') as unknown as string;
  }
  public get updateVersion(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.UpdateVersion') as unknown as number;
  }
  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.State') as unknown as string;
  }
  public get pendingDeletion(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updateElasticsearchDomainConfig',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion'),
        outputPath: 'DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion',
        parameters: {
          domainName: this.input.domainName,
          elasticsearchClusterConfig: {
            instanceType: this.input.elasticsearchClusterConfig?.instanceType,
            instanceCount: this.input.elasticsearchClusterConfig?.instanceCount,
            dedicatedMasterEnabled: this.input.elasticsearchClusterConfig?.dedicatedMasterEnabled,
            zoneAwarenessEnabled: this.input.elasticsearchClusterConfig?.zoneAwarenessEnabled,
            zoneAwarenessConfig: {
              availabilityZoneCount: this.input.elasticsearchClusterConfig?.zoneAwarenessConfig?.availabilityZoneCount,
            },
            dedicatedMasterType: this.input.elasticsearchClusterConfig?.dedicatedMasterType,
            dedicatedMasterCount: this.input.elasticsearchClusterConfig?.dedicatedMasterCount,
            warmEnabled: this.input.elasticsearchClusterConfig?.warmEnabled,
            warmType: this.input.elasticsearchClusterConfig?.warmType,
            warmCount: this.input.elasticsearchClusterConfig?.warmCount,
          },
          ebsOptions: {
            ebsEnabled: this.input.ebsOptions?.ebsEnabled,
            volumeType: this.input.ebsOptions?.volumeType,
            volumeSize: this.input.ebsOptions?.volumeSize,
            iops: this.input.ebsOptions?.iops,
          },
          snapshotOptions: {
            automatedSnapshotStartHour: this.input.snapshotOptions?.automatedSnapshotStartHour,
          },
          vpcOptions: {
            subnetIds: this.input.vpcOptions?.subnetIds,
            securityGroupIds: this.input.vpcOptions?.securityGroupIds,
          },
          cognitoOptions: {
            enabled: this.input.cognitoOptions?.enabled,
            userPoolId: this.input.cognitoOptions?.userPoolId,
            identityPoolId: this.input.cognitoOptions?.identityPoolId,
            roleArn: this.input.cognitoOptions?.roleArn,
          },
          advancedOptions: this.input.advancedOptions,
          accessPolicies: this.input.accessPolicies,
          logPublishingOptions: this.input.logPublishingOptions,
          domainEndpointOptions: {
            enforceHttps: this.input.domainEndpointOptions?.enforceHttps,
            tlsSecurityPolicy: this.input.domainEndpointOptions?.tlsSecurityPolicy,
            customEndpointEnabled: this.input.domainEndpointOptions?.customEndpointEnabled,
            customEndpoint: this.input.domainEndpointOptions?.customEndpoint,
            customEndpointCertificateArn: this.input.domainEndpointOptions?.customEndpointCertificateArn,
          },
          advancedSecurityOptions: {
            enabled: this.input.advancedSecurityOptions?.enabled,
            internalUserDatabaseEnabled: this.input.advancedSecurityOptions?.internalUserDatabaseEnabled,
            masterUserOptions: {
              masterUserArn: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserArn,
              masterUserName: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserName,
              masterUserPassword: this.input.advancedSecurityOptions?.masterUserOptions?.masterUserPassword,
            },
            samlOptions: {
              enabled: this.input.advancedSecurityOptions?.samlOptions?.enabled,
              idp: {
                metadataContent: this.input.advancedSecurityOptions?.samlOptions?.idp?.metadataContent,
                entityId: this.input.advancedSecurityOptions?.samlOptions?.idp?.entityId,
              },
              masterUserName: this.input.advancedSecurityOptions?.samlOptions?.masterUserName,
              masterBackendRole: this.input.advancedSecurityOptions?.samlOptions?.masterBackendRole,
              subjectKey: this.input.advancedSecurityOptions?.samlOptions?.subjectKey,
              rolesKey: this.input.advancedSecurityOptions?.samlOptions?.rolesKey,
              sessionTimeoutMinutes: this.input.advancedSecurityOptions?.samlOptions?.sessionTimeoutMinutes,
            },
          },
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdateElasticsearchDomainConfig.DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion', props);
    return resource.getResponseField('DomainConfig.AdvancedSecurityOptions.AdvancedSecurityOptions.Status.Status.PendingDeletion') as unknown as boolean;
  }
}
export class AmazonElasticsearchServiceUpdatePackageResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdatePackageRequest) {
    super(scope, id);
  }
  public get packageDetails(): AmazonElasticsearchServiceUpdatePackageResponsePackageDetails {
    return new AmazonElasticsearchServiceUpdatePackageResponsePackageDetails(this, 'PackageDetails', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdatePackageResponsePackageDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdatePackageRequest) {
    super(scope, id);
  }
  public get packageId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdatePackage.PackageDetails.PackageID'),
        outputPath: 'PackageDetails.PackageID',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageID', props);
    return resource.getResponseField('PackageDetails.PackageID') as unknown as string;
  }
  public get packageName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdatePackage.PackageDetails.PackageName'),
        outputPath: 'PackageDetails.PackageName',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageName', props);
    return resource.getResponseField('PackageDetails.PackageName') as unknown as string;
  }
  public get packageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdatePackage.PackageDetails.PackageType'),
        outputPath: 'PackageDetails.PackageType',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageType', props);
    return resource.getResponseField('PackageDetails.PackageType') as unknown as string;
  }
  public get packageDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdatePackage.PackageDetails.PackageDescription'),
        outputPath: 'PackageDetails.PackageDescription',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageDescription', props);
    return resource.getResponseField('PackageDetails.PackageDescription') as unknown as string;
  }
  public get packageStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdatePackage.PackageDetails.PackageStatus'),
        outputPath: 'PackageDetails.PackageStatus',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.PackageStatus', props);
    return resource.getResponseField('PackageDetails.PackageStatus') as unknown as string;
  }
  public get createdAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdatePackage.PackageDetails.CreatedAt'),
        outputPath: 'PackageDetails.CreatedAt',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.CreatedAt', props);
    return resource.getResponseField('PackageDetails.CreatedAt') as unknown as string;
  }
  public get lastUpdatedAt(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdatePackage.PackageDetails.LastUpdatedAt'),
        outputPath: 'PackageDetails.LastUpdatedAt',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.LastUpdatedAt', props);
    return resource.getResponseField('PackageDetails.LastUpdatedAt') as unknown as string;
  }
  public get availablePackageVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdatePackage.PackageDetails.AvailablePackageVersion'),
        outputPath: 'PackageDetails.AvailablePackageVersion',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.AvailablePackageVersion', props);
    return resource.getResponseField('PackageDetails.AvailablePackageVersion') as unknown as string;
  }
  public get errorDetails(): AmazonElasticsearchServiceUpdatePackageResponsePackageDetailsErrorDetails {
    return new AmazonElasticsearchServiceUpdatePackageResponsePackageDetailsErrorDetails(this, 'ErrorDetails', this.resources, this.input);
  }
}
export class AmazonElasticsearchServiceUpdatePackageResponsePackageDetailsErrorDetails extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpdatePackageRequest) {
    super(scope, id);
  }
  public get errorType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorType',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorType', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorType') as unknown as string;
  }
  public get errorMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'updatePackage',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage'),
        outputPath: 'PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage',
        parameters: {
          packageId: this.input.packageId,
          packageSource: {
            s3BucketName: this.input.packageSource.s3BucketName,
            s3Key: this.input.packageSource.s3Key,
          },
          packageDescription: this.input.packageDescription,
          commitMessage: this.input.commitMessage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpdatePackage.PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage', props);
    return resource.getResponseField('PackageDetails.ErrorDetails.ErrorDetails.ErrorMessage') as unknown as string;
  }
}
export class AmazonElasticsearchServiceUpgradeElasticsearchDomainResponse extends cdk.Construct {
  constructor(scope: cdk.Construct, id: string, private readonly resources: string[], private readonly input: shapes.UpgradeElasticsearchDomainRequest) {
    super(scope, id);
  }
  public get domainName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpgradeElasticsearchDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          targetVersion: this.input.targetVersion,
          performCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get targetVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpgradeElasticsearchDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          targetVersion: this.input.targetVersion,
          performCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.', props);
    return resource.getResponseField('') as unknown as string;
  }
  public get performCheckOnly(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.resources }),
      onUpdate: {
        action: 'upgradeElasticsearchDomain',
        service: 'AmazonElasticsearchService',
        physicalResourceId: cr.PhysicalResourceId.of('AmazonElasticsearchService.UpgradeElasticsearchDomain.'),
        outputPath: '',
        parameters: {
          domainName: this.input.domainName,
          targetVersion: this.input.targetVersion,
          performCheckOnly: this.input.performCheckOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'UpgradeElasticsearchDomain.', props);
    return resource.getResponseField('') as unknown as boolean;
  }
}
