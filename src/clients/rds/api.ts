import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class RdsClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public addRoleToDbCluster(input: shapes.RdsAddRoleToDbClusterMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addRoleToDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddRoleToDBCluster'),
        parameters: {
          DBClusterIdentifier: input.dbClusterIdentifier,
          RoleArn: input.roleArn,
          FeatureName: input.featureName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddRoleToDBCluster', props);
  }

  public addRoleToDbInstance(input: shapes.RdsAddRoleToDbInstanceMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addRoleToDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddRoleToDBInstance'),
        parameters: {
          DBInstanceIdentifier: input.dbInstanceIdentifier,
          RoleArn: input.roleArn,
          FeatureName: input.featureName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddRoleToDBInstance', props);
  }

  public addSourceIdentifierToSubscription(input: shapes.RdsAddSourceIdentifierToSubscriptionMessage): RDSAddSourceIdentifierToSubscription {
    return new RDSAddSourceIdentifierToSubscription(this, 'AddSourceIdentifierToSubscription', this.__resources, input);
  }

  public addTagsToResource(input: shapes.RdsAddTagsToResourceMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addTagsToResource',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddTagsToResource'),
        parameters: {
          ResourceName: input.resourceName,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddTagsToResource', props);
  }

  public applyPendingMaintenanceAction(input: shapes.RdsApplyPendingMaintenanceActionMessage): RDSApplyPendingMaintenanceAction {
    return new RDSApplyPendingMaintenanceAction(this, 'ApplyPendingMaintenanceAction', this.__resources, input);
  }

  public authorizeDbSecurityGroupIngress(input: shapes.RdsAuthorizeDbSecurityGroupIngressMessage): RDSAuthorizeDbSecurityGroupIngress {
    return new RDSAuthorizeDbSecurityGroupIngress(this, 'AuthorizeDbSecurityGroupIngress', this.__resources, input);
  }

  public backtrackDbCluster(input: shapes.RdsBacktrackDbClusterMessage): RDSBacktrackDbCluster {
    return new RDSBacktrackDbCluster(this, 'BacktrackDbCluster', this.__resources, input);
  }

  public cancelExportTask(input: shapes.RdsCancelExportTaskMessage): RDSCancelExportTask {
    return new RDSCancelExportTask(this, 'CancelExportTask', this.__resources, input);
  }

  public copyDbClusterParameterGroup(input: shapes.RdsCopyDbClusterParameterGroupMessage): RDSCopyDbClusterParameterGroup {
    return new RDSCopyDbClusterParameterGroup(this, 'CopyDbClusterParameterGroup', this.__resources, input);
  }

  public copyDbClusterSnapshot(input: shapes.RdsCopyDbClusterSnapshotMessage): RDSCopyDbClusterSnapshot {
    return new RDSCopyDbClusterSnapshot(this, 'CopyDbClusterSnapshot', this.__resources, input);
  }

  public copyDbParameterGroup(input: shapes.RdsCopyDbParameterGroupMessage): RDSCopyDbParameterGroup {
    return new RDSCopyDbParameterGroup(this, 'CopyDbParameterGroup', this.__resources, input);
  }

  public copyDbSnapshot(input: shapes.RdsCopyDbSnapshotMessage): RDSCopyDbSnapshot {
    return new RDSCopyDbSnapshot(this, 'CopyDbSnapshot', this.__resources, input);
  }

  public copyOptionGroup(input: shapes.RdsCopyOptionGroupMessage): RDSCopyOptionGroup {
    return new RDSCopyOptionGroup(this, 'CopyOptionGroup', this.__resources, input);
  }

  public createCustomAvailabilityZone(input: shapes.RdsCreateCustomAvailabilityZoneMessage): RDSCreateCustomAvailabilityZone {
    return new RDSCreateCustomAvailabilityZone(this, 'CreateCustomAvailabilityZone', this.__resources, input);
  }

  public createDbCluster(input: shapes.RdsCreateDbClusterMessage): RDSCreateDbCluster {
    return new RDSCreateDbCluster(this, 'CreateDbCluster', this.__resources, input);
  }

  public createDbClusterEndpoint(input: shapes.RdsCreateDbClusterEndpointMessage): RDSCreateDbClusterEndpoint {
    return new RDSCreateDbClusterEndpoint(this, 'CreateDbClusterEndpoint', this.__resources, input);
  }

  public createDbClusterParameterGroup(input: shapes.RdsCreateDbClusterParameterGroupMessage): RDSCreateDbClusterParameterGroup {
    return new RDSCreateDbClusterParameterGroup(this, 'CreateDbClusterParameterGroup', this.__resources, input);
  }

  public createDbClusterSnapshot(input: shapes.RdsCreateDbClusterSnapshotMessage): RDSCreateDbClusterSnapshot {
    return new RDSCreateDbClusterSnapshot(this, 'CreateDbClusterSnapshot', this.__resources, input);
  }

  public createDbInstance(input: shapes.RdsCreateDbInstanceMessage): RDSCreateDbInstance {
    return new RDSCreateDbInstance(this, 'CreateDbInstance', this.__resources, input);
  }

  public createDbInstanceReadReplica(input: shapes.RdsCreateDbInstanceReadReplicaMessage): RDSCreateDbInstanceReadReplica {
    return new RDSCreateDbInstanceReadReplica(this, 'CreateDbInstanceReadReplica', this.__resources, input);
  }

  public createDbParameterGroup(input: shapes.RdsCreateDbParameterGroupMessage): RDSCreateDbParameterGroup {
    return new RDSCreateDbParameterGroup(this, 'CreateDbParameterGroup', this.__resources, input);
  }

  public createDbProxy(input: shapes.RdsCreateDbProxyRequest): RDSCreateDbProxy {
    return new RDSCreateDbProxy(this, 'CreateDbProxy', this.__resources, input);
  }

  public createDbSecurityGroup(input: shapes.RdsCreateDbSecurityGroupMessage): RDSCreateDbSecurityGroup {
    return new RDSCreateDbSecurityGroup(this, 'CreateDbSecurityGroup', this.__resources, input);
  }

  public createDbSnapshot(input: shapes.RdsCreateDbSnapshotMessage): RDSCreateDbSnapshot {
    return new RDSCreateDbSnapshot(this, 'CreateDbSnapshot', this.__resources, input);
  }

  public createDbSubnetGroup(input: shapes.RdsCreateDbSubnetGroupMessage): RDSCreateDbSubnetGroup {
    return new RDSCreateDbSubnetGroup(this, 'CreateDbSubnetGroup', this.__resources, input);
  }

  public createEventSubscription(input: shapes.RdsCreateEventSubscriptionMessage): RDSCreateEventSubscription {
    return new RDSCreateEventSubscription(this, 'CreateEventSubscription', this.__resources, input);
  }

  public createGlobalCluster(input: shapes.RdsCreateGlobalClusterMessage): RDSCreateGlobalCluster {
    return new RDSCreateGlobalCluster(this, 'CreateGlobalCluster', this.__resources, input);
  }

  public createOptionGroup(input: shapes.RdsCreateOptionGroupMessage): RDSCreateOptionGroup {
    return new RDSCreateOptionGroup(this, 'CreateOptionGroup', this.__resources, input);
  }

  public deleteCustomAvailabilityZone(input: shapes.RdsDeleteCustomAvailabilityZoneMessage): RDSDeleteCustomAvailabilityZone {
    return new RDSDeleteCustomAvailabilityZone(this, 'DeleteCustomAvailabilityZone', this.__resources, input);
  }

  public deleteDbCluster(input: shapes.RdsDeleteDbClusterMessage): RDSDeleteDbCluster {
    return new RDSDeleteDbCluster(this, 'DeleteDbCluster', this.__resources, input);
  }

  public deleteDbClusterEndpoint(input: shapes.RdsDeleteDbClusterEndpointMessage): RDSDeleteDbClusterEndpoint {
    return new RDSDeleteDbClusterEndpoint(this, 'DeleteDbClusterEndpoint', this.__resources, input);
  }

  public deleteDbClusterParameterGroup(input: shapes.RdsDeleteDbClusterParameterGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterParameterGroup'),
        parameters: {
          DBClusterParameterGroupName: input.dbClusterParameterGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBClusterParameterGroup', props);
  }

  public deleteDbClusterSnapshot(input: shapes.RdsDeleteDbClusterSnapshotMessage): RDSDeleteDbClusterSnapshot {
    return new RDSDeleteDbClusterSnapshot(this, 'DeleteDbClusterSnapshot', this.__resources, input);
  }

  public deleteDbInstance(input: shapes.RdsDeleteDbInstanceMessage): RDSDeleteDbInstance {
    return new RDSDeleteDbInstance(this, 'DeleteDbInstance', this.__resources, input);
  }

  public deleteDbInstanceAutomatedBackup(input: shapes.RdsDeleteDbInstanceAutomatedBackupMessage): RDSDeleteDbInstanceAutomatedBackup {
    return new RDSDeleteDbInstanceAutomatedBackup(this, 'DeleteDbInstanceAutomatedBackup', this.__resources, input);
  }

  public deleteDbParameterGroup(input: shapes.RdsDeleteDbParameterGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBParameterGroup'),
        parameters: {
          DBParameterGroupName: input.dbParameterGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBParameterGroup', props);
  }

  public deleteDbProxy(input: shapes.RdsDeleteDbProxyRequest): RDSDeleteDbProxy {
    return new RDSDeleteDbProxy(this, 'DeleteDbProxy', this.__resources, input);
  }

  public deleteDbSecurityGroup(input: shapes.RdsDeleteDbSecurityGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSecurityGroup'),
        parameters: {
          DBSecurityGroupName: input.dbSecurityGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBSecurityGroup', props);
  }

  public deleteDbSnapshot(input: shapes.RdsDeleteDbSnapshotMessage): RDSDeleteDbSnapshot {
    return new RDSDeleteDbSnapshot(this, 'DeleteDbSnapshot', this.__resources, input);
  }

  public deleteDbSubnetGroup(input: shapes.RdsDeleteDbSubnetGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSubnetGroup'),
        parameters: {
          DBSubnetGroupName: input.dbSubnetGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBSubnetGroup', props);
  }

  public deleteEventSubscription(input: shapes.RdsDeleteEventSubscriptionMessage): RDSDeleteEventSubscription {
    return new RDSDeleteEventSubscription(this, 'DeleteEventSubscription', this.__resources, input);
  }

  public deleteGlobalCluster(input: shapes.RdsDeleteGlobalClusterMessage): RDSDeleteGlobalCluster {
    return new RDSDeleteGlobalCluster(this, 'DeleteGlobalCluster', this.__resources, input);
  }

  public deleteInstallationMedia(input: shapes.RdsDeleteInstallationMediaMessage): RDSDeleteInstallationMedia {
    return new RDSDeleteInstallationMedia(this, 'DeleteInstallationMedia', this.__resources, input);
  }

  public deleteOptionGroup(input: shapes.RdsDeleteOptionGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteOptionGroup'),
        parameters: {
          OptionGroupName: input.optionGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteOptionGroup', props);
  }

  public deregisterDbProxyTargets(input: shapes.RdsDeregisterDbProxyTargetsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterDbProxyTargets',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeregisterDBProxyTargets'),
        parameters: {
          DBProxyName: input.dbProxyName,
          TargetGroupName: input.targetGroupName,
          DBInstanceIdentifiers: input.dbInstanceIdentifiers,
          DBClusterIdentifiers: input.dbClusterIdentifiers,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeregisterDBProxyTargets', props);
  }

  public describeAccountAttributes(): RDSDescribeAccountAttributes {
    return new RDSDescribeAccountAttributes(this, 'DescribeAccountAttributes', this.__resources);
  }

  public describeCertificates(input: shapes.RdsDescribeCertificatesMessage): RDSDescribeCertificates {
    return new RDSDescribeCertificates(this, 'DescribeCertificates', this.__resources, input);
  }

  public describeCustomAvailabilityZones(input: shapes.RdsDescribeCustomAvailabilityZonesMessage): RDSDescribeCustomAvailabilityZones {
    return new RDSDescribeCustomAvailabilityZones(this, 'DescribeCustomAvailabilityZones', this.__resources, input);
  }

  public describeDbClusterBacktracks(input: shapes.RdsDescribeDbClusterBacktracksMessage): RDSDescribeDbClusterBacktracks {
    return new RDSDescribeDbClusterBacktracks(this, 'DescribeDbClusterBacktracks', this.__resources, input);
  }

  public describeDbClusterEndpoints(input: shapes.RdsDescribeDbClusterEndpointsMessage): RDSDescribeDbClusterEndpoints {
    return new RDSDescribeDbClusterEndpoints(this, 'DescribeDbClusterEndpoints', this.__resources, input);
  }

  public describeDbClusterParameterGroups(input: shapes.RdsDescribeDbClusterParameterGroupsMessage): RDSDescribeDbClusterParameterGroups {
    return new RDSDescribeDbClusterParameterGroups(this, 'DescribeDbClusterParameterGroups', this.__resources, input);
  }

  public describeDbClusterParameters(input: shapes.RdsDescribeDbClusterParametersMessage): RDSDescribeDbClusterParameters {
    return new RDSDescribeDbClusterParameters(this, 'DescribeDbClusterParameters', this.__resources, input);
  }

  public describeDbClusterSnapshotAttributes(input: shapes.RdsDescribeDbClusterSnapshotAttributesMessage): RDSDescribeDbClusterSnapshotAttributes {
    return new RDSDescribeDbClusterSnapshotAttributes(this, 'DescribeDbClusterSnapshotAttributes', this.__resources, input);
  }

  public describeDbClusterSnapshots(input: shapes.RdsDescribeDbClusterSnapshotsMessage): RDSDescribeDbClusterSnapshots {
    return new RDSDescribeDbClusterSnapshots(this, 'DescribeDbClusterSnapshots', this.__resources, input);
  }

  public describeDbClusters(input: shapes.RdsDescribeDbClustersMessage): RDSDescribeDbClusters {
    return new RDSDescribeDbClusters(this, 'DescribeDbClusters', this.__resources, input);
  }

  public describeDbEngineVersions(input: shapes.RdsDescribeDbEngineVersionsMessage): RDSDescribeDbEngineVersions {
    return new RDSDescribeDbEngineVersions(this, 'DescribeDbEngineVersions', this.__resources, input);
  }

  public describeDbInstanceAutomatedBackups(input: shapes.RdsDescribeDbInstanceAutomatedBackupsMessage): RDSDescribeDbInstanceAutomatedBackups {
    return new RDSDescribeDbInstanceAutomatedBackups(this, 'DescribeDbInstanceAutomatedBackups', this.__resources, input);
  }

  public describeDbInstances(input: shapes.RdsDescribeDbInstancesMessage): RDSDescribeDbInstances {
    return new RDSDescribeDbInstances(this, 'DescribeDbInstances', this.__resources, input);
  }

  public describeDbLogFiles(input: shapes.RdsDescribeDbLogFilesMessage): RDSDescribeDbLogFiles {
    return new RDSDescribeDbLogFiles(this, 'DescribeDbLogFiles', this.__resources, input);
  }

  public describeDbParameterGroups(input: shapes.RdsDescribeDbParameterGroupsMessage): RDSDescribeDbParameterGroups {
    return new RDSDescribeDbParameterGroups(this, 'DescribeDbParameterGroups', this.__resources, input);
  }

  public describeDbParameters(input: shapes.RdsDescribeDbParametersMessage): RDSDescribeDbParameters {
    return new RDSDescribeDbParameters(this, 'DescribeDbParameters', this.__resources, input);
  }

  public describeDbProxies(input: shapes.RdsDescribeDbProxiesRequest): RDSDescribeDbProxies {
    return new RDSDescribeDbProxies(this, 'DescribeDbProxies', this.__resources, input);
  }

  public describeDbProxyTargetGroups(input: shapes.RdsDescribeDbProxyTargetGroupsRequest): RDSDescribeDbProxyTargetGroups {
    return new RDSDescribeDbProxyTargetGroups(this, 'DescribeDbProxyTargetGroups', this.__resources, input);
  }

  public describeDbProxyTargets(input: shapes.RdsDescribeDbProxyTargetsRequest): RDSDescribeDbProxyTargets {
    return new RDSDescribeDbProxyTargets(this, 'DescribeDbProxyTargets', this.__resources, input);
  }

  public describeDbSecurityGroups(input: shapes.RdsDescribeDbSecurityGroupsMessage): RDSDescribeDbSecurityGroups {
    return new RDSDescribeDbSecurityGroups(this, 'DescribeDbSecurityGroups', this.__resources, input);
  }

  public describeDbSnapshotAttributes(input: shapes.RdsDescribeDbSnapshotAttributesMessage): RDSDescribeDbSnapshotAttributes {
    return new RDSDescribeDbSnapshotAttributes(this, 'DescribeDbSnapshotAttributes', this.__resources, input);
  }

  public describeDbSnapshots(input: shapes.RdsDescribeDbSnapshotsMessage): RDSDescribeDbSnapshots {
    return new RDSDescribeDbSnapshots(this, 'DescribeDbSnapshots', this.__resources, input);
  }

  public describeDbSubnetGroups(input: shapes.RdsDescribeDbSubnetGroupsMessage): RDSDescribeDbSubnetGroups {
    return new RDSDescribeDbSubnetGroups(this, 'DescribeDbSubnetGroups', this.__resources, input);
  }

  public describeEngineDefaultClusterParameters(input: shapes.RdsDescribeEngineDefaultClusterParametersMessage): RDSDescribeEngineDefaultClusterParameters {
    return new RDSDescribeEngineDefaultClusterParameters(this, 'DescribeEngineDefaultClusterParameters', this.__resources, input);
  }

  public describeEngineDefaultParameters(input: shapes.RdsDescribeEngineDefaultParametersMessage): RDSDescribeEngineDefaultParameters {
    return new RDSDescribeEngineDefaultParameters(this, 'DescribeEngineDefaultParameters', this.__resources, input);
  }

  public describeEventCategories(input: shapes.RdsDescribeEventCategoriesMessage): RDSDescribeEventCategories {
    return new RDSDescribeEventCategories(this, 'DescribeEventCategories', this.__resources, input);
  }

  public describeEventSubscriptions(input: shapes.RdsDescribeEventSubscriptionsMessage): RDSDescribeEventSubscriptions {
    return new RDSDescribeEventSubscriptions(this, 'DescribeEventSubscriptions', this.__resources, input);
  }

  public describeEvents(input: shapes.RdsDescribeEventsMessage): RDSDescribeEvents {
    return new RDSDescribeEvents(this, 'DescribeEvents', this.__resources, input);
  }

  public describeExportTasks(input: shapes.RdsDescribeExportTasksMessage): RDSDescribeExportTasks {
    return new RDSDescribeExportTasks(this, 'DescribeExportTasks', this.__resources, input);
  }

  public describeGlobalClusters(input: shapes.RdsDescribeGlobalClustersMessage): RDSDescribeGlobalClusters {
    return new RDSDescribeGlobalClusters(this, 'DescribeGlobalClusters', this.__resources, input);
  }

  public describeInstallationMedia(input: shapes.RdsDescribeInstallationMediaMessage): RDSDescribeInstallationMedia {
    return new RDSDescribeInstallationMedia(this, 'DescribeInstallationMedia', this.__resources, input);
  }

  public describeOptionGroupOptions(input: shapes.RdsDescribeOptionGroupOptionsMessage): RDSDescribeOptionGroupOptions {
    return new RDSDescribeOptionGroupOptions(this, 'DescribeOptionGroupOptions', this.__resources, input);
  }

  public describeOptionGroups(input: shapes.RdsDescribeOptionGroupsMessage): RDSDescribeOptionGroups {
    return new RDSDescribeOptionGroups(this, 'DescribeOptionGroups', this.__resources, input);
  }

  public describeOrderableDbInstanceOptions(input: shapes.RdsDescribeOrderableDbInstanceOptionsMessage): RDSDescribeOrderableDbInstanceOptions {
    return new RDSDescribeOrderableDbInstanceOptions(this, 'DescribeOrderableDbInstanceOptions', this.__resources, input);
  }

  public describePendingMaintenanceActions(input: shapes.RdsDescribePendingMaintenanceActionsMessage): RDSDescribePendingMaintenanceActions {
    return new RDSDescribePendingMaintenanceActions(this, 'DescribePendingMaintenanceActions', this.__resources, input);
  }

  public describeReservedDbInstances(input: shapes.RdsDescribeReservedDbInstancesMessage): RDSDescribeReservedDbInstances {
    return new RDSDescribeReservedDbInstances(this, 'DescribeReservedDbInstances', this.__resources, input);
  }

  public describeReservedDbInstancesOfferings(input: shapes.RdsDescribeReservedDbInstancesOfferingsMessage): RDSDescribeReservedDbInstancesOfferings {
    return new RDSDescribeReservedDbInstancesOfferings(this, 'DescribeReservedDbInstancesOfferings', this.__resources, input);
  }

  public describeSourceRegions(input: shapes.RdsDescribeSourceRegionsMessage): RDSDescribeSourceRegions {
    return new RDSDescribeSourceRegions(this, 'DescribeSourceRegions', this.__resources, input);
  }

  public describeValidDbInstanceModifications(input: shapes.RdsDescribeValidDbInstanceModificationsMessage): RDSDescribeValidDbInstanceModifications {
    return new RDSDescribeValidDbInstanceModifications(this, 'DescribeValidDbInstanceModifications', this.__resources, input);
  }

  public downloadDbLogFilePortion(input: shapes.RdsDownloadDbLogFilePortionMessage): RDSDownloadDbLogFilePortion {
    return new RDSDownloadDbLogFilePortion(this, 'DownloadDbLogFilePortion', this.__resources, input);
  }

  public failoverDbCluster(input: shapes.RdsFailoverDbClusterMessage): RDSFailoverDbCluster {
    return new RDSFailoverDbCluster(this, 'FailoverDbCluster', this.__resources, input);
  }

  public importInstallationMedia(input: shapes.RdsImportInstallationMediaMessage): RDSImportInstallationMedia {
    return new RDSImportInstallationMedia(this, 'ImportInstallationMedia', this.__resources, input);
  }

  public listTagsForResource(input: shapes.RdsListTagsForResourceMessage): RDSListTagsForResource {
    return new RDSListTagsForResource(this, 'ListTagsForResource', this.__resources, input);
  }

  public modifyCertificates(input: shapes.RdsModifyCertificatesMessage): RDSModifyCertificates {
    return new RDSModifyCertificates(this, 'ModifyCertificates', this.__resources, input);
  }

  public modifyCurrentDbClusterCapacity(input: shapes.RdsModifyCurrentDbClusterCapacityMessage): RDSModifyCurrentDbClusterCapacity {
    return new RDSModifyCurrentDbClusterCapacity(this, 'ModifyCurrentDbClusterCapacity', this.__resources, input);
  }

  public modifyDbCluster(input: shapes.RdsModifyDbClusterMessage): RDSModifyDbCluster {
    return new RDSModifyDbCluster(this, 'ModifyDbCluster', this.__resources, input);
  }

  public modifyDbClusterEndpoint(input: shapes.RdsModifyDbClusterEndpointMessage): RDSModifyDbClusterEndpoint {
    return new RDSModifyDbClusterEndpoint(this, 'ModifyDbClusterEndpoint', this.__resources, input);
  }

  public modifyDbClusterParameterGroup(input: shapes.RdsModifyDbClusterParameterGroupMessage): RDSModifyDbClusterParameterGroup {
    return new RDSModifyDbClusterParameterGroup(this, 'ModifyDbClusterParameterGroup', this.__resources, input);
  }

  public modifyDbClusterSnapshotAttribute(input: shapes.RdsModifyDbClusterSnapshotAttributeMessage): RDSModifyDbClusterSnapshotAttribute {
    return new RDSModifyDbClusterSnapshotAttribute(this, 'ModifyDbClusterSnapshotAttribute', this.__resources, input);
  }

  public modifyDbInstance(input: shapes.RdsModifyDbInstanceMessage): RDSModifyDbInstance {
    return new RDSModifyDbInstance(this, 'ModifyDbInstance', this.__resources, input);
  }

  public modifyDbParameterGroup(input: shapes.RdsModifyDbParameterGroupMessage): RDSModifyDbParameterGroup {
    return new RDSModifyDbParameterGroup(this, 'ModifyDbParameterGroup', this.__resources, input);
  }

  public modifyDbProxy(input: shapes.RdsModifyDbProxyRequest): RDSModifyDbProxy {
    return new RDSModifyDbProxy(this, 'ModifyDbProxy', this.__resources, input);
  }

  public modifyDbProxyTargetGroup(input: shapes.RdsModifyDbProxyTargetGroupRequest): RDSModifyDbProxyTargetGroup {
    return new RDSModifyDbProxyTargetGroup(this, 'ModifyDbProxyTargetGroup', this.__resources, input);
  }

  public modifyDbSnapshot(input: shapes.RdsModifyDbSnapshotMessage): RDSModifyDbSnapshot {
    return new RDSModifyDbSnapshot(this, 'ModifyDbSnapshot', this.__resources, input);
  }

  public modifyDbSnapshotAttribute(input: shapes.RdsModifyDbSnapshotAttributeMessage): RDSModifyDbSnapshotAttribute {
    return new RDSModifyDbSnapshotAttribute(this, 'ModifyDbSnapshotAttribute', this.__resources, input);
  }

  public modifyDbSubnetGroup(input: shapes.RdsModifyDbSubnetGroupMessage): RDSModifyDbSubnetGroup {
    return new RDSModifyDbSubnetGroup(this, 'ModifyDbSubnetGroup', this.__resources, input);
  }

  public modifyEventSubscription(input: shapes.RdsModifyEventSubscriptionMessage): RDSModifyEventSubscription {
    return new RDSModifyEventSubscription(this, 'ModifyEventSubscription', this.__resources, input);
  }

  public modifyGlobalCluster(input: shapes.RdsModifyGlobalClusterMessage): RDSModifyGlobalCluster {
    return new RDSModifyGlobalCluster(this, 'ModifyGlobalCluster', this.__resources, input);
  }

  public modifyOptionGroup(input: shapes.RdsModifyOptionGroupMessage): RDSModifyOptionGroup {
    return new RDSModifyOptionGroup(this, 'ModifyOptionGroup', this.__resources, input);
  }

  public promoteReadReplica(input: shapes.RdsPromoteReadReplicaMessage): RDSPromoteReadReplica {
    return new RDSPromoteReadReplica(this, 'PromoteReadReplica', this.__resources, input);
  }

  public promoteReadReplicaDbCluster(input: shapes.RdsPromoteReadReplicaDbClusterMessage): RDSPromoteReadReplicaDbCluster {
    return new RDSPromoteReadReplicaDbCluster(this, 'PromoteReadReplicaDbCluster', this.__resources, input);
  }

  public purchaseReservedDbInstancesOffering(input: shapes.RdsPurchaseReservedDbInstancesOfferingMessage): RDSPurchaseReservedDbInstancesOffering {
    return new RDSPurchaseReservedDbInstancesOffering(this, 'PurchaseReservedDbInstancesOffering', this.__resources, input);
  }

  public rebootDbInstance(input: shapes.RdsRebootDbInstanceMessage): RDSRebootDbInstance {
    return new RDSRebootDbInstance(this, 'RebootDbInstance', this.__resources, input);
  }

  public registerDbProxyTargets(input: shapes.RdsRegisterDbProxyTargetsRequest): RDSRegisterDbProxyTargets {
    return new RDSRegisterDbProxyTargets(this, 'RegisterDbProxyTargets', this.__resources, input);
  }

  public removeFromGlobalCluster(input: shapes.RdsRemoveFromGlobalClusterMessage): RDSRemoveFromGlobalCluster {
    return new RDSRemoveFromGlobalCluster(this, 'RemoveFromGlobalCluster', this.__resources, input);
  }

  public removeRoleFromDbCluster(input: shapes.RdsRemoveRoleFromDbClusterMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeRoleFromDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveRoleFromDBCluster'),
        parameters: {
          DBClusterIdentifier: input.dbClusterIdentifier,
          RoleArn: input.roleArn,
          FeatureName: input.featureName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveRoleFromDBCluster', props);
  }

  public removeRoleFromDbInstance(input: shapes.RdsRemoveRoleFromDbInstanceMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeRoleFromDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveRoleFromDBInstance'),
        parameters: {
          DBInstanceIdentifier: input.dbInstanceIdentifier,
          RoleArn: input.roleArn,
          FeatureName: input.featureName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveRoleFromDBInstance', props);
  }

  public removeSourceIdentifierFromSubscription(input: shapes.RdsRemoveSourceIdentifierFromSubscriptionMessage): RDSRemoveSourceIdentifierFromSubscription {
    return new RDSRemoveSourceIdentifierFromSubscription(this, 'RemoveSourceIdentifierFromSubscription', this.__resources, input);
  }

  public removeTagsFromResource(input: shapes.RdsRemoveTagsFromResourceMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeTagsFromResource',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveTagsFromResource'),
        parameters: {
          ResourceName: input.resourceName,
          TagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveTagsFromResource', props);
  }

  public resetDbClusterParameterGroup(input: shapes.RdsResetDbClusterParameterGroupMessage): RDSResetDbClusterParameterGroup {
    return new RDSResetDbClusterParameterGroup(this, 'ResetDbClusterParameterGroup', this.__resources, input);
  }

  public resetDbParameterGroup(input: shapes.RdsResetDbParameterGroupMessage): RDSResetDbParameterGroup {
    return new RDSResetDbParameterGroup(this, 'ResetDbParameterGroup', this.__resources, input);
  }

  public restoreDbClusterFromS3(input: shapes.RdsRestoreDbClusterFromS3Message): RDSRestoreDbClusterFromS3 {
    return new RDSRestoreDbClusterFromS3(this, 'RestoreDbClusterFromS3', this.__resources, input);
  }

  public restoreDbClusterFromSnapshot(input: shapes.RdsRestoreDbClusterFromSnapshotMessage): RDSRestoreDbClusterFromSnapshot {
    return new RDSRestoreDbClusterFromSnapshot(this, 'RestoreDbClusterFromSnapshot', this.__resources, input);
  }

  public restoreDbClusterToPointInTime(input: shapes.RdsRestoreDbClusterToPointInTimeMessage): RDSRestoreDbClusterToPointInTime {
    return new RDSRestoreDbClusterToPointInTime(this, 'RestoreDbClusterToPointInTime', this.__resources, input);
  }

  public restoreDbInstanceFromDbSnapshot(input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage): RDSRestoreDbInstanceFromDbSnapshot {
    return new RDSRestoreDbInstanceFromDbSnapshot(this, 'RestoreDbInstanceFromDbSnapshot', this.__resources, input);
  }

  public restoreDbInstanceFromS3(input: shapes.RdsRestoreDbInstanceFromS3Message): RDSRestoreDbInstanceFromS3 {
    return new RDSRestoreDbInstanceFromS3(this, 'RestoreDbInstanceFromS3', this.__resources, input);
  }

  public restoreDbInstanceToPointInTime(input: shapes.RdsRestoreDbInstanceToPointInTimeMessage): RDSRestoreDbInstanceToPointInTime {
    return new RDSRestoreDbInstanceToPointInTime(this, 'RestoreDbInstanceToPointInTime', this.__resources, input);
  }

  public revokeDbSecurityGroupIngress(input: shapes.RdsRevokeDbSecurityGroupIngressMessage): RDSRevokeDbSecurityGroupIngress {
    return new RDSRevokeDbSecurityGroupIngress(this, 'RevokeDbSecurityGroupIngress', this.__resources, input);
  }

  public startActivityStream(input: shapes.RdsStartActivityStreamRequest): RDSStartActivityStream {
    return new RDSStartActivityStream(this, 'StartActivityStream', this.__resources, input);
  }

  public startDbCluster(input: shapes.RdsStartDbClusterMessage): RDSStartDbCluster {
    return new RDSStartDbCluster(this, 'StartDbCluster', this.__resources, input);
  }

  public startDbInstance(input: shapes.RdsStartDbInstanceMessage): RDSStartDbInstance {
    return new RDSStartDbInstance(this, 'StartDbInstance', this.__resources, input);
  }

  public startExportTask(input: shapes.RdsStartExportTaskMessage): RDSStartExportTask {
    return new RDSStartExportTask(this, 'StartExportTask', this.__resources, input);
  }

  public stopActivityStream(input: shapes.RdsStopActivityStreamRequest): RDSStopActivityStream {
    return new RDSStopActivityStream(this, 'StopActivityStream', this.__resources, input);
  }

  public stopDbCluster(input: shapes.RdsStopDbClusterMessage): RDSStopDbCluster {
    return new RDSStopDbCluster(this, 'StopDbCluster', this.__resources, input);
  }

  public stopDbInstance(input: shapes.RdsStopDbInstanceMessage): RDSStopDbInstance {
    return new RDSStopDbInstance(this, 'StopDbInstance', this.__resources, input);
  }

}

export class RDSAddSourceIdentifierToSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsAddSourceIdentifierToSubscriptionMessage) {
    super(scope, id);
  }

  public get eventSubscription(): RDSAddSourceIdentifierToSubscriptionEventSubscription {
    return new RDSAddSourceIdentifierToSubscriptionEventSubscription(this, 'EventSubscription', this.__resources, this.input);
  }

}

export class RDSAddSourceIdentifierToSubscriptionEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsAddSourceIdentifierToSubscriptionMessage) {
    super(scope, id);
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AddSourceIdentifierToSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AddSourceIdentifierToSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AddSourceIdentifierToSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AddSourceIdentifierToSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AddSourceIdentifierToSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AddSourceIdentifierToSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AddSourceIdentifierToSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AddSourceIdentifierToSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AddSourceIdentifierToSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AddSourceIdentifierToSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class RDSApplyPendingMaintenanceAction extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsApplyPendingMaintenanceActionMessage) {
    super(scope, id);
  }

  public get resourcePendingMaintenanceActions(): RDSApplyPendingMaintenanceActionResourcePendingMaintenanceActions {
    return new RDSApplyPendingMaintenanceActionResourcePendingMaintenanceActions(this, 'ResourcePendingMaintenanceActions', this.__resources, this.input);
  }

}

export class RDSApplyPendingMaintenanceActionResourcePendingMaintenanceActions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsApplyPendingMaintenanceActionMessage) {
    super(scope, id);
  }

  public get resourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'applyPendingMaintenanceAction',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.ResourceIdentifier'),
        outputPath: 'ResourcePendingMaintenanceActions.ResourceIdentifier',
        parameters: {
          ResourceIdentifier: this.input.resourceIdentifier,
          ApplyAction: this.input.applyAction,
          OptInType: this.input.optInType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.ResourceIdentifier', props);
    return resource.getResponseField('ResourcePendingMaintenanceActions.ResourceIdentifier') as unknown as string;
  }

  public get pendingMaintenanceActionDetails(): shapes.RdsPendingMaintenanceAction[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'applyPendingMaintenanceAction',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails'),
        outputPath: 'ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails',
        parameters: {
          ResourceIdentifier: this.input.resourceIdentifier,
          ApplyAction: this.input.applyAction,
          OptInType: this.input.optInType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails', props);
    return resource.getResponseField('ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails') as unknown as shapes.RdsPendingMaintenanceAction[];
  }

}

export class RDSAuthorizeDbSecurityGroupIngress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsAuthorizeDbSecurityGroupIngressMessage) {
    super(scope, id);
  }

  public get dbSecurityGroup(): RDSAuthorizeDbSecurityGroupIngressDbSecurityGroup {
    return new RDSAuthorizeDbSecurityGroupIngressDbSecurityGroup(this, 'DbSecurityGroup', this.__resources, this.input);
  }

}

export class RDSAuthorizeDbSecurityGroupIngressDbSecurityGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsAuthorizeDbSecurityGroupIngressMessage) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.OwnerId'),
        outputPath: 'DBSecurityGroup.OwnerId',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.OwnerId', props);
    return resource.getResponseField('DBSecurityGroup.OwnerId') as unknown as string;
  }

  public get dbSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupName'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupName',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupName', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupName') as unknown as string;
  }

  public get dbSecurityGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupDescription'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupDescription',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupDescription', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.VpcId'),
        outputPath: 'DBSecurityGroup.VpcId',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.VpcId', props);
    return resource.getResponseField('DBSecurityGroup.VpcId') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.Rdsec2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.EC2SecurityGroups'),
        outputPath: 'DBSecurityGroup.EC2SecurityGroups',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('DBSecurityGroup.EC2SecurityGroups') as unknown as shapes.Rdsec2SecurityGroup[];
  }

  public get ipRanges(): shapes.RdsipRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.IPRanges'),
        outputPath: 'DBSecurityGroup.IPRanges',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.IPRanges', props);
    return resource.getResponseField('DBSecurityGroup.IPRanges') as unknown as shapes.RdsipRange[];
  }

  public get dbSecurityGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupArn'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupArn',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupArn', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupArn') as unknown as string;
  }

}

export class RDSBacktrackDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsBacktrackDbClusterMessage) {
    super(scope, id);
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          BacktrackTo: this.input.backtrackTo,
          Force: this.input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BacktrackDBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get backtrackIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.BacktrackIdentifier'),
        outputPath: 'BacktrackIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          BacktrackTo: this.input.backtrackTo,
          Force: this.input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BacktrackDBCluster.BacktrackIdentifier', props);
    return resource.getResponseField('BacktrackIdentifier') as unknown as string;
  }

  public get backtrackTo(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.BacktrackTo'),
        outputPath: 'BacktrackTo',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          BacktrackTo: this.input.backtrackTo,
          Force: this.input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BacktrackDBCluster.BacktrackTo', props);
    return resource.getResponseField('BacktrackTo') as unknown as string;
  }

  public get backtrackedFrom(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.BacktrackedFrom'),
        outputPath: 'BacktrackedFrom',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          BacktrackTo: this.input.backtrackTo,
          Force: this.input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BacktrackDBCluster.BacktrackedFrom', props);
    return resource.getResponseField('BacktrackedFrom') as unknown as string;
  }

  public get backtrackRequestCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.BacktrackRequestCreationTime'),
        outputPath: 'BacktrackRequestCreationTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          BacktrackTo: this.input.backtrackTo,
          Force: this.input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BacktrackDBCluster.BacktrackRequestCreationTime', props);
    return resource.getResponseField('BacktrackRequestCreationTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          BacktrackTo: this.input.backtrackTo,
          Force: this.input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'BacktrackDBCluster.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

}

export class RDSCancelExportTask extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCancelExportTaskMessage) {
    super(scope, id);
  }

  public get exportTaskIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.ExportTaskIdentifier'),
        outputPath: 'ExportTaskIdentifier',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.ExportTaskIdentifier', props);
    return resource.getResponseField('ExportTaskIdentifier') as unknown as string;
  }

  public get sourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.SourceArn'),
        outputPath: 'SourceArn',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.SourceArn', props);
    return resource.getResponseField('SourceArn') as unknown as string;
  }

  public get exportOnly(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.ExportOnly'),
        outputPath: 'ExportOnly',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.ExportOnly', props);
    return resource.getResponseField('ExportOnly') as unknown as string[];
  }

  public get snapshotTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.SnapshotTime'),
        outputPath: 'SnapshotTime',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.SnapshotTime', props);
    return resource.getResponseField('SnapshotTime') as unknown as string;
  }

  public get taskStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.TaskStartTime'),
        outputPath: 'TaskStartTime',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.TaskStartTime', props);
    return resource.getResponseField('TaskStartTime') as unknown as string;
  }

  public get taskEndTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.TaskEndTime'),
        outputPath: 'TaskEndTime',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.TaskEndTime', props);
    return resource.getResponseField('TaskEndTime') as unknown as string;
  }

  public get s3Bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.S3Bucket'),
        outputPath: 'S3Bucket',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.S3Bucket', props);
    return resource.getResponseField('S3Bucket') as unknown as string;
  }

  public get s3Prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.S3Prefix'),
        outputPath: 'S3Prefix',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.S3Prefix', props);
    return resource.getResponseField('S3Prefix') as unknown as string;
  }

  public get iamRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.IamRoleArn'),
        outputPath: 'IamRoleArn',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.IamRoleArn', props);
    return resource.getResponseField('IamRoleArn') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.Status'),
        outputPath: 'Status',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.PercentProgress'),
        outputPath: 'PercentProgress',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.PercentProgress', props);
    return resource.getResponseField('PercentProgress') as unknown as number;
  }

  public get totalExtractedDataInGb(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.TotalExtractedDataInGB'),
        outputPath: 'TotalExtractedDataInGB',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.TotalExtractedDataInGB', props);
    return resource.getResponseField('TotalExtractedDataInGB') as unknown as number;
  }

  public get failureCause(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.FailureCause'),
        outputPath: 'FailureCause',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.FailureCause', props);
    return resource.getResponseField('FailureCause') as unknown as string;
  }

  public get warningMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.WarningMessage'),
        outputPath: 'WarningMessage',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CancelExportTask.WarningMessage', props);
    return resource.getResponseField('WarningMessage') as unknown as string;
  }

}

export class RDSCopyDbClusterParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCopyDbClusterParameterGroupMessage) {
    super(scope, id);
  }

  public get dbClusterParameterGroup(): RDSCopyDbClusterParameterGroupDbClusterParameterGroup {
    return new RDSCopyDbClusterParameterGroupDbClusterParameterGroup(this, 'DbClusterParameterGroup', this.__resources, this.input);
  }

}

export class RDSCopyDbClusterParameterGroupDbClusterParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCopyDbClusterParameterGroupMessage) {
    super(scope, id);
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupName',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.input.targetDbClusterParameterGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBClusterParameterGroup.DBParameterGroupFamily',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.input.targetDbClusterParameterGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBClusterParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterParameterGroup.DBClusterParameterGroup.Description'),
        outputPath: 'DBClusterParameterGroup.Description',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.input.targetDbClusterParameterGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.Description', props);
    return resource.getResponseField('DBClusterParameterGroup.Description') as unknown as string;
  }

  public get dbClusterParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupArn',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.input.targetDbClusterParameterGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupArn') as unknown as string;
  }

}

export class RDSCopyDbClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCopyDbClusterSnapshotMessage) {
    super(scope, id);
  }

  public get dbClusterSnapshot(): RDSCopyDbClusterSnapshotDbClusterSnapshot {
    return new RDSCopyDbClusterSnapshotDbClusterSnapshot(this, 'DbClusterSnapshot', this.__resources, this.input);
  }

}

export class RDSCopyDbClusterSnapshotDbClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCopyDbClusterSnapshotMessage) {
    super(scope, id);
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones'),
        outputPath: 'DBClusterSnapshot.AvailabilityZones',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones', props);
    return resource.getResponseField('DBClusterSnapshot.AvailabilityZones') as unknown as string[];
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotIdentifier',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterIdentifier',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime'),
        outputPath: 'DBClusterSnapshot.SnapshotCreateTime',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.Engine'),
        outputPath: 'DBClusterSnapshot.Engine',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.Engine', props);
    return resource.getResponseField('DBClusterSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage'),
        outputPath: 'DBClusterSnapshot.AllocatedStorage',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBClusterSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.Status'),
        outputPath: 'DBClusterSnapshot.Status',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.Status', props);
    return resource.getResponseField('DBClusterSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.Port'),
        outputPath: 'DBClusterSnapshot.Port',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.Port', props);
    return resource.getResponseField('DBClusterSnapshot.Port') as unknown as number;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.VpcId'),
        outputPath: 'DBClusterSnapshot.VpcId',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.VpcId', props);
    return resource.getResponseField('DBClusterSnapshot.VpcId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime'),
        outputPath: 'DBClusterSnapshot.ClusterCreateTime',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.MasterUsername'),
        outputPath: 'DBClusterSnapshot.MasterUsername',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.MasterUsername', props);
    return resource.getResponseField('DBClusterSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.EngineVersion'),
        outputPath: 'DBClusterSnapshot.EngineVersion',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.EngineVersion', props);
    return resource.getResponseField('DBClusterSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.LicenseModel'),
        outputPath: 'DBClusterSnapshot.LicenseModel',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.LicenseModel', props);
    return resource.getResponseField('DBClusterSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotType'),
        outputPath: 'DBClusterSnapshot.SnapshotType',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotType', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotType') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.PercentProgress'),
        outputPath: 'DBClusterSnapshot.PercentProgress',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.PercentProgress', props);
    return resource.getResponseField('DBClusterSnapshot.PercentProgress') as unknown as number;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted'),
        outputPath: 'DBClusterSnapshot.StorageEncrypted',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted', props);
    return resource.getResponseField('DBClusterSnapshot.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.KmsKeyId'),
        outputPath: 'DBClusterSnapshot.KmsKeyId',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBClusterSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotArn',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotArn') as unknown as string;
  }

  public get sourceDbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.SourceDBClusterSnapshotArn',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.SourceDBClusterSnapshotArn') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBClusterSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBClusterSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.TagList'),
        outputPath: 'DBClusterSnapshot.TagList',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          CopyTags: this.input.copyTags,
          Tags: this.input.tags,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBClusterSnapshot.DBClusterSnapshot.TagList', props);
    return resource.getResponseField('DBClusterSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSCopyDbParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCopyDbParameterGroupMessage) {
    super(scope, id);
  }

  public get dbParameterGroup(): RDSCopyDbParameterGroupDbParameterGroup {
    return new RDSCopyDbParameterGroupDbParameterGroup(this, 'DbParameterGroup', this.__resources, this.input);
  }

}

export class RDSCopyDbParameterGroupDbParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCopyDbParameterGroupMessage) {
    super(scope, id);
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBParameterGroup.DBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroup.DBParameterGroupName',
        parameters: {
          SourceDBParameterGroupIdentifier: this.input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.input.targetDbParameterGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBParameterGroup.DBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBParameterGroup.DBParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBParameterGroup.DBParameterGroupFamily',
        parameters: {
          SourceDBParameterGroupIdentifier: this.input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.input.targetDbParameterGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBParameterGroup.DBParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBParameterGroup.DBParameterGroup.Description'),
        outputPath: 'DBParameterGroup.Description',
        parameters: {
          SourceDBParameterGroupIdentifier: this.input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.input.targetDbParameterGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBParameterGroup.DBParameterGroup.Description', props);
    return resource.getResponseField('DBParameterGroup.Description') as unknown as string;
  }

  public get dbParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBParameterGroup.DBParameterGroup.DBParameterGroupArn'),
        outputPath: 'DBParameterGroup.DBParameterGroupArn',
        parameters: {
          SourceDBParameterGroupIdentifier: this.input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.input.targetDbParameterGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBParameterGroup.DBParameterGroup.DBParameterGroupArn', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupArn') as unknown as string;
  }

}

export class RDSCopyDbSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCopyDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbSnapshot(): RDSCopyDbSnapshotDbSnapshot {
    return new RDSCopyDbSnapshotDbSnapshot(this, 'DbSnapshot', this.__resources, this.input);
  }

}

export class RDSCopyDbSnapshotDbSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCopyDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.DBSnapshotIdentifier',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.DBInstanceIdentifier'),
        outputPath: 'DBSnapshot.DBInstanceIdentifier',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.DBInstanceIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBInstanceIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.SnapshotCreateTime'),
        outputPath: 'DBSnapshot.SnapshotCreateTime',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Engine'),
        outputPath: 'DBSnapshot.Engine',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.Engine', props);
    return resource.getResponseField('DBSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.AllocatedStorage'),
        outputPath: 'DBSnapshot.AllocatedStorage',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Status'),
        outputPath: 'DBSnapshot.Status',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.Status', props);
    return resource.getResponseField('DBSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Port'),
        outputPath: 'DBSnapshot.Port',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.Port', props);
    return resource.getResponseField('DBSnapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.AvailabilityZone'),
        outputPath: 'DBSnapshot.AvailabilityZone',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.AvailabilityZone', props);
    return resource.getResponseField('DBSnapshot.AvailabilityZone') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.VpcId'),
        outputPath: 'DBSnapshot.VpcId',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.VpcId', props);
    return resource.getResponseField('DBSnapshot.VpcId') as unknown as string;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.InstanceCreateTime'),
        outputPath: 'DBSnapshot.InstanceCreateTime',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.InstanceCreateTime', props);
    return resource.getResponseField('DBSnapshot.InstanceCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.MasterUsername'),
        outputPath: 'DBSnapshot.MasterUsername',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.MasterUsername', props);
    return resource.getResponseField('DBSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.EngineVersion'),
        outputPath: 'DBSnapshot.EngineVersion',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.EngineVersion', props);
    return resource.getResponseField('DBSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.LicenseModel'),
        outputPath: 'DBSnapshot.LicenseModel',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.LicenseModel', props);
    return resource.getResponseField('DBSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.SnapshotType'),
        outputPath: 'DBSnapshot.SnapshotType',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.SnapshotType', props);
    return resource.getResponseField('DBSnapshot.SnapshotType') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Iops'),
        outputPath: 'DBSnapshot.Iops',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.Iops', props);
    return resource.getResponseField('DBSnapshot.Iops') as unknown as number;
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.OptionGroupName'),
        outputPath: 'DBSnapshot.OptionGroupName',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.OptionGroupName', props);
    return resource.getResponseField('DBSnapshot.OptionGroupName') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.PercentProgress'),
        outputPath: 'DBSnapshot.PercentProgress',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.PercentProgress', props);
    return resource.getResponseField('DBSnapshot.PercentProgress') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.SourceRegion'),
        outputPath: 'DBSnapshot.SourceRegion',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.SourceRegion', props);
    return resource.getResponseField('DBSnapshot.SourceRegion') as unknown as string;
  }

  public get sourceDbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.SourceDBSnapshotIdentifier',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.SourceDBSnapshotIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.StorageType'),
        outputPath: 'DBSnapshot.StorageType',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.StorageType', props);
    return resource.getResponseField('DBSnapshot.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.TdeCredentialArn'),
        outputPath: 'DBSnapshot.TdeCredentialArn',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.TdeCredentialArn', props);
    return resource.getResponseField('DBSnapshot.TdeCredentialArn') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Encrypted'),
        outputPath: 'DBSnapshot.Encrypted',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.Encrypted', props);
    return resource.getResponseField('DBSnapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.KmsKeyId'),
        outputPath: 'DBSnapshot.KmsKeyId',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.DBSnapshotArn'),
        outputPath: 'DBSnapshot.DBSnapshotArn',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.DBSnapshotArn', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Timezone'),
        outputPath: 'DBSnapshot.Timezone',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.Timezone', props);
    return resource.getResponseField('DBSnapshot.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.ProcessorFeatures'),
        outputPath: 'DBSnapshot.ProcessorFeatures',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.ProcessorFeatures', props);
    return resource.getResponseField('DBSnapshot.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.DbiResourceId'),
        outputPath: 'DBSnapshot.DbiResourceId',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.DbiResourceId', props);
    return resource.getResponseField('DBSnapshot.DbiResourceId') as unknown as string;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.TagList'),
        outputPath: 'DBSnapshot.TagList',
        parameters: {
          SourceDBSnapshotIdentifier: this.input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.input.targetDbSnapshotIdentifier,
          KmsKeyId: this.input.kmsKeyId,
          Tags: this.input.tags,
          CopyTags: this.input.copyTags,
          PreSignedUrl: this.input.preSignedUrl,
          OptionGroupName: this.input.optionGroupName,
          TargetCustomAvailabilityZone: this.input.targetCustomAvailabilityZone,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyDBSnapshot.DBSnapshot.TagList', props);
    return resource.getResponseField('DBSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSCopyOptionGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCopyOptionGroupMessage) {
    super(scope, id);
  }

  public get optionGroup(): RDSCopyOptionGroupOptionGroup {
    return new RDSCopyOptionGroupOptionGroup(this, 'OptionGroup', this.__resources, this.input);
  }

}

export class RDSCopyOptionGroupOptionGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCopyOptionGroupMessage) {
    super(scope, id);
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.OptionGroupName'),
        outputPath: 'OptionGroup.OptionGroupName',
        parameters: {
          SourceOptionGroupIdentifier: this.input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.input.targetOptionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyOptionGroup.OptionGroup.OptionGroupName', props);
    return resource.getResponseField('OptionGroup.OptionGroupName') as unknown as string;
  }

  public get optionGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.OptionGroupDescription'),
        outputPath: 'OptionGroup.OptionGroupDescription',
        parameters: {
          SourceOptionGroupIdentifier: this.input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.input.targetOptionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyOptionGroup.OptionGroup.OptionGroupDescription', props);
    return resource.getResponseField('OptionGroup.OptionGroupDescription') as unknown as string;
  }

  public get engineName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.EngineName'),
        outputPath: 'OptionGroup.EngineName',
        parameters: {
          SourceOptionGroupIdentifier: this.input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.input.targetOptionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyOptionGroup.OptionGroup.EngineName', props);
    return resource.getResponseField('OptionGroup.EngineName') as unknown as string;
  }

  public get majorEngineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.MajorEngineVersion'),
        outputPath: 'OptionGroup.MajorEngineVersion',
        parameters: {
          SourceOptionGroupIdentifier: this.input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.input.targetOptionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyOptionGroup.OptionGroup.MajorEngineVersion', props);
    return resource.getResponseField('OptionGroup.MajorEngineVersion') as unknown as string;
  }

  public get options(): shapes.RdsOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.Options'),
        outputPath: 'OptionGroup.Options',
        parameters: {
          SourceOptionGroupIdentifier: this.input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.input.targetOptionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyOptionGroup.OptionGroup.Options', props);
    return resource.getResponseField('OptionGroup.Options') as unknown as shapes.RdsOption[];
  }

  public get allowsVpcAndNonVpcInstanceMemberships(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships'),
        outputPath: 'OptionGroup.AllowsVpcAndNonVpcInstanceMemberships',
        parameters: {
          SourceOptionGroupIdentifier: this.input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.input.targetOptionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships', props);
    return resource.getResponseField('OptionGroup.AllowsVpcAndNonVpcInstanceMemberships') as unknown as boolean;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.VpcId'),
        outputPath: 'OptionGroup.VpcId',
        parameters: {
          SourceOptionGroupIdentifier: this.input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.input.targetOptionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyOptionGroup.OptionGroup.VpcId', props);
    return resource.getResponseField('OptionGroup.VpcId') as unknown as string;
  }

  public get optionGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.OptionGroupArn'),
        outputPath: 'OptionGroup.OptionGroupArn',
        parameters: {
          SourceOptionGroupIdentifier: this.input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.input.targetOptionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CopyOptionGroup.OptionGroup.OptionGroupArn', props);
    return resource.getResponseField('OptionGroup.OptionGroupArn') as unknown as string;
  }

}

export class RDSCreateCustomAvailabilityZone extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateCustomAvailabilityZoneMessage) {
    super(scope, id);
  }

  public get customAvailabilityZone(): RDSCreateCustomAvailabilityZoneCustomAvailabilityZone {
    return new RDSCreateCustomAvailabilityZoneCustomAvailabilityZone(this, 'CustomAvailabilityZone', this.__resources, this.input);
  }

}

export class RDSCreateCustomAvailabilityZoneCustomAvailabilityZone extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateCustomAvailabilityZoneMessage) {
    super(scope, id);
  }

  public get customAvailabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneId'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneId',
        parameters: {
          CustomAvailabilityZoneName: this.input.customAvailabilityZoneName,
          ExistingVpnId: this.input.existingVpnId,
          NewVpnTunnelName: this.input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneId', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneId') as unknown as string;
  }

  public get customAvailabilityZoneName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneName'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneName',
        parameters: {
          CustomAvailabilityZoneName: this.input.customAvailabilityZoneName,
          ExistingVpnId: this.input.existingVpnId,
          NewVpnTunnelName: this.input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneName', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneName') as unknown as string;
  }

  public get customAvailabilityZoneStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneStatus'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneStatus',
        parameters: {
          CustomAvailabilityZoneName: this.input.customAvailabilityZoneName,
          ExistingVpnId: this.input.existingVpnId,
          NewVpnTunnelName: this.input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneStatus', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneStatus') as unknown as string;
  }

  public get vpnDetails(): RDSCreateCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails {
    return new RDSCreateCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails(this, 'VpnDetails', this.__resources, this.input);
  }

}

export class RDSCreateCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateCustomAvailabilityZoneMessage) {
    super(scope, id);
  }

  public get vpnId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnId'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnId',
        parameters: {
          CustomAvailabilityZoneName: this.input.customAvailabilityZoneName,
          ExistingVpnId: this.input.existingVpnId,
          NewVpnTunnelName: this.input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnId', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnId') as unknown as string;
  }

  public get vpnTunnelOriginatorIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP',
        parameters: {
          CustomAvailabilityZoneName: this.input.customAvailabilityZoneName,
          ExistingVpnId: this.input.existingVpnId,
          NewVpnTunnelName: this.input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP') as unknown as string;
  }

  public get vpnGatewayIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnGatewayIp'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnGatewayIp',
        parameters: {
          CustomAvailabilityZoneName: this.input.customAvailabilityZoneName,
          ExistingVpnId: this.input.existingVpnId,
          NewVpnTunnelName: this.input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnGatewayIp', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnGatewayIp') as unknown as string;
  }

  public get vpnPsk(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnPSK'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnPSK',
        parameters: {
          CustomAvailabilityZoneName: this.input.customAvailabilityZoneName,
          ExistingVpnId: this.input.existingVpnId,
          NewVpnTunnelName: this.input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnPSK', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnPSK') as unknown as string;
  }

  public get vpnName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnName'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnName',
        parameters: {
          CustomAvailabilityZoneName: this.input.customAvailabilityZoneName,
          ExistingVpnId: this.input.existingVpnId,
          NewVpnTunnelName: this.input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnName', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnName') as unknown as string;
  }

  public get vpnState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnState'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnState',
        parameters: {
          CustomAvailabilityZoneName: this.input.customAvailabilityZoneName,
          ExistingVpnId: this.input.existingVpnId,
          NewVpnTunnelName: this.input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnState', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnState') as unknown as string;
  }

}

export class RDSCreateDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbClusterMessage) {
    super(scope, id);
  }

  public get dbCluster(): RDSCreateDbClusterDbCluster {
    return new RDSCreateDbClusterDbCluster(this, 'DbCluster', this.__resources, this.input);
  }

}

export class RDSCreateDbClusterDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbClusterMessage) {
    super(scope, id);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSCreateDbClusterDbClusterScalingConfigurationInfo {
    return new RDSCreateDbClusterDbClusterScalingConfigurationInfo(this, 'ScalingConfigurationInfo', this.__resources, this.input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSCreateDbClusterDbClusterScalingConfigurationInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbClusterMessage) {
    super(scope, id);
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.input.replicationSourceIdentifier,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSCreateDbClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbClusterEndpointMessage) {
    super(scope, id);
  }

  public get dbClusterEndpointIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.DBClusterEndpointIdentifier'),
        outputPath: 'DBClusterEndpointIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterEndpoint.DBClusterEndpointIdentifier', props);
    return resource.getResponseField('DBClusterEndpointIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterEndpoint.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterEndpointResourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.DBClusterEndpointResourceIdentifier'),
        outputPath: 'DBClusterEndpointResourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterEndpoint.DBClusterEndpointResourceIdentifier', props);
    return resource.getResponseField('DBClusterEndpointResourceIdentifier') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.Endpoint'),
        outputPath: 'Endpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterEndpoint.Endpoint', props);
    return resource.getResponseField('Endpoint') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterEndpoint.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get endpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.EndpointType'),
        outputPath: 'EndpointType',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterEndpoint.EndpointType', props);
    return resource.getResponseField('EndpointType') as unknown as string;
  }

  public get customEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.CustomEndpointType'),
        outputPath: 'CustomEndpointType',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterEndpoint.CustomEndpointType', props);
    return resource.getResponseField('CustomEndpointType') as unknown as string;
  }

  public get staticMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.StaticMembers'),
        outputPath: 'StaticMembers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterEndpoint.StaticMembers', props);
    return resource.getResponseField('StaticMembers') as unknown as string[];
  }

  public get excludedMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.ExcludedMembers'),
        outputPath: 'ExcludedMembers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterEndpoint.ExcludedMembers', props);
    return resource.getResponseField('ExcludedMembers') as unknown as string[];
  }

  public get dbClusterEndpointArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.DBClusterEndpointArn'),
        outputPath: 'DBClusterEndpointArn',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterEndpoint.DBClusterEndpointArn', props);
    return resource.getResponseField('DBClusterEndpointArn') as unknown as string;
  }

}

export class RDSCreateDbClusterParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbClusterParameterGroupMessage) {
    super(scope, id);
  }

  public get dbClusterParameterGroup(): RDSCreateDbClusterParameterGroupDbClusterParameterGroup {
    return new RDSCreateDbClusterParameterGroupDbClusterParameterGroup(this, 'DbClusterParameterGroup', this.__resources, this.input);
  }

}

export class RDSCreateDbClusterParameterGroupDbClusterParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbClusterParameterGroupMessage) {
    super(scope, id);
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupName',
        parameters: {
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBClusterParameterGroup.DBParameterGroupFamily',
        parameters: {
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBClusterParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterParameterGroup.DBClusterParameterGroup.Description'),
        outputPath: 'DBClusterParameterGroup.Description',
        parameters: {
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.Description', props);
    return resource.getResponseField('DBClusterParameterGroup.Description') as unknown as string;
  }

  public get dbClusterParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupArn',
        parameters: {
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupArn') as unknown as string;
  }

}

export class RDSCreateDbClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbClusterSnapshotMessage) {
    super(scope, id);
  }

  public get dbClusterSnapshot(): RDSCreateDbClusterSnapshotDbClusterSnapshot {
    return new RDSCreateDbClusterSnapshotDbClusterSnapshot(this, 'DbClusterSnapshot', this.__resources, this.input);
  }

}

export class RDSCreateDbClusterSnapshotDbClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbClusterSnapshotMessage) {
    super(scope, id);
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones'),
        outputPath: 'DBClusterSnapshot.AvailabilityZones',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones', props);
    return resource.getResponseField('DBClusterSnapshot.AvailabilityZones') as unknown as string[];
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime'),
        outputPath: 'DBClusterSnapshot.SnapshotCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.Engine'),
        outputPath: 'DBClusterSnapshot.Engine',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.Engine', props);
    return resource.getResponseField('DBClusterSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage'),
        outputPath: 'DBClusterSnapshot.AllocatedStorage',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBClusterSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.Status'),
        outputPath: 'DBClusterSnapshot.Status',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.Status', props);
    return resource.getResponseField('DBClusterSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.Port'),
        outputPath: 'DBClusterSnapshot.Port',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.Port', props);
    return resource.getResponseField('DBClusterSnapshot.Port') as unknown as number;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.VpcId'),
        outputPath: 'DBClusterSnapshot.VpcId',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.VpcId', props);
    return resource.getResponseField('DBClusterSnapshot.VpcId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime'),
        outputPath: 'DBClusterSnapshot.ClusterCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.MasterUsername'),
        outputPath: 'DBClusterSnapshot.MasterUsername',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.MasterUsername', props);
    return resource.getResponseField('DBClusterSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.EngineVersion'),
        outputPath: 'DBClusterSnapshot.EngineVersion',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.EngineVersion', props);
    return resource.getResponseField('DBClusterSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.LicenseModel'),
        outputPath: 'DBClusterSnapshot.LicenseModel',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.LicenseModel', props);
    return resource.getResponseField('DBClusterSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotType'),
        outputPath: 'DBClusterSnapshot.SnapshotType',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotType', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotType') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.PercentProgress'),
        outputPath: 'DBClusterSnapshot.PercentProgress',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.PercentProgress', props);
    return resource.getResponseField('DBClusterSnapshot.PercentProgress') as unknown as number;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted'),
        outputPath: 'DBClusterSnapshot.StorageEncrypted',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted', props);
    return resource.getResponseField('DBClusterSnapshot.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.KmsKeyId'),
        outputPath: 'DBClusterSnapshot.KmsKeyId',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBClusterSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotArn') as unknown as string;
  }

  public get sourceDbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.SourceDBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.SourceDBClusterSnapshotArn') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBClusterSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBClusterSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.TagList'),
        outputPath: 'DBClusterSnapshot.TagList',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBClusterSnapshot.DBClusterSnapshot.TagList', props);
    return resource.getResponseField('DBClusterSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSCreateDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstance(): RDSCreateDbInstanceDbInstance {
    return new RDSCreateDbInstanceDbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSCreateDbInstanceDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSCreateDbInstanceDbInstanceEndpoint {
    return new RDSCreateDbInstanceDbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSCreateDbInstanceDbInstanceDbSubnetGroup {
    return new RDSCreateDbInstanceDbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSCreateDbInstanceDbInstancePendingModifiedValues {
    return new RDSCreateDbInstanceDbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSCreateDbInstanceDbInstanceListenerEndpoint {
    return new RDSCreateDbInstanceDbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSCreateDbInstanceDbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSCreateDbInstanceDbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSCreateDbInstanceDbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSCreateDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSCreateDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSCreateDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceMessage) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSCreateDbInstanceDbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CharacterSetName: this.input.characterSetName,
          NcharCharacterSetName: this.input.ncharCharacterSetName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          Timezone: this.input.timezone,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSCreateDbInstanceReadReplica extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
    super(scope, id);
  }

  public get dbInstance(): RDSCreateDbInstanceReadReplicaDbInstance {
    return new RDSCreateDbInstanceReadReplicaDbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSCreateDbInstanceReadReplicaDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSCreateDbInstanceReadReplicaDbInstanceEndpoint {
    return new RDSCreateDbInstanceReadReplicaDbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSCreateDbInstanceReadReplicaDbInstanceDbSubnetGroup {
    return new RDSCreateDbInstanceReadReplicaDbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSCreateDbInstanceReadReplicaDbInstancePendingModifiedValues {
    return new RDSCreateDbInstanceReadReplicaDbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSCreateDbInstanceReadReplicaDbInstanceListenerEndpoint {
    return new RDSCreateDbInstanceReadReplicaDbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSCreateDbInstanceReadReplicaDbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSCreateDbInstanceReadReplicaDbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSCreateDbInstanceReadReplicaDbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSCreateDbInstanceReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSCreateDbInstanceReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSCreateDbInstanceReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSCreateDbInstanceReadReplicaDbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          AvailabilityZone: this.input.availabilityZone,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          DBParameterGroupName: this.input.dbParameterGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          StorageType: this.input.storageType,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          PreSignedUrl: this.input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ReplicaMode: this.input.replicaMode,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          SourceRegion: this.input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSCreateDbParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbParameterGroupMessage) {
    super(scope, id);
  }

  public get dbParameterGroup(): RDSCreateDbParameterGroupDbParameterGroup {
    return new RDSCreateDbParameterGroupDbParameterGroup(this, 'DbParameterGroup', this.__resources, this.input);
  }

}

export class RDSCreateDbParameterGroupDbParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbParameterGroupMessage) {
    super(scope, id);
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBParameterGroup.DBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroup.DBParameterGroupName',
        parameters: {
          DBParameterGroupName: this.input.dbParameterGroupName,
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBParameterGroup.DBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBParameterGroup.DBParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBParameterGroup.DBParameterGroupFamily',
        parameters: {
          DBParameterGroupName: this.input.dbParameterGroupName,
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBParameterGroup.DBParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBParameterGroup.DBParameterGroup.Description'),
        outputPath: 'DBParameterGroup.Description',
        parameters: {
          DBParameterGroupName: this.input.dbParameterGroupName,
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBParameterGroup.DBParameterGroup.Description', props);
    return resource.getResponseField('DBParameterGroup.Description') as unknown as string;
  }

  public get dbParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBParameterGroup.DBParameterGroup.DBParameterGroupArn'),
        outputPath: 'DBParameterGroup.DBParameterGroupArn',
        parameters: {
          DBParameterGroupName: this.input.dbParameterGroupName,
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Description: this.input.description,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBParameterGroup.DBParameterGroup.DBParameterGroupArn', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupArn') as unknown as string;
  }

}

export class RDSCreateDbProxy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbProxyRequest) {
    super(scope, id);
  }

  public get dbProxy(): RDSCreateDbProxyDbProxy {
    return new RDSCreateDbProxyDbProxy(this, 'DbProxy', this.__resources, this.input);
  }

}

export class RDSCreateDbProxyDbProxy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbProxyRequest) {
    super(scope, id);
  }

  public get dbProxyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.DBProxyName'),
        outputPath: 'DBProxy.DBProxyName',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.DBProxyName', props);
    return resource.getResponseField('DBProxy.DBProxyName') as unknown as string;
  }

  public get dbProxyArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.DBProxyArn'),
        outputPath: 'DBProxy.DBProxyArn',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.DBProxyArn', props);
    return resource.getResponseField('DBProxy.DBProxyArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.Status'),
        outputPath: 'DBProxy.Status',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.Status', props);
    return resource.getResponseField('DBProxy.Status') as unknown as string;
  }

  public get engineFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.EngineFamily'),
        outputPath: 'DBProxy.EngineFamily',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.EngineFamily', props);
    return resource.getResponseField('DBProxy.EngineFamily') as unknown as string;
  }

  public get vpcSecurityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.VpcSecurityGroupIds'),
        outputPath: 'DBProxy.VpcSecurityGroupIds',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.VpcSecurityGroupIds', props);
    return resource.getResponseField('DBProxy.VpcSecurityGroupIds') as unknown as string[];
  }

  public get vpcSubnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.VpcSubnetIds'),
        outputPath: 'DBProxy.VpcSubnetIds',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.VpcSubnetIds', props);
    return resource.getResponseField('DBProxy.VpcSubnetIds') as unknown as string[];
  }

  public get auth(): shapes.RdsUserAuthConfigInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.Auth'),
        outputPath: 'DBProxy.Auth',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.Auth', props);
    return resource.getResponseField('DBProxy.Auth') as unknown as shapes.RdsUserAuthConfigInfo[];
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.RoleArn'),
        outputPath: 'DBProxy.RoleArn',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.RoleArn', props);
    return resource.getResponseField('DBProxy.RoleArn') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.Endpoint'),
        outputPath: 'DBProxy.Endpoint',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.Endpoint', props);
    return resource.getResponseField('DBProxy.Endpoint') as unknown as string;
  }

  public get requireTls(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.RequireTLS'),
        outputPath: 'DBProxy.RequireTLS',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.RequireTLS', props);
    return resource.getResponseField('DBProxy.RequireTLS') as unknown as boolean;
  }

  public get idleClientTimeout(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.IdleClientTimeout'),
        outputPath: 'DBProxy.IdleClientTimeout',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.IdleClientTimeout', props);
    return resource.getResponseField('DBProxy.IdleClientTimeout') as unknown as number;
  }

  public get debugLogging(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.DebugLogging'),
        outputPath: 'DBProxy.DebugLogging',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.DebugLogging', props);
    return resource.getResponseField('DBProxy.DebugLogging') as unknown as boolean;
  }

  public get createdDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.CreatedDate'),
        outputPath: 'DBProxy.CreatedDate',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.CreatedDate', props);
    return resource.getResponseField('DBProxy.CreatedDate') as unknown as string;
  }

  public get updatedDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.UpdatedDate'),
        outputPath: 'DBProxy.UpdatedDate',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          EngineFamily: this.input.engineFamily,
          Auth: this.input.auth,
          RoleArn: this.input.roleArn,
          VpcSubnetIds: this.input.vpcSubnetIds,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBProxy.DBProxy.UpdatedDate', props);
    return resource.getResponseField('DBProxy.UpdatedDate') as unknown as string;
  }

}

export class RDSCreateDbSecurityGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbSecurityGroupMessage) {
    super(scope, id);
  }

  public get dbSecurityGroup(): RDSCreateDbSecurityGroupDbSecurityGroup {
    return new RDSCreateDbSecurityGroupDbSecurityGroup(this, 'DbSecurityGroup', this.__resources, this.input);
  }

}

export class RDSCreateDbSecurityGroupDbSecurityGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbSecurityGroupMessage) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.OwnerId'),
        outputPath: 'DBSecurityGroup.OwnerId',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.input.dbSecurityGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSecurityGroup.DBSecurityGroup.OwnerId', props);
    return resource.getResponseField('DBSecurityGroup.OwnerId') as unknown as string;
  }

  public get dbSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupName'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupName',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.input.dbSecurityGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupName', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupName') as unknown as string;
  }

  public get dbSecurityGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupDescription'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupDescription',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.input.dbSecurityGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupDescription', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.VpcId'),
        outputPath: 'DBSecurityGroup.VpcId',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.input.dbSecurityGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSecurityGroup.DBSecurityGroup.VpcId', props);
    return resource.getResponseField('DBSecurityGroup.VpcId') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.Rdsec2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.EC2SecurityGroups'),
        outputPath: 'DBSecurityGroup.EC2SecurityGroups',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.input.dbSecurityGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSecurityGroup.DBSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('DBSecurityGroup.EC2SecurityGroups') as unknown as shapes.Rdsec2SecurityGroup[];
  }

  public get ipRanges(): shapes.RdsipRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.IPRanges'),
        outputPath: 'DBSecurityGroup.IPRanges',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.input.dbSecurityGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSecurityGroup.DBSecurityGroup.IPRanges', props);
    return resource.getResponseField('DBSecurityGroup.IPRanges') as unknown as shapes.RdsipRange[];
  }

  public get dbSecurityGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupArn'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupArn',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.input.dbSecurityGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupArn', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupArn') as unknown as string;
  }

}

export class RDSCreateDbSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbSnapshot(): RDSCreateDbSnapshotDbSnapshot {
    return new RDSCreateDbSnapshotDbSnapshot(this, 'DbSnapshot', this.__resources, this.input);
  }

}

export class RDSCreateDbSnapshotDbSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.DBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.DBInstanceIdentifier'),
        outputPath: 'DBSnapshot.DBInstanceIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.DBInstanceIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBInstanceIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.SnapshotCreateTime'),
        outputPath: 'DBSnapshot.SnapshotCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Engine'),
        outputPath: 'DBSnapshot.Engine',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.Engine', props);
    return resource.getResponseField('DBSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.AllocatedStorage'),
        outputPath: 'DBSnapshot.AllocatedStorage',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Status'),
        outputPath: 'DBSnapshot.Status',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.Status', props);
    return resource.getResponseField('DBSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Port'),
        outputPath: 'DBSnapshot.Port',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.Port', props);
    return resource.getResponseField('DBSnapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.AvailabilityZone'),
        outputPath: 'DBSnapshot.AvailabilityZone',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.AvailabilityZone', props);
    return resource.getResponseField('DBSnapshot.AvailabilityZone') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.VpcId'),
        outputPath: 'DBSnapshot.VpcId',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.VpcId', props);
    return resource.getResponseField('DBSnapshot.VpcId') as unknown as string;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.InstanceCreateTime'),
        outputPath: 'DBSnapshot.InstanceCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.InstanceCreateTime', props);
    return resource.getResponseField('DBSnapshot.InstanceCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.MasterUsername'),
        outputPath: 'DBSnapshot.MasterUsername',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.MasterUsername', props);
    return resource.getResponseField('DBSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.EngineVersion'),
        outputPath: 'DBSnapshot.EngineVersion',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.EngineVersion', props);
    return resource.getResponseField('DBSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.LicenseModel'),
        outputPath: 'DBSnapshot.LicenseModel',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.LicenseModel', props);
    return resource.getResponseField('DBSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.SnapshotType'),
        outputPath: 'DBSnapshot.SnapshotType',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.SnapshotType', props);
    return resource.getResponseField('DBSnapshot.SnapshotType') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Iops'),
        outputPath: 'DBSnapshot.Iops',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.Iops', props);
    return resource.getResponseField('DBSnapshot.Iops') as unknown as number;
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.OptionGroupName'),
        outputPath: 'DBSnapshot.OptionGroupName',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.OptionGroupName', props);
    return resource.getResponseField('DBSnapshot.OptionGroupName') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.PercentProgress'),
        outputPath: 'DBSnapshot.PercentProgress',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.PercentProgress', props);
    return resource.getResponseField('DBSnapshot.PercentProgress') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.SourceRegion'),
        outputPath: 'DBSnapshot.SourceRegion',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.SourceRegion', props);
    return resource.getResponseField('DBSnapshot.SourceRegion') as unknown as string;
  }

  public get sourceDbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.SourceDBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.SourceDBSnapshotIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.StorageType'),
        outputPath: 'DBSnapshot.StorageType',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.StorageType', props);
    return resource.getResponseField('DBSnapshot.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.TdeCredentialArn'),
        outputPath: 'DBSnapshot.TdeCredentialArn',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.TdeCredentialArn', props);
    return resource.getResponseField('DBSnapshot.TdeCredentialArn') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Encrypted'),
        outputPath: 'DBSnapshot.Encrypted',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.Encrypted', props);
    return resource.getResponseField('DBSnapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.KmsKeyId'),
        outputPath: 'DBSnapshot.KmsKeyId',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.DBSnapshotArn'),
        outputPath: 'DBSnapshot.DBSnapshotArn',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.DBSnapshotArn', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Timezone'),
        outputPath: 'DBSnapshot.Timezone',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.Timezone', props);
    return resource.getResponseField('DBSnapshot.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.ProcessorFeatures'),
        outputPath: 'DBSnapshot.ProcessorFeatures',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.ProcessorFeatures', props);
    return resource.getResponseField('DBSnapshot.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.DbiResourceId'),
        outputPath: 'DBSnapshot.DbiResourceId',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.DbiResourceId', props);
    return resource.getResponseField('DBSnapshot.DbiResourceId') as unknown as string;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.TagList'),
        outputPath: 'DBSnapshot.TagList',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSnapshot.DBSnapshot.TagList', props);
    return resource.getResponseField('DBSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSCreateDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbSubnetGroupMessage) {
    super(scope, id);
  }

  public get dbSubnetGroup(): RDSCreateDbSubnetGroupDbSubnetGroup {
    return new RDSCreateDbSubnetGroupDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

}

export class RDSCreateDbSubnetGroupDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateDbSubnetGroupMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.VpcId'),
        outputPath: 'DBSubnetGroup.VpcId',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSubnetGroup.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.Subnets'),
        outputPath: 'DBSubnetGroup.Subnets',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSubnetGroup.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSCreateEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateEventSubscriptionMessage) {
    super(scope, id);
  }

  public get eventSubscription(): RDSCreateEventSubscriptionEventSubscription {
    return new RDSCreateEventSubscriptionEventSubscription(this, 'EventSubscription', this.__resources, this.input);
  }

}

export class RDSCreateEventSubscriptionEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateEventSubscriptionMessage) {
    super(scope, id);
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          SourceIds: this.input.sourceIds,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          SourceIds: this.input.sourceIds,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          SourceIds: this.input.sourceIds,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          SourceIds: this.input.sourceIds,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          SourceIds: this.input.sourceIds,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          SourceIds: this.input.sourceIds,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          SourceIds: this.input.sourceIds,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          SourceIds: this.input.sourceIds,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          SourceIds: this.input.sourceIds,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          SourceIds: this.input.sourceIds,
          Enabled: this.input.enabled,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateEventSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class RDSCreateGlobalCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateGlobalClusterMessage) {
    super(scope, id);
  }

  public get globalCluster(): RDSCreateGlobalClusterGlobalCluster {
    return new RDSCreateGlobalClusterGlobalCluster(this, 'GlobalCluster', this.__resources, this.input);
  }

}

export class RDSCreateGlobalClusterGlobalCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateGlobalClusterMessage) {
    super(scope, id);
  }

  public get globalClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.GlobalClusterIdentifier'),
        outputPath: 'GlobalCluster.GlobalClusterIdentifier',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DeletionProtection: this.input.deletionProtection,
          DatabaseName: this.input.databaseName,
          StorageEncrypted: this.input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateGlobalCluster.GlobalCluster.GlobalClusterIdentifier', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterIdentifier') as unknown as string;
  }

  public get globalClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.GlobalClusterResourceId'),
        outputPath: 'GlobalCluster.GlobalClusterResourceId',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DeletionProtection: this.input.deletionProtection,
          DatabaseName: this.input.databaseName,
          StorageEncrypted: this.input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateGlobalCluster.GlobalCluster.GlobalClusterResourceId', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterResourceId') as unknown as string;
  }

  public get globalClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.GlobalClusterArn'),
        outputPath: 'GlobalCluster.GlobalClusterArn',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DeletionProtection: this.input.deletionProtection,
          DatabaseName: this.input.databaseName,
          StorageEncrypted: this.input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateGlobalCluster.GlobalCluster.GlobalClusterArn', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.Status'),
        outputPath: 'GlobalCluster.Status',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DeletionProtection: this.input.deletionProtection,
          DatabaseName: this.input.databaseName,
          StorageEncrypted: this.input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateGlobalCluster.GlobalCluster.Status', props);
    return resource.getResponseField('GlobalCluster.Status') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.Engine'),
        outputPath: 'GlobalCluster.Engine',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DeletionProtection: this.input.deletionProtection,
          DatabaseName: this.input.databaseName,
          StorageEncrypted: this.input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateGlobalCluster.GlobalCluster.Engine', props);
    return resource.getResponseField('GlobalCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.EngineVersion'),
        outputPath: 'GlobalCluster.EngineVersion',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DeletionProtection: this.input.deletionProtection,
          DatabaseName: this.input.databaseName,
          StorageEncrypted: this.input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateGlobalCluster.GlobalCluster.EngineVersion', props);
    return resource.getResponseField('GlobalCluster.EngineVersion') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.DatabaseName'),
        outputPath: 'GlobalCluster.DatabaseName',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DeletionProtection: this.input.deletionProtection,
          DatabaseName: this.input.databaseName,
          StorageEncrypted: this.input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateGlobalCluster.GlobalCluster.DatabaseName', props);
    return resource.getResponseField('GlobalCluster.DatabaseName') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.StorageEncrypted'),
        outputPath: 'GlobalCluster.StorageEncrypted',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DeletionProtection: this.input.deletionProtection,
          DatabaseName: this.input.databaseName,
          StorageEncrypted: this.input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateGlobalCluster.GlobalCluster.StorageEncrypted', props);
    return resource.getResponseField('GlobalCluster.StorageEncrypted') as unknown as boolean;
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.DeletionProtection'),
        outputPath: 'GlobalCluster.DeletionProtection',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DeletionProtection: this.input.deletionProtection,
          DatabaseName: this.input.databaseName,
          StorageEncrypted: this.input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateGlobalCluster.GlobalCluster.DeletionProtection', props);
    return resource.getResponseField('GlobalCluster.DeletionProtection') as unknown as boolean;
  }

  public get globalClusterMembers(): shapes.RdsGlobalClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.GlobalClusterMembers'),
        outputPath: 'GlobalCluster.GlobalClusterMembers',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DeletionProtection: this.input.deletionProtection,
          DatabaseName: this.input.databaseName,
          StorageEncrypted: this.input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateGlobalCluster.GlobalCluster.GlobalClusterMembers', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterMembers') as unknown as shapes.RdsGlobalClusterMember[];
  }

}

export class RDSCreateOptionGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateOptionGroupMessage) {
    super(scope, id);
  }

  public get optionGroup(): RDSCreateOptionGroupOptionGroup {
    return new RDSCreateOptionGroupOptionGroup(this, 'OptionGroup', this.__resources, this.input);
  }

}

export class RDSCreateOptionGroupOptionGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsCreateOptionGroupMessage) {
    super(scope, id);
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.OptionGroupName'),
        outputPath: 'OptionGroup.OptionGroupName',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
          OptionGroupDescription: this.input.optionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOptionGroup.OptionGroup.OptionGroupName', props);
    return resource.getResponseField('OptionGroup.OptionGroupName') as unknown as string;
  }

  public get optionGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.OptionGroupDescription'),
        outputPath: 'OptionGroup.OptionGroupDescription',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
          OptionGroupDescription: this.input.optionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOptionGroup.OptionGroup.OptionGroupDescription', props);
    return resource.getResponseField('OptionGroup.OptionGroupDescription') as unknown as string;
  }

  public get engineName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.EngineName'),
        outputPath: 'OptionGroup.EngineName',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
          OptionGroupDescription: this.input.optionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOptionGroup.OptionGroup.EngineName', props);
    return resource.getResponseField('OptionGroup.EngineName') as unknown as string;
  }

  public get majorEngineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.MajorEngineVersion'),
        outputPath: 'OptionGroup.MajorEngineVersion',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
          OptionGroupDescription: this.input.optionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOptionGroup.OptionGroup.MajorEngineVersion', props);
    return resource.getResponseField('OptionGroup.MajorEngineVersion') as unknown as string;
  }

  public get options(): shapes.RdsOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.Options'),
        outputPath: 'OptionGroup.Options',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
          OptionGroupDescription: this.input.optionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOptionGroup.OptionGroup.Options', props);
    return resource.getResponseField('OptionGroup.Options') as unknown as shapes.RdsOption[];
  }

  public get allowsVpcAndNonVpcInstanceMemberships(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships'),
        outputPath: 'OptionGroup.AllowsVpcAndNonVpcInstanceMemberships',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
          OptionGroupDescription: this.input.optionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships', props);
    return resource.getResponseField('OptionGroup.AllowsVpcAndNonVpcInstanceMemberships') as unknown as boolean;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.VpcId'),
        outputPath: 'OptionGroup.VpcId',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
          OptionGroupDescription: this.input.optionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOptionGroup.OptionGroup.VpcId', props);
    return resource.getResponseField('OptionGroup.VpcId') as unknown as string;
  }

  public get optionGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.OptionGroupArn'),
        outputPath: 'OptionGroup.OptionGroupArn',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
          OptionGroupDescription: this.input.optionGroupDescription,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'CreateOptionGroup.OptionGroup.OptionGroupArn', props);
    return resource.getResponseField('OptionGroup.OptionGroupArn') as unknown as string;
  }

}

export class RDSDeleteCustomAvailabilityZone extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteCustomAvailabilityZoneMessage) {
    super(scope, id);
  }

  public get customAvailabilityZone(): RDSDeleteCustomAvailabilityZoneCustomAvailabilityZone {
    return new RDSDeleteCustomAvailabilityZoneCustomAvailabilityZone(this, 'CustomAvailabilityZone', this.__resources, this.input);
  }

}

export class RDSDeleteCustomAvailabilityZoneCustomAvailabilityZone extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteCustomAvailabilityZoneMessage) {
    super(scope, id);
  }

  public get customAvailabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneId'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneId',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneId', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneId') as unknown as string;
  }

  public get customAvailabilityZoneName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneName'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneName',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneName', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneName') as unknown as string;
  }

  public get customAvailabilityZoneStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneStatus'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneStatus',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneStatus', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneStatus') as unknown as string;
  }

  public get vpnDetails(): RDSDeleteCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails {
    return new RDSDeleteCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails(this, 'VpnDetails', this.__resources, this.input);
  }

}

export class RDSDeleteCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteCustomAvailabilityZoneMessage) {
    super(scope, id);
  }

  public get vpnId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnId'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnId',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnId', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnId') as unknown as string;
  }

  public get vpnTunnelOriginatorIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP') as unknown as string;
  }

  public get vpnGatewayIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnGatewayIp'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnGatewayIp',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnGatewayIp', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnGatewayIp') as unknown as string;
  }

  public get vpnPsk(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnPSK'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnPSK',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnPSK', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnPSK') as unknown as string;
  }

  public get vpnName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnName'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnName',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnName', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnName') as unknown as string;
  }

  public get vpnState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnState'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnState',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnState', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnState') as unknown as string;
  }

}

export class RDSDeleteDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbClusterMessage) {
    super(scope, id);
  }

  public get dbCluster(): RDSDeleteDbClusterDbCluster {
    return new RDSDeleteDbClusterDbCluster(this, 'DbCluster', this.__resources, this.input);
  }

}

export class RDSDeleteDbClusterDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbClusterMessage) {
    super(scope, id);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSDeleteDbClusterDbClusterScalingConfigurationInfo {
    return new RDSDeleteDbClusterDbClusterScalingConfigurationInfo(this, 'ScalingConfigurationInfo', this.__resources, this.input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSDeleteDbClusterDbClusterScalingConfigurationInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbClusterMessage) {
    super(scope, id);
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSDeleteDbClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbClusterEndpointMessage) {
    super(scope, id);
  }

  public get dbClusterEndpointIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.DBClusterEndpointIdentifier'),
        outputPath: 'DBClusterEndpointIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterEndpoint.DBClusterEndpointIdentifier', props);
    return resource.getResponseField('DBClusterEndpointIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterEndpoint.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterEndpointResourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.DBClusterEndpointResourceIdentifier'),
        outputPath: 'DBClusterEndpointResourceIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterEndpoint.DBClusterEndpointResourceIdentifier', props);
    return resource.getResponseField('DBClusterEndpointResourceIdentifier') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.Endpoint'),
        outputPath: 'Endpoint',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterEndpoint.Endpoint', props);
    return resource.getResponseField('Endpoint') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterEndpoint.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get endpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.EndpointType'),
        outputPath: 'EndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterEndpoint.EndpointType', props);
    return resource.getResponseField('EndpointType') as unknown as string;
  }

  public get customEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.CustomEndpointType'),
        outputPath: 'CustomEndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterEndpoint.CustomEndpointType', props);
    return resource.getResponseField('CustomEndpointType') as unknown as string;
  }

  public get staticMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.StaticMembers'),
        outputPath: 'StaticMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterEndpoint.StaticMembers', props);
    return resource.getResponseField('StaticMembers') as unknown as string[];
  }

  public get excludedMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.ExcludedMembers'),
        outputPath: 'ExcludedMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterEndpoint.ExcludedMembers', props);
    return resource.getResponseField('ExcludedMembers') as unknown as string[];
  }

  public get dbClusterEndpointArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.DBClusterEndpointArn'),
        outputPath: 'DBClusterEndpointArn',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterEndpoint.DBClusterEndpointArn', props);
    return resource.getResponseField('DBClusterEndpointArn') as unknown as string;
  }

}

export class RDSDeleteDbClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbClusterSnapshotMessage) {
    super(scope, id);
  }

  public get dbClusterSnapshot(): RDSDeleteDbClusterSnapshotDbClusterSnapshot {
    return new RDSDeleteDbClusterSnapshotDbClusterSnapshot(this, 'DbClusterSnapshot', this.__resources, this.input);
  }

}

export class RDSDeleteDbClusterSnapshotDbClusterSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbClusterSnapshotMessage) {
    super(scope, id);
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones'),
        outputPath: 'DBClusterSnapshot.AvailabilityZones',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones', props);
    return resource.getResponseField('DBClusterSnapshot.AvailabilityZones') as unknown as string[];
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime'),
        outputPath: 'DBClusterSnapshot.SnapshotCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.Engine'),
        outputPath: 'DBClusterSnapshot.Engine',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.Engine', props);
    return resource.getResponseField('DBClusterSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage'),
        outputPath: 'DBClusterSnapshot.AllocatedStorage',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBClusterSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.Status'),
        outputPath: 'DBClusterSnapshot.Status',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.Status', props);
    return resource.getResponseField('DBClusterSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.Port'),
        outputPath: 'DBClusterSnapshot.Port',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.Port', props);
    return resource.getResponseField('DBClusterSnapshot.Port') as unknown as number;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.VpcId'),
        outputPath: 'DBClusterSnapshot.VpcId',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.VpcId', props);
    return resource.getResponseField('DBClusterSnapshot.VpcId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime'),
        outputPath: 'DBClusterSnapshot.ClusterCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.MasterUsername'),
        outputPath: 'DBClusterSnapshot.MasterUsername',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.MasterUsername', props);
    return resource.getResponseField('DBClusterSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.EngineVersion'),
        outputPath: 'DBClusterSnapshot.EngineVersion',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.EngineVersion', props);
    return resource.getResponseField('DBClusterSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.LicenseModel'),
        outputPath: 'DBClusterSnapshot.LicenseModel',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.LicenseModel', props);
    return resource.getResponseField('DBClusterSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotType'),
        outputPath: 'DBClusterSnapshot.SnapshotType',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotType', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotType') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.PercentProgress'),
        outputPath: 'DBClusterSnapshot.PercentProgress',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.PercentProgress', props);
    return resource.getResponseField('DBClusterSnapshot.PercentProgress') as unknown as number;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted'),
        outputPath: 'DBClusterSnapshot.StorageEncrypted',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted', props);
    return resource.getResponseField('DBClusterSnapshot.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.KmsKeyId'),
        outputPath: 'DBClusterSnapshot.KmsKeyId',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBClusterSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotArn') as unknown as string;
  }

  public get sourceDbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.SourceDBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.SourceDBClusterSnapshotArn') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBClusterSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBClusterSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.TagList'),
        outputPath: 'DBClusterSnapshot.TagList',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBClusterSnapshot.DBClusterSnapshot.TagList', props);
    return resource.getResponseField('DBClusterSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSDeleteDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstance(): RDSDeleteDbInstanceDbInstance {
    return new RDSDeleteDbInstanceDbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSDeleteDbInstanceDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSDeleteDbInstanceDbInstanceEndpoint {
    return new RDSDeleteDbInstanceDbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSDeleteDbInstanceDbInstanceDbSubnetGroup {
    return new RDSDeleteDbInstanceDbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSDeleteDbInstanceDbInstancePendingModifiedValues {
    return new RDSDeleteDbInstanceDbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSDeleteDbInstanceDbInstanceListenerEndpoint {
    return new RDSDeleteDbInstanceDbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSDeleteDbInstanceDbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSDeleteDbInstanceDbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbInstanceMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSDeleteDbInstanceDbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSDeleteDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSDeleteDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSDeleteDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbInstanceMessage) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSDeleteDbInstanceDbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSDeleteDbInstanceAutomatedBackup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbInstanceAutomatedBackupMessage) {
    super(scope, id);
  }

  public get dbInstanceAutomatedBackup(): RDSDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackup {
    return new RDSDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackup(this, 'DbInstanceAutomatedBackup', this.__resources, this.input);
  }

}

export class RDSDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbInstanceAutomatedBackupMessage) {
    super(scope, id);
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DBInstanceArn'),
        outputPath: 'DBInstanceAutomatedBackup.DBInstanceArn',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DBInstanceArn', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.DBInstanceArn') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DbiResourceId'),
        outputPath: 'DBInstanceAutomatedBackup.DbiResourceId',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DbiResourceId', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.DbiResourceId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Region'),
        outputPath: 'DBInstanceAutomatedBackup.Region',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Region', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Region') as unknown as string;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DBInstanceIdentifier'),
        outputPath: 'DBInstanceAutomatedBackup.DBInstanceIdentifier',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.DBInstanceIdentifier') as unknown as string;
  }

  public get restoreWindow(): RDSDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackupRestoreWindow {
    return new RDSDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackupRestoreWindow(this, 'RestoreWindow', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.AllocatedStorage'),
        outputPath: 'DBInstanceAutomatedBackup.AllocatedStorage',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.AllocatedStorage', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Status'),
        outputPath: 'DBInstanceAutomatedBackup.Status',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Status', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Port'),
        outputPath: 'DBInstanceAutomatedBackup.Port',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Port', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.AvailabilityZone'),
        outputPath: 'DBInstanceAutomatedBackup.AvailabilityZone',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.AvailabilityZone', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.AvailabilityZone') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.VpcId'),
        outputPath: 'DBInstanceAutomatedBackup.VpcId',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.VpcId', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.VpcId') as unknown as string;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.InstanceCreateTime'),
        outputPath: 'DBInstanceAutomatedBackup.InstanceCreateTime',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.InstanceCreateTime', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.InstanceCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.MasterUsername'),
        outputPath: 'DBInstanceAutomatedBackup.MasterUsername',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.MasterUsername', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.MasterUsername') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Engine'),
        outputPath: 'DBInstanceAutomatedBackup.Engine',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Engine', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.EngineVersion'),
        outputPath: 'DBInstanceAutomatedBackup.EngineVersion',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.EngineVersion', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.LicenseModel'),
        outputPath: 'DBInstanceAutomatedBackup.LicenseModel',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.LicenseModel', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Iops'),
        outputPath: 'DBInstanceAutomatedBackup.Iops',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Iops', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Iops') as unknown as number;
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.OptionGroupName'),
        outputPath: 'DBInstanceAutomatedBackup.OptionGroupName',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.OptionGroupName', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.OptionGroupName') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.TdeCredentialArn'),
        outputPath: 'DBInstanceAutomatedBackup.TdeCredentialArn',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.TdeCredentialArn', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.TdeCredentialArn') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Encrypted'),
        outputPath: 'DBInstanceAutomatedBackup.Encrypted',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Encrypted', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Encrypted') as unknown as boolean;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.StorageType'),
        outputPath: 'DBInstanceAutomatedBackup.StorageType',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.StorageType', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.StorageType') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.KmsKeyId'),
        outputPath: 'DBInstanceAutomatedBackup.KmsKeyId',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.KmsKeyId', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.KmsKeyId') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Timezone'),
        outputPath: 'DBInstanceAutomatedBackup.Timezone',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Timezone', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstanceAutomatedBackup.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

}

export class RDSDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackupRestoreWindow extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbInstanceAutomatedBackupMessage) {
    super(scope, id);
  }

  public get earliestTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.RestoreWindow.EarliestTime'),
        outputPath: 'DBInstanceAutomatedBackup.RestoreWindow.EarliestTime',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.RestoreWindow.EarliestTime', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.RestoreWindow.EarliestTime') as unknown as string;
  }

  public get latestTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.RestoreWindow.LatestTime'),
        outputPath: 'DBInstanceAutomatedBackup.RestoreWindow.LatestTime',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.RestoreWindow.LatestTime', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.RestoreWindow.LatestTime') as unknown as string;
  }

}

export class RDSDeleteDbProxy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbProxyRequest) {
    super(scope, id);
  }

  public get dbProxy(): RDSDeleteDbProxyDbProxy {
    return new RDSDeleteDbProxyDbProxy(this, 'DbProxy', this.__resources, this.input);
  }

}

export class RDSDeleteDbProxyDbProxy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbProxyRequest) {
    super(scope, id);
  }

  public get dbProxyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.DBProxyName'),
        outputPath: 'DBProxy.DBProxyName',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.DBProxyName', props);
    return resource.getResponseField('DBProxy.DBProxyName') as unknown as string;
  }

  public get dbProxyArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.DBProxyArn'),
        outputPath: 'DBProxy.DBProxyArn',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.DBProxyArn', props);
    return resource.getResponseField('DBProxy.DBProxyArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.Status'),
        outputPath: 'DBProxy.Status',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.Status', props);
    return resource.getResponseField('DBProxy.Status') as unknown as string;
  }

  public get engineFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.EngineFamily'),
        outputPath: 'DBProxy.EngineFamily',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.EngineFamily', props);
    return resource.getResponseField('DBProxy.EngineFamily') as unknown as string;
  }

  public get vpcSecurityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.VpcSecurityGroupIds'),
        outputPath: 'DBProxy.VpcSecurityGroupIds',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.VpcSecurityGroupIds', props);
    return resource.getResponseField('DBProxy.VpcSecurityGroupIds') as unknown as string[];
  }

  public get vpcSubnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.VpcSubnetIds'),
        outputPath: 'DBProxy.VpcSubnetIds',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.VpcSubnetIds', props);
    return resource.getResponseField('DBProxy.VpcSubnetIds') as unknown as string[];
  }

  public get auth(): shapes.RdsUserAuthConfigInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.Auth'),
        outputPath: 'DBProxy.Auth',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.Auth', props);
    return resource.getResponseField('DBProxy.Auth') as unknown as shapes.RdsUserAuthConfigInfo[];
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.RoleArn'),
        outputPath: 'DBProxy.RoleArn',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.RoleArn', props);
    return resource.getResponseField('DBProxy.RoleArn') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.Endpoint'),
        outputPath: 'DBProxy.Endpoint',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.Endpoint', props);
    return resource.getResponseField('DBProxy.Endpoint') as unknown as string;
  }

  public get requireTls(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.RequireTLS'),
        outputPath: 'DBProxy.RequireTLS',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.RequireTLS', props);
    return resource.getResponseField('DBProxy.RequireTLS') as unknown as boolean;
  }

  public get idleClientTimeout(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.IdleClientTimeout'),
        outputPath: 'DBProxy.IdleClientTimeout',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.IdleClientTimeout', props);
    return resource.getResponseField('DBProxy.IdleClientTimeout') as unknown as number;
  }

  public get debugLogging(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.DebugLogging'),
        outputPath: 'DBProxy.DebugLogging',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.DebugLogging', props);
    return resource.getResponseField('DBProxy.DebugLogging') as unknown as boolean;
  }

  public get createdDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.CreatedDate'),
        outputPath: 'DBProxy.CreatedDate',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.CreatedDate', props);
    return resource.getResponseField('DBProxy.CreatedDate') as unknown as string;
  }

  public get updatedDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.UpdatedDate'),
        outputPath: 'DBProxy.UpdatedDate',
        parameters: {
          DBProxyName: this.input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBProxy.DBProxy.UpdatedDate', props);
    return resource.getResponseField('DBProxy.UpdatedDate') as unknown as string;
  }

}

export class RDSDeleteDbSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbSnapshot(): RDSDeleteDbSnapshotDbSnapshot {
    return new RDSDeleteDbSnapshotDbSnapshot(this, 'DbSnapshot', this.__resources, this.input);
  }

}

export class RDSDeleteDbSnapshotDbSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.DBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.DBInstanceIdentifier'),
        outputPath: 'DBSnapshot.DBInstanceIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.DBInstanceIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBInstanceIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.SnapshotCreateTime'),
        outputPath: 'DBSnapshot.SnapshotCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Engine'),
        outputPath: 'DBSnapshot.Engine',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.Engine', props);
    return resource.getResponseField('DBSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.AllocatedStorage'),
        outputPath: 'DBSnapshot.AllocatedStorage',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Status'),
        outputPath: 'DBSnapshot.Status',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.Status', props);
    return resource.getResponseField('DBSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Port'),
        outputPath: 'DBSnapshot.Port',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.Port', props);
    return resource.getResponseField('DBSnapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.AvailabilityZone'),
        outputPath: 'DBSnapshot.AvailabilityZone',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.AvailabilityZone', props);
    return resource.getResponseField('DBSnapshot.AvailabilityZone') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.VpcId'),
        outputPath: 'DBSnapshot.VpcId',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.VpcId', props);
    return resource.getResponseField('DBSnapshot.VpcId') as unknown as string;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.InstanceCreateTime'),
        outputPath: 'DBSnapshot.InstanceCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.InstanceCreateTime', props);
    return resource.getResponseField('DBSnapshot.InstanceCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.MasterUsername'),
        outputPath: 'DBSnapshot.MasterUsername',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.MasterUsername', props);
    return resource.getResponseField('DBSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.EngineVersion'),
        outputPath: 'DBSnapshot.EngineVersion',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.EngineVersion', props);
    return resource.getResponseField('DBSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.LicenseModel'),
        outputPath: 'DBSnapshot.LicenseModel',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.LicenseModel', props);
    return resource.getResponseField('DBSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.SnapshotType'),
        outputPath: 'DBSnapshot.SnapshotType',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.SnapshotType', props);
    return resource.getResponseField('DBSnapshot.SnapshotType') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Iops'),
        outputPath: 'DBSnapshot.Iops',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.Iops', props);
    return resource.getResponseField('DBSnapshot.Iops') as unknown as number;
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.OptionGroupName'),
        outputPath: 'DBSnapshot.OptionGroupName',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.OptionGroupName', props);
    return resource.getResponseField('DBSnapshot.OptionGroupName') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.PercentProgress'),
        outputPath: 'DBSnapshot.PercentProgress',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.PercentProgress', props);
    return resource.getResponseField('DBSnapshot.PercentProgress') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.SourceRegion'),
        outputPath: 'DBSnapshot.SourceRegion',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.SourceRegion', props);
    return resource.getResponseField('DBSnapshot.SourceRegion') as unknown as string;
  }

  public get sourceDbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.SourceDBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.SourceDBSnapshotIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.StorageType'),
        outputPath: 'DBSnapshot.StorageType',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.StorageType', props);
    return resource.getResponseField('DBSnapshot.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.TdeCredentialArn'),
        outputPath: 'DBSnapshot.TdeCredentialArn',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.TdeCredentialArn', props);
    return resource.getResponseField('DBSnapshot.TdeCredentialArn') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Encrypted'),
        outputPath: 'DBSnapshot.Encrypted',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.Encrypted', props);
    return resource.getResponseField('DBSnapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.KmsKeyId'),
        outputPath: 'DBSnapshot.KmsKeyId',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.DBSnapshotArn'),
        outputPath: 'DBSnapshot.DBSnapshotArn',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.DBSnapshotArn', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Timezone'),
        outputPath: 'DBSnapshot.Timezone',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.Timezone', props);
    return resource.getResponseField('DBSnapshot.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.ProcessorFeatures'),
        outputPath: 'DBSnapshot.ProcessorFeatures',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.ProcessorFeatures', props);
    return resource.getResponseField('DBSnapshot.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.DbiResourceId'),
        outputPath: 'DBSnapshot.DbiResourceId',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.DbiResourceId', props);
    return resource.getResponseField('DBSnapshot.DbiResourceId') as unknown as string;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.TagList'),
        outputPath: 'DBSnapshot.TagList',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteDBSnapshot.DBSnapshot.TagList', props);
    return resource.getResponseField('DBSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSDeleteEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteEventSubscriptionMessage) {
    super(scope, id);
  }

  public get eventSubscription(): RDSDeleteEventSubscriptionEventSubscription {
    return new RDSDeleteEventSubscriptionEventSubscription(this, 'EventSubscription', this.__resources, this.input);
  }

}

export class RDSDeleteEventSubscriptionEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteEventSubscriptionMessage) {
    super(scope, id);
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteEventSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class RDSDeleteGlobalCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteGlobalClusterMessage) {
    super(scope, id);
  }

  public get globalCluster(): RDSDeleteGlobalClusterGlobalCluster {
    return new RDSDeleteGlobalClusterGlobalCluster(this, 'GlobalCluster', this.__resources, this.input);
  }

}

export class RDSDeleteGlobalClusterGlobalCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteGlobalClusterMessage) {
    super(scope, id);
  }

  public get globalClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.GlobalClusterIdentifier'),
        outputPath: 'GlobalCluster.GlobalClusterIdentifier',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteGlobalCluster.GlobalCluster.GlobalClusterIdentifier', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterIdentifier') as unknown as string;
  }

  public get globalClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.GlobalClusterResourceId'),
        outputPath: 'GlobalCluster.GlobalClusterResourceId',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteGlobalCluster.GlobalCluster.GlobalClusterResourceId', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterResourceId') as unknown as string;
  }

  public get globalClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.GlobalClusterArn'),
        outputPath: 'GlobalCluster.GlobalClusterArn',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteGlobalCluster.GlobalCluster.GlobalClusterArn', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.Status'),
        outputPath: 'GlobalCluster.Status',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteGlobalCluster.GlobalCluster.Status', props);
    return resource.getResponseField('GlobalCluster.Status') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.Engine'),
        outputPath: 'GlobalCluster.Engine',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteGlobalCluster.GlobalCluster.Engine', props);
    return resource.getResponseField('GlobalCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.EngineVersion'),
        outputPath: 'GlobalCluster.EngineVersion',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteGlobalCluster.GlobalCluster.EngineVersion', props);
    return resource.getResponseField('GlobalCluster.EngineVersion') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.DatabaseName'),
        outputPath: 'GlobalCluster.DatabaseName',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteGlobalCluster.GlobalCluster.DatabaseName', props);
    return resource.getResponseField('GlobalCluster.DatabaseName') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.StorageEncrypted'),
        outputPath: 'GlobalCluster.StorageEncrypted',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteGlobalCluster.GlobalCluster.StorageEncrypted', props);
    return resource.getResponseField('GlobalCluster.StorageEncrypted') as unknown as boolean;
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.DeletionProtection'),
        outputPath: 'GlobalCluster.DeletionProtection',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteGlobalCluster.GlobalCluster.DeletionProtection', props);
    return resource.getResponseField('GlobalCluster.DeletionProtection') as unknown as boolean;
  }

  public get globalClusterMembers(): shapes.RdsGlobalClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.GlobalClusterMembers'),
        outputPath: 'GlobalCluster.GlobalClusterMembers',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteGlobalCluster.GlobalCluster.GlobalClusterMembers', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterMembers') as unknown as shapes.RdsGlobalClusterMember[];
  }

}

export class RDSDeleteInstallationMedia extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteInstallationMediaMessage) {
    super(scope, id);
  }

  public get installationMediaId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.InstallationMediaId'),
        outputPath: 'InstallationMediaId',
        parameters: {
          InstallationMediaId: this.input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInstallationMedia.InstallationMediaId', props);
    return resource.getResponseField('InstallationMediaId') as unknown as string;
  }

  public get customAvailabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.CustomAvailabilityZoneId'),
        outputPath: 'CustomAvailabilityZoneId',
        parameters: {
          InstallationMediaId: this.input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInstallationMedia.CustomAvailabilityZoneId', props);
    return resource.getResponseField('CustomAvailabilityZoneId') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.Engine'),
        outputPath: 'Engine',
        parameters: {
          InstallationMediaId: this.input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInstallationMedia.Engine', props);
    return resource.getResponseField('Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.EngineVersion'),
        outputPath: 'EngineVersion',
        parameters: {
          InstallationMediaId: this.input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInstallationMedia.EngineVersion', props);
    return resource.getResponseField('EngineVersion') as unknown as string;
  }

  public get engineInstallationMediaPath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.EngineInstallationMediaPath'),
        outputPath: 'EngineInstallationMediaPath',
        parameters: {
          InstallationMediaId: this.input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInstallationMedia.EngineInstallationMediaPath', props);
    return resource.getResponseField('EngineInstallationMediaPath') as unknown as string;
  }

  public get osInstallationMediaPath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.OSInstallationMediaPath'),
        outputPath: 'OSInstallationMediaPath',
        parameters: {
          InstallationMediaId: this.input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInstallationMedia.OSInstallationMediaPath', props);
    return resource.getResponseField('OSInstallationMediaPath') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.Status'),
        outputPath: 'Status',
        parameters: {
          InstallationMediaId: this.input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInstallationMedia.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get failureCause(): RDSDeleteInstallationMediaFailureCause {
    return new RDSDeleteInstallationMediaFailureCause(this, 'FailureCause', this.__resources, this.input);
  }

}

export class RDSDeleteInstallationMediaFailureCause extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDeleteInstallationMediaMessage) {
    super(scope, id);
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.FailureCause.Message'),
        outputPath: 'FailureCause.Message',
        parameters: {
          InstallationMediaId: this.input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DeleteInstallationMedia.FailureCause.Message', props);
    return resource.getResponseField('FailureCause.Message') as unknown as string;
  }

}

export class RDSDescribeAccountAttributes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public get accountQuotas(): shapes.RdsAccountQuota[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAccountAttributes',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeAccountAttributes.AccountQuotas'),
        outputPath: 'AccountQuotas',
        parameters: {
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeAccountAttributes.AccountQuotas', props);
    return resource.getResponseField('AccountQuotas') as unknown as shapes.RdsAccountQuota[];
  }

}

export class RDSDescribeCertificates extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeCertificatesMessage) {
    super(scope, id);
  }

  public get certificates(): shapes.RdsCertificate[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeCertificates.Certificates'),
        outputPath: 'Certificates',
        parameters: {
          CertificateIdentifier: this.input.certificateIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCertificates.Certificates', props);
    return resource.getResponseField('Certificates') as unknown as shapes.RdsCertificate[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeCertificates.Marker'),
        outputPath: 'Marker',
        parameters: {
          CertificateIdentifier: this.input.certificateIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCertificates.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribeCustomAvailabilityZones extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeCustomAvailabilityZonesMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCustomAvailabilityZones',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeCustomAvailabilityZones.Marker'),
        outputPath: 'Marker',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCustomAvailabilityZones.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get customAvailabilityZones(): shapes.RdsCustomAvailabilityZone[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCustomAvailabilityZones',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeCustomAvailabilityZones.CustomAvailabilityZones'),
        outputPath: 'CustomAvailabilityZones',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeCustomAvailabilityZones.CustomAvailabilityZones', props);
    return resource.getResponseField('CustomAvailabilityZones') as unknown as shapes.RdsCustomAvailabilityZone[];
  }

}

export class RDSDescribeDbClusterBacktracks extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbClusterBacktracksMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterBacktracks',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterBacktracks.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          BacktrackIdentifier: this.input.backtrackIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterBacktracks.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterBacktracks(): shapes.RdsdbClusterBacktrack[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterBacktracks',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterBacktracks.DBClusterBacktracks'),
        outputPath: 'DBClusterBacktracks',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          BacktrackIdentifier: this.input.backtrackIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterBacktracks.DBClusterBacktracks', props);
    return resource.getResponseField('DBClusterBacktracks') as unknown as shapes.RdsdbClusterBacktrack[];
  }

}

export class RDSDescribeDbClusterEndpoints extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbClusterEndpointsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterEndpoints',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterEndpoints.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterEndpoints.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterEndpoints(): shapes.RdsdbClusterEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterEndpoints',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterEndpoints.DBClusterEndpoints'),
        outputPath: 'DBClusterEndpoints',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterEndpoints.DBClusterEndpoints', props);
    return resource.getResponseField('DBClusterEndpoints') as unknown as shapes.RdsdbClusterEndpoint[];
  }

}

export class RDSDescribeDbClusterParameterGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbClusterParameterGroupsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameterGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterParameterGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterParameterGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterParameterGroups(): shapes.RdsdbClusterParameterGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameterGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterParameterGroups.DBClusterParameterGroups'),
        outputPath: 'DBClusterParameterGroups',
        parameters: {
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterParameterGroups.DBClusterParameterGroups', props);
    return resource.getResponseField('DBClusterParameterGroups') as unknown as shapes.RdsdbClusterParameterGroup[];
  }

}

export class RDSDescribeDbClusterParameters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbClusterParametersMessage) {
    super(scope, id);
  }

  public get parameters(): shapes.RdsParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterParameters.Parameters'),
        outputPath: 'Parameters',
        parameters: {
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          Source: this.input.source,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterParameters.Parameters', props);
    return resource.getResponseField('Parameters') as unknown as shapes.RdsParameter[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterParameters.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          Source: this.input.source,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterParameters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribeDbClusterSnapshotAttributes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbClusterSnapshotAttributesMessage) {
    super(scope, id);
  }

  public get dbClusterSnapshotAttributesResult(): RDSDescribeDbClusterSnapshotAttributesDbClusterSnapshotAttributesResult {
    return new RDSDescribeDbClusterSnapshotAttributesDbClusterSnapshotAttributesResult(this, 'DbClusterSnapshotAttributesResult', this.__resources, this.input);
  }

}

export class RDSDescribeDbClusterSnapshotAttributesDbClusterSnapshotAttributesResult extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbClusterSnapshotAttributesMessage) {
    super(scope, id);
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshotAttributes',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterSnapshotAttributes(): shapes.RdsdbClusterSnapshotAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshotAttributes',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes') as unknown as shapes.RdsdbClusterSnapshotAttribute[];
  }

}

export class RDSDescribeDbClusterSnapshots extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbClusterSnapshotsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshots',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterSnapshots.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          SnapshotType: this.input.snapshotType,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          IncludeShared: this.input.includeShared,
          IncludePublic: this.input.includePublic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterSnapshots.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterSnapshots(): shapes.RdsdbClusterSnapshot[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshots',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterSnapshots.DBClusterSnapshots'),
        outputPath: 'DBClusterSnapshots',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          SnapshotType: this.input.snapshotType,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          IncludeShared: this.input.includeShared,
          IncludePublic: this.input.includePublic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusterSnapshots.DBClusterSnapshots', props);
    return resource.getResponseField('DBClusterSnapshots') as unknown as shapes.RdsdbClusterSnapshot[];
  }

}

export class RDSDescribeDbClusters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbClustersMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusters.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          IncludeShared: this.input.includeShared,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusters(): shapes.RdsdbCluster[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusters.DBClusters'),
        outputPath: 'DBClusters',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          IncludeShared: this.input.includeShared,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBClusters.DBClusters', props);
    return resource.getResponseField('DBClusters') as unknown as shapes.RdsdbCluster[];
  }

}

export class RDSDescribeDbEngineVersions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbEngineVersionsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbEngineVersions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBEngineVersions.Marker'),
        outputPath: 'Marker',
        parameters: {
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          DefaultOnly: this.input.defaultOnly,
          ListSupportedCharacterSets: this.input.listSupportedCharacterSets,
          ListSupportedTimezones: this.input.listSupportedTimezones,
          IncludeAll: this.input.includeAll,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBEngineVersions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbEngineVersions(): shapes.RdsdbEngineVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbEngineVersions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBEngineVersions.DBEngineVersions'),
        outputPath: 'DBEngineVersions',
        parameters: {
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          DefaultOnly: this.input.defaultOnly,
          ListSupportedCharacterSets: this.input.listSupportedCharacterSets,
          ListSupportedTimezones: this.input.listSupportedTimezones,
          IncludeAll: this.input.includeAll,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBEngineVersions.DBEngineVersions', props);
    return resource.getResponseField('DBEngineVersions') as unknown as shapes.RdsdbEngineVersion[];
  }

}

export class RDSDescribeDbInstanceAutomatedBackups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbInstanceAutomatedBackupsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbInstanceAutomatedBackups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBInstanceAutomatedBackups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBInstanceAutomatedBackups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbInstanceAutomatedBackups(): shapes.RdsdbInstanceAutomatedBackup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbInstanceAutomatedBackups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBInstanceAutomatedBackups.DBInstanceAutomatedBackups'),
        outputPath: 'DBInstanceAutomatedBackups',
        parameters: {
          DbiResourceId: this.input.dbiResourceId,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBInstanceAutomatedBackups.DBInstanceAutomatedBackups', props);
    return resource.getResponseField('DBInstanceAutomatedBackups') as unknown as shapes.RdsdbInstanceAutomatedBackup[];
  }

}

export class RDSDescribeDbInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbInstancesMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbInstances',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBInstances.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBInstances.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbInstances(): shapes.RdsdbInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbInstances',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBInstances.DBInstances'),
        outputPath: 'DBInstances',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBInstances.DBInstances', props);
    return resource.getResponseField('DBInstances') as unknown as shapes.RdsdbInstance[];
  }

}

export class RDSDescribeDbLogFiles extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbLogFilesMessage) {
    super(scope, id);
  }

  public get describeDbLogFiles(): shapes.RdsDescribeDbLogFilesDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbLogFiles',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBLogFiles.DescribeDBLogFiles'),
        outputPath: 'DescribeDBLogFiles',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          FilenameContains: this.input.filenameContains,
          FileLastWritten: this.input.fileLastWritten,
          FileSize: this.input.fileSize,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBLogFiles.DescribeDBLogFiles', props);
    return resource.getResponseField('DescribeDBLogFiles') as unknown as shapes.RdsDescribeDbLogFilesDetails[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbLogFiles',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBLogFiles.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          FilenameContains: this.input.filenameContains,
          FileLastWritten: this.input.fileLastWritten,
          FileSize: this.input.fileSize,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBLogFiles.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribeDbParameterGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbParameterGroupsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameterGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBParameterGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBParameterGroupName: this.input.dbParameterGroupName,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBParameterGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameterGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBParameterGroups.DBParameterGroups'),
        outputPath: 'DBParameterGroups',
        parameters: {
          DBParameterGroupName: this.input.dbParameterGroupName,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBParameterGroups.DBParameterGroups', props);
    return resource.getResponseField('DBParameterGroups') as unknown as shapes.RdsdbParameterGroup[];
  }

}

export class RDSDescribeDbParameters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbParametersMessage) {
    super(scope, id);
  }

  public get parameters(): shapes.RdsParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBParameters.Parameters'),
        outputPath: 'Parameters',
        parameters: {
          DBParameterGroupName: this.input.dbParameterGroupName,
          Source: this.input.source,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBParameters.Parameters', props);
    return resource.getResponseField('Parameters') as unknown as shapes.RdsParameter[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBParameters.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBParameterGroupName: this.input.dbParameterGroupName,
          Source: this.input.source,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBParameters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribeDbProxies extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbProxiesRequest) {
    super(scope, id);
  }

  public get dbProxies(): shapes.RdsdbProxy[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxies',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxies.DBProxies'),
        outputPath: 'DBProxies',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBProxies.DBProxies', props);
    return resource.getResponseField('DBProxies') as unknown as shapes.RdsdbProxy[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxies',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxies.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBProxies.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribeDbProxyTargetGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbProxyTargetGroupsRequest) {
    super(scope, id);
  }

  public get targetGroups(): shapes.RdsdbProxyTargetGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxyTargetGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxyTargetGroups.TargetGroups'),
        outputPath: 'TargetGroups',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          TargetGroupName: this.input.targetGroupName,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBProxyTargetGroups.TargetGroups', props);
    return resource.getResponseField('TargetGroups') as unknown as shapes.RdsdbProxyTargetGroup[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxyTargetGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxyTargetGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          TargetGroupName: this.input.targetGroupName,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBProxyTargetGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribeDbProxyTargets extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbProxyTargetsRequest) {
    super(scope, id);
  }

  public get targets(): shapes.RdsdbProxyTarget[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxyTargets',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxyTargets.Targets'),
        outputPath: 'Targets',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          TargetGroupName: this.input.targetGroupName,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBProxyTargets.Targets', props);
    return resource.getResponseField('Targets') as unknown as shapes.RdsdbProxyTarget[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxyTargets',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxyTargets.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          TargetGroupName: this.input.targetGroupName,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBProxyTargets.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribeDbSecurityGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbSecurityGroupsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSecurityGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSecurityGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBSecurityGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSecurityGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSecurityGroups.DBSecurityGroups'),
        outputPath: 'DBSecurityGroups',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBSecurityGroups.DBSecurityGroups', props);
    return resource.getResponseField('DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroup[];
  }

}

export class RDSDescribeDbSnapshotAttributes extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbSnapshotAttributesMessage) {
    super(scope, id);
  }

  public get dbSnapshotAttributesResult(): RDSDescribeDbSnapshotAttributesDbSnapshotAttributesResult {
    return new RDSDescribeDbSnapshotAttributesDbSnapshotAttributesResult(this, 'DbSnapshotAttributesResult', this.__resources, this.input);
  }

}

export class RDSDescribeDbSnapshotAttributesDbSnapshotAttributesResult extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbSnapshotAttributesMessage) {
    super(scope, id);
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSnapshotAttributes',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSnapshotAttributes.DBSnapshotAttributesResult.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshotAttributesResult.DBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBSnapshotAttributes.DBSnapshotAttributesResult.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshotAttributesResult.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbSnapshotAttributes(): shapes.RdsdbSnapshotAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSnapshotAttributes',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSnapshotAttributes.DBSnapshotAttributesResult.DBSnapshotAttributes'),
        outputPath: 'DBSnapshotAttributesResult.DBSnapshotAttributes',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBSnapshotAttributes.DBSnapshotAttributesResult.DBSnapshotAttributes', props);
    return resource.getResponseField('DBSnapshotAttributesResult.DBSnapshotAttributes') as unknown as shapes.RdsdbSnapshotAttribute[];
  }

}

export class RDSDescribeDbSnapshots extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbSnapshotsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSnapshots',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSnapshots.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          SnapshotType: this.input.snapshotType,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          IncludeShared: this.input.includeShared,
          IncludePublic: this.input.includePublic,
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBSnapshots.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbSnapshots(): shapes.RdsdbSnapshot[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSnapshots',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSnapshots.DBSnapshots'),
        outputPath: 'DBSnapshots',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          SnapshotType: this.input.snapshotType,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          IncludeShared: this.input.includeShared,
          IncludePublic: this.input.includePublic,
          DbiResourceId: this.input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBSnapshots.DBSnapshots', props);
    return resource.getResponseField('DBSnapshots') as unknown as shapes.RdsdbSnapshot[];
  }

}

export class RDSDescribeDbSubnetGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeDbSubnetGroupsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSubnetGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSubnetGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBSubnetGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbSubnetGroups(): shapes.RdsdbSubnetGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSubnetGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSubnetGroups.DBSubnetGroups'),
        outputPath: 'DBSubnetGroups',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeDBSubnetGroups.DBSubnetGroups', props);
    return resource.getResponseField('DBSubnetGroups') as unknown as shapes.RdsdbSubnetGroup[];
  }

}

export class RDSDescribeEngineDefaultClusterParameters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeEngineDefaultClusterParametersMessage) {
    super(scope, id);
  }

  public get engineDefaults(): RDSDescribeEngineDefaultClusterParametersEngineDefaults {
    return new RDSDescribeEngineDefaultClusterParametersEngineDefaults(this, 'EngineDefaults', this.__resources, this.input);
  }

}

export class RDSDescribeEngineDefaultClusterParametersEngineDefaults extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeEngineDefaultClusterParametersMessage) {
    super(scope, id);
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultClusterParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultClusterParameters.EngineDefaults.DBParameterGroupFamily'),
        outputPath: 'EngineDefaults.DBParameterGroupFamily',
        parameters: {
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEngineDefaultClusterParameters.EngineDefaults.DBParameterGroupFamily', props);
    return resource.getResponseField('EngineDefaults.DBParameterGroupFamily') as unknown as string;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultClusterParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultClusterParameters.EngineDefaults.Marker'),
        outputPath: 'EngineDefaults.Marker',
        parameters: {
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEngineDefaultClusterParameters.EngineDefaults.Marker', props);
    return resource.getResponseField('EngineDefaults.Marker') as unknown as string;
  }

  public get parameters(): shapes.RdsParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultClusterParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultClusterParameters.EngineDefaults.Parameters'),
        outputPath: 'EngineDefaults.Parameters',
        parameters: {
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEngineDefaultClusterParameters.EngineDefaults.Parameters', props);
    return resource.getResponseField('EngineDefaults.Parameters') as unknown as shapes.RdsParameter[];
  }

}

export class RDSDescribeEngineDefaultParameters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeEngineDefaultParametersMessage) {
    super(scope, id);
  }

  public get engineDefaults(): RDSDescribeEngineDefaultParametersEngineDefaults {
    return new RDSDescribeEngineDefaultParametersEngineDefaults(this, 'EngineDefaults', this.__resources, this.input);
  }

}

export class RDSDescribeEngineDefaultParametersEngineDefaults extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeEngineDefaultParametersMessage) {
    super(scope, id);
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultParameters.EngineDefaults.DBParameterGroupFamily'),
        outputPath: 'EngineDefaults.DBParameterGroupFamily',
        parameters: {
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEngineDefaultParameters.EngineDefaults.DBParameterGroupFamily', props);
    return resource.getResponseField('EngineDefaults.DBParameterGroupFamily') as unknown as string;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultParameters.EngineDefaults.Marker'),
        outputPath: 'EngineDefaults.Marker',
        parameters: {
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEngineDefaultParameters.EngineDefaults.Marker', props);
    return resource.getResponseField('EngineDefaults.Marker') as unknown as string;
  }

  public get parameters(): shapes.RdsParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultParameters.EngineDefaults.Parameters'),
        outputPath: 'EngineDefaults.Parameters',
        parameters: {
          DBParameterGroupFamily: this.input.dbParameterGroupFamily,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEngineDefaultParameters.EngineDefaults.Parameters', props);
    return resource.getResponseField('EngineDefaults.Parameters') as unknown as shapes.RdsParameter[];
  }

}

export class RDSDescribeEventCategories extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeEventCategoriesMessage) {
    super(scope, id);
  }

  public get eventCategoriesMapList(): shapes.RdsEventCategoriesMap[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventCategories',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEventCategories.EventCategoriesMapList'),
        outputPath: 'EventCategoriesMapList',
        parameters: {
          SourceType: this.input.sourceType,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEventCategories.EventCategoriesMapList', props);
    return resource.getResponseField('EventCategoriesMapList') as unknown as shapes.RdsEventCategoriesMap[];
  }

}

export class RDSDescribeEventSubscriptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeEventSubscriptionsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventSubscriptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEventSubscriptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEventSubscriptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get eventSubscriptionsList(): shapes.RdsEventSubscription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventSubscriptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEventSubscriptions.EventSubscriptionsList'),
        outputPath: 'EventSubscriptionsList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEventSubscriptions.EventSubscriptionsList', props);
    return resource.getResponseField('EventSubscriptionsList') as unknown as shapes.RdsEventSubscription[];
  }

}

export class RDSDescribeEvents extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeEventsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEvents',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEvents.Marker'),
        outputPath: 'Marker',
        parameters: {
          SourceIdentifier: this.input.sourceIdentifier,
          SourceType: this.input.sourceType,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Duration: this.input.duration,
          EventCategories: this.input.eventCategories,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEvents.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get events(): shapes.RdsEvent[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEvents',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEvents.Events'),
        outputPath: 'Events',
        parameters: {
          SourceIdentifier: this.input.sourceIdentifier,
          SourceType: this.input.sourceType,
          StartTime: this.input.startTime,
          EndTime: this.input.endTime,
          Duration: this.input.duration,
          EventCategories: this.input.eventCategories,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeEvents.Events', props);
    return resource.getResponseField('Events') as unknown as shapes.RdsEvent[];
  }

}

export class RDSDescribeExportTasks extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeExportTasksMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeExportTasks',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeExportTasks.Marker'),
        outputPath: 'Marker',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeExportTasks.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get exportTasks(): shapes.RdsExportTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeExportTasks',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeExportTasks.ExportTasks'),
        outputPath: 'ExportTasks',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeExportTasks.ExportTasks', props);
    return resource.getResponseField('ExportTasks') as unknown as shapes.RdsExportTask[];
  }

}

export class RDSDescribeGlobalClusters extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeGlobalClustersMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeGlobalClusters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeGlobalClusters.Marker'),
        outputPath: 'Marker',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeGlobalClusters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get globalClusters(): shapes.RdsGlobalCluster[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeGlobalClusters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeGlobalClusters.GlobalClusters'),
        outputPath: 'GlobalClusters',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeGlobalClusters.GlobalClusters', props);
    return resource.getResponseField('GlobalClusters') as unknown as shapes.RdsGlobalCluster[];
  }

}

export class RDSDescribeInstallationMedia extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeInstallationMediaMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeInstallationMedia.Marker'),
        outputPath: 'Marker',
        parameters: {
          InstallationMediaId: this.input.installationMediaId,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstallationMedia.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get installationMedia(): shapes.RdsInstallationMedia[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeInstallationMedia.InstallationMedia'),
        outputPath: 'InstallationMedia',
        parameters: {
          InstallationMediaId: this.input.installationMediaId,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeInstallationMedia.InstallationMedia', props);
    return resource.getResponseField('InstallationMedia') as unknown as shapes.RdsInstallationMedia[];
  }

}

export class RDSDescribeOptionGroupOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeOptionGroupOptionsMessage) {
    super(scope, id);
  }

  public get optionGroupOptions(): shapes.RdsOptionGroupOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOptionGroupOptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOptionGroupOptions.OptionGroupOptions'),
        outputPath: 'OptionGroupOptions',
        parameters: {
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOptionGroupOptions.OptionGroupOptions', props);
    return resource.getResponseField('OptionGroupOptions') as unknown as shapes.RdsOptionGroupOption[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOptionGroupOptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOptionGroupOptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOptionGroupOptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribeOptionGroups extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeOptionGroupsMessage) {
    super(scope, id);
  }

  public get optionGroupsList(): shapes.RdsOptionGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOptionGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOptionGroups.OptionGroupsList'),
        outputPath: 'OptionGroupsList',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOptionGroups.OptionGroupsList', props);
    return resource.getResponseField('OptionGroupsList') as unknown as shapes.RdsOptionGroup[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOptionGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOptionGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
          EngineName: this.input.engineName,
          MajorEngineVersion: this.input.majorEngineVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOptionGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribeOrderableDbInstanceOptions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeOrderableDbInstanceOptionsMessage) {
    super(scope, id);
  }

  public get orderableDbInstanceOptions(): shapes.RdsOrderableDbInstanceOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOrderableDbInstanceOptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOrderableDBInstanceOptions.OrderableDBInstanceOptions'),
        outputPath: 'OrderableDBInstanceOptions',
        parameters: {
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DBInstanceClass: this.input.dbInstanceClass,
          LicenseModel: this.input.licenseModel,
          AvailabilityZoneGroup: this.input.availabilityZoneGroup,
          Vpc: this.input.vpc,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOrderableDBInstanceOptions.OrderableDBInstanceOptions', props);
    return resource.getResponseField('OrderableDBInstanceOptions') as unknown as shapes.RdsOrderableDbInstanceOption[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOrderableDbInstanceOptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOrderableDBInstanceOptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          DBInstanceClass: this.input.dbInstanceClass,
          LicenseModel: this.input.licenseModel,
          AvailabilityZoneGroup: this.input.availabilityZoneGroup,
          Vpc: this.input.vpc,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeOrderableDBInstanceOptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribePendingMaintenanceActions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribePendingMaintenanceActionsMessage) {
    super(scope, id);
  }

  public get pendingMaintenanceActions(): shapes.RdsResourcePendingMaintenanceActions[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePendingMaintenanceActions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribePendingMaintenanceActions.PendingMaintenanceActions'),
        outputPath: 'PendingMaintenanceActions',
        parameters: {
          ResourceIdentifier: this.input.resourceIdentifier,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePendingMaintenanceActions.PendingMaintenanceActions', props);
    return resource.getResponseField('PendingMaintenanceActions') as unknown as shapes.RdsResourcePendingMaintenanceActions[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePendingMaintenanceActions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribePendingMaintenanceActions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ResourceIdentifier: this.input.resourceIdentifier,
          Filters: this.input.filters,
          Marker: this.input.marker,
          MaxRecords: this.input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribePendingMaintenanceActions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSDescribeReservedDbInstances extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeReservedDbInstancesMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedDbInstances',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeReservedDBInstances.Marker'),
        outputPath: 'Marker',
        parameters: {
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          DBInstanceClass: this.input.dbInstanceClass,
          Duration: this.input.duration,
          ProductDescription: this.input.productDescription,
          OfferingType: this.input.offeringType,
          MultiAZ: this.input.multiAz,
          LeaseId: this.input.leaseId,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedDBInstances.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get reservedDbInstances(): shapes.RdsReservedDbInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedDbInstances',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeReservedDBInstances.ReservedDBInstances'),
        outputPath: 'ReservedDBInstances',
        parameters: {
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          DBInstanceClass: this.input.dbInstanceClass,
          Duration: this.input.duration,
          ProductDescription: this.input.productDescription,
          OfferingType: this.input.offeringType,
          MultiAZ: this.input.multiAz,
          LeaseId: this.input.leaseId,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedDBInstances.ReservedDBInstances', props);
    return resource.getResponseField('ReservedDBInstances') as unknown as shapes.RdsReservedDbInstance[];
  }

}

export class RDSDescribeReservedDbInstancesOfferings extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeReservedDbInstancesOfferingsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedDbInstancesOfferings',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeReservedDBInstancesOfferings.Marker'),
        outputPath: 'Marker',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          DBInstanceClass: this.input.dbInstanceClass,
          Duration: this.input.duration,
          ProductDescription: this.input.productDescription,
          OfferingType: this.input.offeringType,
          MultiAZ: this.input.multiAz,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedDBInstancesOfferings.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get reservedDbInstancesOfferings(): shapes.RdsReservedDbInstancesOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedDbInstancesOfferings',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeReservedDBInstancesOfferings.ReservedDBInstancesOfferings'),
        outputPath: 'ReservedDBInstancesOfferings',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          DBInstanceClass: this.input.dbInstanceClass,
          Duration: this.input.duration,
          ProductDescription: this.input.productDescription,
          OfferingType: this.input.offeringType,
          MultiAZ: this.input.multiAz,
          Filters: this.input.filters,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeReservedDBInstancesOfferings.ReservedDBInstancesOfferings', props);
    return resource.getResponseField('ReservedDBInstancesOfferings') as unknown as shapes.RdsReservedDbInstancesOffering[];
  }

}

export class RDSDescribeSourceRegions extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeSourceRegionsMessage) {
    super(scope, id);
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSourceRegions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeSourceRegions.Marker'),
        outputPath: 'Marker',
        parameters: {
          RegionName: this.input.regionName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSourceRegions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get sourceRegions(): shapes.RdsSourceRegion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSourceRegions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeSourceRegions.SourceRegions'),
        outputPath: 'SourceRegions',
        parameters: {
          RegionName: this.input.regionName,
          MaxRecords: this.input.maxRecords,
          Marker: this.input.marker,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeSourceRegions.SourceRegions', props);
    return resource.getResponseField('SourceRegions') as unknown as shapes.RdsSourceRegion[];
  }

}

export class RDSDescribeValidDbInstanceModifications extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeValidDbInstanceModificationsMessage) {
    super(scope, id);
  }

  public get validDbInstanceModificationsMessage(): RDSDescribeValidDbInstanceModificationsValidDbInstanceModificationsMessage {
    return new RDSDescribeValidDbInstanceModificationsValidDbInstanceModificationsMessage(this, 'ValidDbInstanceModificationsMessage', this.__resources, this.input);
  }

}

export class RDSDescribeValidDbInstanceModificationsValidDbInstanceModificationsMessage extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDescribeValidDbInstanceModificationsMessage) {
    super(scope, id);
  }

  public get storage(): shapes.RdsValidStorageOptions[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeValidDbInstanceModifications',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeValidDBInstanceModifications.ValidDBInstanceModificationsMessage.Storage'),
        outputPath: 'ValidDBInstanceModificationsMessage.Storage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeValidDBInstanceModifications.ValidDBInstanceModificationsMessage.Storage', props);
    return resource.getResponseField('ValidDBInstanceModificationsMessage.Storage') as unknown as shapes.RdsValidStorageOptions[];
  }

  public get validProcessorFeatures(): shapes.RdsAvailableProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeValidDbInstanceModifications',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeValidDBInstanceModifications.ValidDBInstanceModificationsMessage.ValidProcessorFeatures'),
        outputPath: 'ValidDBInstanceModificationsMessage.ValidProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DescribeValidDBInstanceModifications.ValidDBInstanceModificationsMessage.ValidProcessorFeatures', props);
    return resource.getResponseField('ValidDBInstanceModificationsMessage.ValidProcessorFeatures') as unknown as shapes.RdsAvailableProcessorFeature[];
  }

}

export class RDSDownloadDbLogFilePortion extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsDownloadDbLogFilePortionMessage) {
    super(scope, id);
  }

  public get logFileData(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'downloadDbLogFilePortion',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DownloadDBLogFilePortion.LogFileData'),
        outputPath: 'LogFileData',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          LogFileName: this.input.logFileName,
          Marker: this.input.marker,
          NumberOfLines: this.input.numberOfLines,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DownloadDBLogFilePortion.LogFileData', props);
    return resource.getResponseField('LogFileData') as unknown as string;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'downloadDbLogFilePortion',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DownloadDBLogFilePortion.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          LogFileName: this.input.logFileName,
          Marker: this.input.marker,
          NumberOfLines: this.input.numberOfLines,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DownloadDBLogFilePortion.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get additionalDataPending(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'downloadDbLogFilePortion',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DownloadDBLogFilePortion.AdditionalDataPending'),
        outputPath: 'AdditionalDataPending',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          LogFileName: this.input.logFileName,
          Marker: this.input.marker,
          NumberOfLines: this.input.numberOfLines,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'DownloadDBLogFilePortion.AdditionalDataPending', props);
    return resource.getResponseField('AdditionalDataPending') as unknown as boolean;
  }

}

export class RDSFailoverDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsFailoverDbClusterMessage) {
    super(scope, id);
  }

  public get dbCluster(): RDSFailoverDbClusterDbCluster {
    return new RDSFailoverDbClusterDbCluster(this, 'DbCluster', this.__resources, this.input);
  }

}

export class RDSFailoverDbClusterDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsFailoverDbClusterMessage) {
    super(scope, id);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSFailoverDbClusterDbClusterScalingConfigurationInfo {
    return new RDSFailoverDbClusterDbClusterScalingConfigurationInfo(this, 'ScalingConfigurationInfo', this.__resources, this.input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSFailoverDbClusterDbClusterScalingConfigurationInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsFailoverDbClusterMessage) {
    super(scope, id);
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'FailoverDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSImportInstallationMedia extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsImportInstallationMediaMessage) {
    super(scope, id);
  }

  public get installationMediaId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.InstallationMediaId'),
        outputPath: 'InstallationMediaId',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          EngineInstallationMediaPath: this.input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstallationMedia.InstallationMediaId', props);
    return resource.getResponseField('InstallationMediaId') as unknown as string;
  }

  public get customAvailabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.CustomAvailabilityZoneId'),
        outputPath: 'CustomAvailabilityZoneId',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          EngineInstallationMediaPath: this.input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstallationMedia.CustomAvailabilityZoneId', props);
    return resource.getResponseField('CustomAvailabilityZoneId') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.Engine'),
        outputPath: 'Engine',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          EngineInstallationMediaPath: this.input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstallationMedia.Engine', props);
    return resource.getResponseField('Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.EngineVersion'),
        outputPath: 'EngineVersion',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          EngineInstallationMediaPath: this.input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstallationMedia.EngineVersion', props);
    return resource.getResponseField('EngineVersion') as unknown as string;
  }

  public get engineInstallationMediaPath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.EngineInstallationMediaPath'),
        outputPath: 'EngineInstallationMediaPath',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          EngineInstallationMediaPath: this.input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstallationMedia.EngineInstallationMediaPath', props);
    return resource.getResponseField('EngineInstallationMediaPath') as unknown as string;
  }

  public get osInstallationMediaPath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.OSInstallationMediaPath'),
        outputPath: 'OSInstallationMediaPath',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          EngineInstallationMediaPath: this.input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstallationMedia.OSInstallationMediaPath', props);
    return resource.getResponseField('OSInstallationMediaPath') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.Status'),
        outputPath: 'Status',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          EngineInstallationMediaPath: this.input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstallationMedia.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get failureCause(): RDSImportInstallationMediaFailureCause {
    return new RDSImportInstallationMediaFailureCause(this, 'FailureCause', this.__resources, this.input);
  }

}

export class RDSImportInstallationMediaFailureCause extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsImportInstallationMediaMessage) {
    super(scope, id);
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.FailureCause.Message'),
        outputPath: 'FailureCause.Message',
        parameters: {
          CustomAvailabilityZoneId: this.input.customAvailabilityZoneId,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          EngineInstallationMediaPath: this.input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ImportInstallationMedia.FailureCause.Message', props);
    return resource.getResponseField('FailureCause.Message') as unknown as string;
  }

}

export class RDSListTagsForResource extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsListTagsForResourceMessage) {
    super(scope, id);
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listTagsForResource',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ListTagsForResource.TagList'),
        outputPath: 'TagList',
        parameters: {
          ResourceName: this.input.resourceName,
          Filters: this.input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ListTagsForResource.TagList', props);
    return resource.getResponseField('TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSModifyCertificates extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyCertificatesMessage) {
    super(scope, id);
  }

  public get certificate(): RDSModifyCertificatesCertificate {
    return new RDSModifyCertificatesCertificate(this, 'Certificate', this.__resources, this.input);
  }

}

export class RDSModifyCertificatesCertificate extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyCertificatesMessage) {
    super(scope, id);
  }

  public get certificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.CertificateIdentifier'),
        outputPath: 'Certificate.CertificateIdentifier',
        parameters: {
          CertificateIdentifier: this.input.certificateIdentifier,
          RemoveCustomerOverride: this.input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCertificates.Certificate.CertificateIdentifier', props);
    return resource.getResponseField('Certificate.CertificateIdentifier') as unknown as string;
  }

  public get certificateType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.CertificateType'),
        outputPath: 'Certificate.CertificateType',
        parameters: {
          CertificateIdentifier: this.input.certificateIdentifier,
          RemoveCustomerOverride: this.input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCertificates.Certificate.CertificateType', props);
    return resource.getResponseField('Certificate.CertificateType') as unknown as string;
  }

  public get thumbprint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.Thumbprint'),
        outputPath: 'Certificate.Thumbprint',
        parameters: {
          CertificateIdentifier: this.input.certificateIdentifier,
          RemoveCustomerOverride: this.input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCertificates.Certificate.Thumbprint', props);
    return resource.getResponseField('Certificate.Thumbprint') as unknown as string;
  }

  public get validFrom(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.ValidFrom'),
        outputPath: 'Certificate.ValidFrom',
        parameters: {
          CertificateIdentifier: this.input.certificateIdentifier,
          RemoveCustomerOverride: this.input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCertificates.Certificate.ValidFrom', props);
    return resource.getResponseField('Certificate.ValidFrom') as unknown as string;
  }

  public get validTill(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.ValidTill'),
        outputPath: 'Certificate.ValidTill',
        parameters: {
          CertificateIdentifier: this.input.certificateIdentifier,
          RemoveCustomerOverride: this.input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCertificates.Certificate.ValidTill', props);
    return resource.getResponseField('Certificate.ValidTill') as unknown as string;
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.CertificateArn'),
        outputPath: 'Certificate.CertificateArn',
        parameters: {
          CertificateIdentifier: this.input.certificateIdentifier,
          RemoveCustomerOverride: this.input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCertificates.Certificate.CertificateArn', props);
    return resource.getResponseField('Certificate.CertificateArn') as unknown as string;
  }

  public get customerOverride(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.CustomerOverride'),
        outputPath: 'Certificate.CustomerOverride',
        parameters: {
          CertificateIdentifier: this.input.certificateIdentifier,
          RemoveCustomerOverride: this.input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCertificates.Certificate.CustomerOverride', props);
    return resource.getResponseField('Certificate.CustomerOverride') as unknown as boolean;
  }

  public get customerOverrideValidTill(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.CustomerOverrideValidTill'),
        outputPath: 'Certificate.CustomerOverrideValidTill',
        parameters: {
          CertificateIdentifier: this.input.certificateIdentifier,
          RemoveCustomerOverride: this.input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCertificates.Certificate.CustomerOverrideValidTill', props);
    return resource.getResponseField('Certificate.CustomerOverrideValidTill') as unknown as string;
  }

}

export class RDSModifyCurrentDbClusterCapacity extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyCurrentDbClusterCapacityMessage) {
    super(scope, id);
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCurrentDbClusterCapacity',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCurrentDBClusterCapacity.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Capacity: this.input.capacity,
          SecondsBeforeTimeout: this.input.secondsBeforeTimeout,
          TimeoutAction: this.input.timeoutAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCurrentDBClusterCapacity.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get pendingCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCurrentDbClusterCapacity',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCurrentDBClusterCapacity.PendingCapacity'),
        outputPath: 'PendingCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Capacity: this.input.capacity,
          SecondsBeforeTimeout: this.input.secondsBeforeTimeout,
          TimeoutAction: this.input.timeoutAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCurrentDBClusterCapacity.PendingCapacity', props);
    return resource.getResponseField('PendingCapacity') as unknown as number;
  }

  public get currentCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCurrentDbClusterCapacity',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCurrentDBClusterCapacity.CurrentCapacity'),
        outputPath: 'CurrentCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Capacity: this.input.capacity,
          SecondsBeforeTimeout: this.input.secondsBeforeTimeout,
          TimeoutAction: this.input.timeoutAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCurrentDBClusterCapacity.CurrentCapacity', props);
    return resource.getResponseField('CurrentCapacity') as unknown as number;
  }

  public get secondsBeforeTimeout(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCurrentDbClusterCapacity',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCurrentDBClusterCapacity.SecondsBeforeTimeout'),
        outputPath: 'SecondsBeforeTimeout',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Capacity: this.input.capacity,
          SecondsBeforeTimeout: this.input.secondsBeforeTimeout,
          TimeoutAction: this.input.timeoutAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCurrentDBClusterCapacity.SecondsBeforeTimeout', props);
    return resource.getResponseField('SecondsBeforeTimeout') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCurrentDbClusterCapacity',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCurrentDBClusterCapacity.TimeoutAction'),
        outputPath: 'TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          Capacity: this.input.capacity,
          SecondsBeforeTimeout: this.input.secondsBeforeTimeout,
          TimeoutAction: this.input.timeoutAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyCurrentDBClusterCapacity.TimeoutAction', props);
    return resource.getResponseField('TimeoutAction') as unknown as string;
  }

}

export class RDSModifyDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbClusterMessage) {
    super(scope, id);
  }

  public get dbCluster(): RDSModifyDbClusterDbCluster {
    return new RDSModifyDbClusterDbCluster(this, 'DbCluster', this.__resources, this.input);
  }

}

export class RDSModifyDbClusterDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbClusterMessage) {
    super(scope, id);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSModifyDbClusterDbClusterScalingConfigurationInfo {
    return new RDSModifyDbClusterDbClusterScalingConfigurationInfo(this, 'ScalingConfigurationInfo', this.__resources, this.input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSModifyDbClusterDbClusterScalingConfigurationInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbClusterMessage) {
    super(scope, id);
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.input.newDbClusterIdentifier,
          ApplyImmediately: this.input.applyImmediately,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Port: this.input.port,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.input.dbInstanceParameterGroupName,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.input.deletionProtection,
          EnableHttpEndpoint: this.input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSModifyDbClusterEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbClusterEndpointMessage) {
    super(scope, id);
  }

  public get dbClusterEndpointIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.DBClusterEndpointIdentifier'),
        outputPath: 'DBClusterEndpointIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterEndpoint.DBClusterEndpointIdentifier', props);
    return resource.getResponseField('DBClusterEndpointIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterEndpoint.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterEndpointResourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.DBClusterEndpointResourceIdentifier'),
        outputPath: 'DBClusterEndpointResourceIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterEndpoint.DBClusterEndpointResourceIdentifier', props);
    return resource.getResponseField('DBClusterEndpointResourceIdentifier') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.Endpoint'),
        outputPath: 'Endpoint',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterEndpoint.Endpoint', props);
    return resource.getResponseField('Endpoint') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterEndpoint.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get endpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.EndpointType'),
        outputPath: 'EndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterEndpoint.EndpointType', props);
    return resource.getResponseField('EndpointType') as unknown as string;
  }

  public get customEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.CustomEndpointType'),
        outputPath: 'CustomEndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterEndpoint.CustomEndpointType', props);
    return resource.getResponseField('CustomEndpointType') as unknown as string;
  }

  public get staticMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.StaticMembers'),
        outputPath: 'StaticMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterEndpoint.StaticMembers', props);
    return resource.getResponseField('StaticMembers') as unknown as string[];
  }

  public get excludedMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.ExcludedMembers'),
        outputPath: 'ExcludedMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterEndpoint.ExcludedMembers', props);
    return resource.getResponseField('ExcludedMembers') as unknown as string[];
  }

  public get dbClusterEndpointArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.DBClusterEndpointArn'),
        outputPath: 'DBClusterEndpointArn',
        parameters: {
          DBClusterEndpointIdentifier: this.input.dbClusterEndpointIdentifier,
          EndpointType: this.input.endpointType,
          StaticMembers: this.input.staticMembers,
          ExcludedMembers: this.input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterEndpoint.DBClusterEndpointArn', props);
    return resource.getResponseField('DBClusterEndpointArn') as unknown as string;
  }

}

export class RDSModifyDbClusterParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbClusterParameterGroupMessage) {
    super(scope, id);
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroupName',
        parameters: {
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          Parameters: this.input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroupName') as unknown as string;
  }

}

export class RDSModifyDbClusterSnapshotAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbClusterSnapshotAttributeMessage) {
    super(scope, id);
  }

  public get dbClusterSnapshotAttributesResult(): RDSModifyDbClusterSnapshotAttributeDbClusterSnapshotAttributesResult {
    return new RDSModifyDbClusterSnapshotAttributeDbClusterSnapshotAttributesResult(this, 'DbClusterSnapshotAttributesResult', this.__resources, this.input);
  }

}

export class RDSModifyDbClusterSnapshotAttributeDbClusterSnapshotAttributesResult extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbClusterSnapshotAttributeMessage) {
    super(scope, id);
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterSnapshotAttribute',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          AttributeName: this.input.attributeName,
          ValuesToAdd: this.input.valuesToAdd,
          ValuesToRemove: this.input.valuesToRemove,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterSnapshotAttributes(): shapes.RdsdbClusterSnapshotAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterSnapshotAttribute',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes',
        parameters: {
          DBClusterSnapshotIdentifier: this.input.dbClusterSnapshotIdentifier,
          AttributeName: this.input.attributeName,
          ValuesToAdd: this.input.valuesToAdd,
          ValuesToRemove: this.input.valuesToRemove,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes') as unknown as shapes.RdsdbClusterSnapshotAttribute[];
  }

}

export class RDSModifyDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstance(): RDSModifyDbInstanceDbInstance {
    return new RDSModifyDbInstanceDbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSModifyDbInstanceDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSModifyDbInstanceDbInstanceEndpoint {
    return new RDSModifyDbInstanceDbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSModifyDbInstanceDbInstanceDbSubnetGroup {
    return new RDSModifyDbInstanceDbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSModifyDbInstanceDbInstancePendingModifiedValues {
    return new RDSModifyDbInstanceDbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSModifyDbInstanceDbInstanceListenerEndpoint {
    return new RDSModifyDbInstanceDbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSModifyDbInstanceDbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSModifyDbInstanceDbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbInstanceMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSModifyDbInstanceDbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSModifyDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSModifyDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSModifyDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbInstanceMessage) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSModifyDbInstanceDbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          ApplyImmediately: this.input.applyImmediately,
          MasterUserPassword: this.input.masterUserPassword,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AllowMajorVersionUpgrade: this.input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          NewDBInstanceIdentifier: this.input.newDbInstanceIdentifier,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          CACertificateIdentifier: this.input.caCertificateIdentifier,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          DBPortNumber: this.input.dbPortNumber,
          PubliclyAccessible: this.input.publiclyAccessible,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          DomainIAMRoleName: this.input.domainIamRoleName,
          PromotionTier: this.input.promotionTier,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
          CertificateRotationRestart: this.input.certificateRotationRestart,
          ReplicaMode: this.input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSModifyDbParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbParameterGroupMessage) {
    super(scope, id);
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroupName',
        parameters: {
          DBParameterGroupName: this.input.dbParameterGroupName,
          Parameters: this.input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroupName') as unknown as string;
  }

}

export class RDSModifyDbProxy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbProxyRequest) {
    super(scope, id);
  }

  public get dbProxy(): RDSModifyDbProxyDbProxy {
    return new RDSModifyDbProxyDbProxy(this, 'DbProxy', this.__resources, this.input);
  }

}

export class RDSModifyDbProxyDbProxy extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbProxyRequest) {
    super(scope, id);
  }

  public get dbProxyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.DBProxyName'),
        outputPath: 'DBProxy.DBProxyName',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.DBProxyName', props);
    return resource.getResponseField('DBProxy.DBProxyName') as unknown as string;
  }

  public get dbProxyArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.DBProxyArn'),
        outputPath: 'DBProxy.DBProxyArn',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.DBProxyArn', props);
    return resource.getResponseField('DBProxy.DBProxyArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.Status'),
        outputPath: 'DBProxy.Status',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.Status', props);
    return resource.getResponseField('DBProxy.Status') as unknown as string;
  }

  public get engineFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.EngineFamily'),
        outputPath: 'DBProxy.EngineFamily',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.EngineFamily', props);
    return resource.getResponseField('DBProxy.EngineFamily') as unknown as string;
  }

  public get vpcSecurityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.VpcSecurityGroupIds'),
        outputPath: 'DBProxy.VpcSecurityGroupIds',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.VpcSecurityGroupIds', props);
    return resource.getResponseField('DBProxy.VpcSecurityGroupIds') as unknown as string[];
  }

  public get vpcSubnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.VpcSubnetIds'),
        outputPath: 'DBProxy.VpcSubnetIds',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.VpcSubnetIds', props);
    return resource.getResponseField('DBProxy.VpcSubnetIds') as unknown as string[];
  }

  public get auth(): shapes.RdsUserAuthConfigInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.Auth'),
        outputPath: 'DBProxy.Auth',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.Auth', props);
    return resource.getResponseField('DBProxy.Auth') as unknown as shapes.RdsUserAuthConfigInfo[];
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.RoleArn'),
        outputPath: 'DBProxy.RoleArn',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.RoleArn', props);
    return resource.getResponseField('DBProxy.RoleArn') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.Endpoint'),
        outputPath: 'DBProxy.Endpoint',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.Endpoint', props);
    return resource.getResponseField('DBProxy.Endpoint') as unknown as string;
  }

  public get requireTls(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.RequireTLS'),
        outputPath: 'DBProxy.RequireTLS',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.RequireTLS', props);
    return resource.getResponseField('DBProxy.RequireTLS') as unknown as boolean;
  }

  public get idleClientTimeout(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.IdleClientTimeout'),
        outputPath: 'DBProxy.IdleClientTimeout',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.IdleClientTimeout', props);
    return resource.getResponseField('DBProxy.IdleClientTimeout') as unknown as number;
  }

  public get debugLogging(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.DebugLogging'),
        outputPath: 'DBProxy.DebugLogging',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.DebugLogging', props);
    return resource.getResponseField('DBProxy.DebugLogging') as unknown as boolean;
  }

  public get createdDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.CreatedDate'),
        outputPath: 'DBProxy.CreatedDate',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.CreatedDate', props);
    return resource.getResponseField('DBProxy.CreatedDate') as unknown as string;
  }

  public get updatedDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.UpdatedDate'),
        outputPath: 'DBProxy.UpdatedDate',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          NewDBProxyName: this.input.newDbProxyName,
          Auth: this.input.auth,
          RequireTLS: this.input.requireTls,
          IdleClientTimeout: this.input.idleClientTimeout,
          DebugLogging: this.input.debugLogging,
          RoleArn: this.input.roleArn,
          SecurityGroups: this.input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxy.DBProxy.UpdatedDate', props);
    return resource.getResponseField('DBProxy.UpdatedDate') as unknown as string;
  }

}

export class RDSModifyDbProxyTargetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbProxyTargetGroupRequest) {
    super(scope, id);
  }

  public get dbProxyTargetGroup(): RDSModifyDbProxyTargetGroupDbProxyTargetGroup {
    return new RDSModifyDbProxyTargetGroupDbProxyTargetGroup(this, 'DbProxyTargetGroup', this.__resources, this.input);
  }

}

export class RDSModifyDbProxyTargetGroupDbProxyTargetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbProxyTargetGroupRequest) {
    super(scope, id);
  }

  public get dbProxyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.DBProxyName'),
        outputPath: 'DBProxyTargetGroup.DBProxyName',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.DBProxyName', props);
    return resource.getResponseField('DBProxyTargetGroup.DBProxyName') as unknown as string;
  }

  public get targetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.TargetGroupName'),
        outputPath: 'DBProxyTargetGroup.TargetGroupName',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.TargetGroupName', props);
    return resource.getResponseField('DBProxyTargetGroup.TargetGroupName') as unknown as string;
  }

  public get targetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.TargetGroupArn'),
        outputPath: 'DBProxyTargetGroup.TargetGroupArn',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.TargetGroupArn', props);
    return resource.getResponseField('DBProxyTargetGroup.TargetGroupArn') as unknown as string;
  }

  public get isDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.IsDefault'),
        outputPath: 'DBProxyTargetGroup.IsDefault',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.IsDefault', props);
    return resource.getResponseField('DBProxyTargetGroup.IsDefault') as unknown as boolean;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.Status'),
        outputPath: 'DBProxyTargetGroup.Status',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.Status', props);
    return resource.getResponseField('DBProxyTargetGroup.Status') as unknown as string;
  }

  public get connectionPoolConfig(): RDSModifyDbProxyTargetGroupDbProxyTargetGroupConnectionPoolConfig {
    return new RDSModifyDbProxyTargetGroupDbProxyTargetGroupConnectionPoolConfig(this, 'ConnectionPoolConfig', this.__resources, this.input);
  }

  public get createdDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.CreatedDate'),
        outputPath: 'DBProxyTargetGroup.CreatedDate',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.CreatedDate', props);
    return resource.getResponseField('DBProxyTargetGroup.CreatedDate') as unknown as string;
  }

  public get updatedDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.UpdatedDate'),
        outputPath: 'DBProxyTargetGroup.UpdatedDate',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.UpdatedDate', props);
    return resource.getResponseField('DBProxyTargetGroup.UpdatedDate') as unknown as string;
  }

}

export class RDSModifyDbProxyTargetGroupDbProxyTargetGroupConnectionPoolConfig extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbProxyTargetGroupRequest) {
    super(scope, id);
  }

  public get maxConnectionsPercent(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.MaxConnectionsPercent'),
        outputPath: 'DBProxyTargetGroup.ConnectionPoolConfig.MaxConnectionsPercent',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.MaxConnectionsPercent', props);
    return resource.getResponseField('DBProxyTargetGroup.ConnectionPoolConfig.MaxConnectionsPercent') as unknown as number;
  }

  public get maxIdleConnectionsPercent(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.MaxIdleConnectionsPercent'),
        outputPath: 'DBProxyTargetGroup.ConnectionPoolConfig.MaxIdleConnectionsPercent',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.MaxIdleConnectionsPercent', props);
    return resource.getResponseField('DBProxyTargetGroup.ConnectionPoolConfig.MaxIdleConnectionsPercent') as unknown as number;
  }

  public get connectionBorrowTimeout(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.ConnectionBorrowTimeout'),
        outputPath: 'DBProxyTargetGroup.ConnectionPoolConfig.ConnectionBorrowTimeout',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.ConnectionBorrowTimeout', props);
    return resource.getResponseField('DBProxyTargetGroup.ConnectionPoolConfig.ConnectionBorrowTimeout') as unknown as number;
  }

  public get sessionPinningFilters(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.SessionPinningFilters'),
        outputPath: 'DBProxyTargetGroup.ConnectionPoolConfig.SessionPinningFilters',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.SessionPinningFilters', props);
    return resource.getResponseField('DBProxyTargetGroup.ConnectionPoolConfig.SessionPinningFilters') as unknown as string[];
  }

  public get initQuery(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.InitQuery'),
        outputPath: 'DBProxyTargetGroup.ConnectionPoolConfig.InitQuery',
        parameters: {
          TargetGroupName: this.input.targetGroupName,
          DBProxyName: this.input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.input.connectionPoolConfig?.initQuery,
          },
          NewName: this.input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.InitQuery', props);
    return resource.getResponseField('DBProxyTargetGroup.ConnectionPoolConfig.InitQuery') as unknown as string;
  }

}

export class RDSModifyDbSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbSnapshot(): RDSModifyDbSnapshotDbSnapshot {
    return new RDSModifyDbSnapshotDbSnapshot(this, 'DbSnapshot', this.__resources, this.input);
  }

}

export class RDSModifyDbSnapshotDbSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.DBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.DBInstanceIdentifier'),
        outputPath: 'DBSnapshot.DBInstanceIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.DBInstanceIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBInstanceIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.SnapshotCreateTime'),
        outputPath: 'DBSnapshot.SnapshotCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Engine'),
        outputPath: 'DBSnapshot.Engine',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.Engine', props);
    return resource.getResponseField('DBSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.AllocatedStorage'),
        outputPath: 'DBSnapshot.AllocatedStorage',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Status'),
        outputPath: 'DBSnapshot.Status',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.Status', props);
    return resource.getResponseField('DBSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Port'),
        outputPath: 'DBSnapshot.Port',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.Port', props);
    return resource.getResponseField('DBSnapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.AvailabilityZone'),
        outputPath: 'DBSnapshot.AvailabilityZone',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.AvailabilityZone', props);
    return resource.getResponseField('DBSnapshot.AvailabilityZone') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.VpcId'),
        outputPath: 'DBSnapshot.VpcId',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.VpcId', props);
    return resource.getResponseField('DBSnapshot.VpcId') as unknown as string;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.InstanceCreateTime'),
        outputPath: 'DBSnapshot.InstanceCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.InstanceCreateTime', props);
    return resource.getResponseField('DBSnapshot.InstanceCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.MasterUsername'),
        outputPath: 'DBSnapshot.MasterUsername',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.MasterUsername', props);
    return resource.getResponseField('DBSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.EngineVersion'),
        outputPath: 'DBSnapshot.EngineVersion',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.EngineVersion', props);
    return resource.getResponseField('DBSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.LicenseModel'),
        outputPath: 'DBSnapshot.LicenseModel',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.LicenseModel', props);
    return resource.getResponseField('DBSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.SnapshotType'),
        outputPath: 'DBSnapshot.SnapshotType',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.SnapshotType', props);
    return resource.getResponseField('DBSnapshot.SnapshotType') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Iops'),
        outputPath: 'DBSnapshot.Iops',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.Iops', props);
    return resource.getResponseField('DBSnapshot.Iops') as unknown as number;
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.OptionGroupName'),
        outputPath: 'DBSnapshot.OptionGroupName',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.OptionGroupName', props);
    return resource.getResponseField('DBSnapshot.OptionGroupName') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.PercentProgress'),
        outputPath: 'DBSnapshot.PercentProgress',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.PercentProgress', props);
    return resource.getResponseField('DBSnapshot.PercentProgress') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.SourceRegion'),
        outputPath: 'DBSnapshot.SourceRegion',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.SourceRegion', props);
    return resource.getResponseField('DBSnapshot.SourceRegion') as unknown as string;
  }

  public get sourceDbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.SourceDBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.SourceDBSnapshotIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.StorageType'),
        outputPath: 'DBSnapshot.StorageType',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.StorageType', props);
    return resource.getResponseField('DBSnapshot.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.TdeCredentialArn'),
        outputPath: 'DBSnapshot.TdeCredentialArn',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.TdeCredentialArn', props);
    return resource.getResponseField('DBSnapshot.TdeCredentialArn') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Encrypted'),
        outputPath: 'DBSnapshot.Encrypted',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.Encrypted', props);
    return resource.getResponseField('DBSnapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.KmsKeyId'),
        outputPath: 'DBSnapshot.KmsKeyId',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.DBSnapshotArn'),
        outputPath: 'DBSnapshot.DBSnapshotArn',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.DBSnapshotArn', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Timezone'),
        outputPath: 'DBSnapshot.Timezone',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.Timezone', props);
    return resource.getResponseField('DBSnapshot.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.ProcessorFeatures'),
        outputPath: 'DBSnapshot.ProcessorFeatures',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.ProcessorFeatures', props);
    return resource.getResponseField('DBSnapshot.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.DbiResourceId'),
        outputPath: 'DBSnapshot.DbiResourceId',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.DbiResourceId', props);
    return resource.getResponseField('DBSnapshot.DbiResourceId') as unknown as string;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.TagList'),
        outputPath: 'DBSnapshot.TagList',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          EngineVersion: this.input.engineVersion,
          OptionGroupName: this.input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshot.DBSnapshot.TagList', props);
    return resource.getResponseField('DBSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSModifyDbSnapshotAttribute extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbSnapshotAttributeMessage) {
    super(scope, id);
  }

  public get dbSnapshotAttributesResult(): RDSModifyDbSnapshotAttributeDbSnapshotAttributesResult {
    return new RDSModifyDbSnapshotAttributeDbSnapshotAttributesResult(this, 'DbSnapshotAttributesResult', this.__resources, this.input);
  }

}

export class RDSModifyDbSnapshotAttributeDbSnapshotAttributesResult extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbSnapshotAttributeMessage) {
    super(scope, id);
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshotAttribute',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshotAttribute.DBSnapshotAttributesResult.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshotAttributesResult.DBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          AttributeName: this.input.attributeName,
          ValuesToAdd: this.input.valuesToAdd,
          ValuesToRemove: this.input.valuesToRemove,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshotAttribute.DBSnapshotAttributesResult.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshotAttributesResult.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbSnapshotAttributes(): shapes.RdsdbSnapshotAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshotAttribute',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshotAttribute.DBSnapshotAttributesResult.DBSnapshotAttributes'),
        outputPath: 'DBSnapshotAttributesResult.DBSnapshotAttributes',
        parameters: {
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          AttributeName: this.input.attributeName,
          ValuesToAdd: this.input.valuesToAdd,
          ValuesToRemove: this.input.valuesToRemove,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSnapshotAttribute.DBSnapshotAttributesResult.DBSnapshotAttributes', props);
    return resource.getResponseField('DBSnapshotAttributesResult.DBSnapshotAttributes') as unknown as shapes.RdsdbSnapshotAttribute[];
  }

}

export class RDSModifyDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbSubnetGroupMessage) {
    super(scope, id);
  }

  public get dbSubnetGroup(): RDSModifyDbSubnetGroupDbSubnetGroup {
    return new RDSModifyDbSubnetGroupDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

}

export class RDSModifyDbSubnetGroupDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyDbSubnetGroupMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.VpcId'),
        outputPath: 'DBSubnetGroup.VpcId',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSubnetGroup.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.Subnets'),
        outputPath: 'DBSubnetGroup.Subnets',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSubnetGroup.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.input.dbSubnetGroupDescription,
          SubnetIds: this.input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSModifyEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyEventSubscriptionMessage) {
    super(scope, id);
  }

  public get eventSubscription(): RDSModifyEventSubscriptionEventSubscription {
    return new RDSModifyEventSubscriptionEventSubscription(this, 'EventSubscription', this.__resources, this.input);
  }

}

export class RDSModifyEventSubscriptionEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyEventSubscriptionMessage) {
    super(scope, id);
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SnsTopicArn: this.input.snsTopicArn,
          SourceType: this.input.sourceType,
          EventCategories: this.input.eventCategories,
          Enabled: this.input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyEventSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class RDSModifyGlobalCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyGlobalClusterMessage) {
    super(scope, id);
  }

  public get globalCluster(): RDSModifyGlobalClusterGlobalCluster {
    return new RDSModifyGlobalClusterGlobalCluster(this, 'GlobalCluster', this.__resources, this.input);
  }

}

export class RDSModifyGlobalClusterGlobalCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyGlobalClusterMessage) {
    super(scope, id);
  }

  public get globalClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.GlobalClusterIdentifier'),
        outputPath: 'GlobalCluster.GlobalClusterIdentifier',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.input.newGlobalClusterIdentifier,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyGlobalCluster.GlobalCluster.GlobalClusterIdentifier', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterIdentifier') as unknown as string;
  }

  public get globalClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.GlobalClusterResourceId'),
        outputPath: 'GlobalCluster.GlobalClusterResourceId',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.input.newGlobalClusterIdentifier,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyGlobalCluster.GlobalCluster.GlobalClusterResourceId', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterResourceId') as unknown as string;
  }

  public get globalClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.GlobalClusterArn'),
        outputPath: 'GlobalCluster.GlobalClusterArn',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.input.newGlobalClusterIdentifier,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyGlobalCluster.GlobalCluster.GlobalClusterArn', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.Status'),
        outputPath: 'GlobalCluster.Status',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.input.newGlobalClusterIdentifier,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyGlobalCluster.GlobalCluster.Status', props);
    return resource.getResponseField('GlobalCluster.Status') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.Engine'),
        outputPath: 'GlobalCluster.Engine',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.input.newGlobalClusterIdentifier,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyGlobalCluster.GlobalCluster.Engine', props);
    return resource.getResponseField('GlobalCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.EngineVersion'),
        outputPath: 'GlobalCluster.EngineVersion',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.input.newGlobalClusterIdentifier,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyGlobalCluster.GlobalCluster.EngineVersion', props);
    return resource.getResponseField('GlobalCluster.EngineVersion') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.DatabaseName'),
        outputPath: 'GlobalCluster.DatabaseName',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.input.newGlobalClusterIdentifier,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyGlobalCluster.GlobalCluster.DatabaseName', props);
    return resource.getResponseField('GlobalCluster.DatabaseName') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.StorageEncrypted'),
        outputPath: 'GlobalCluster.StorageEncrypted',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.input.newGlobalClusterIdentifier,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyGlobalCluster.GlobalCluster.StorageEncrypted', props);
    return resource.getResponseField('GlobalCluster.StorageEncrypted') as unknown as boolean;
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.DeletionProtection'),
        outputPath: 'GlobalCluster.DeletionProtection',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.input.newGlobalClusterIdentifier,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyGlobalCluster.GlobalCluster.DeletionProtection', props);
    return resource.getResponseField('GlobalCluster.DeletionProtection') as unknown as boolean;
  }

  public get globalClusterMembers(): shapes.RdsGlobalClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.GlobalClusterMembers'),
        outputPath: 'GlobalCluster.GlobalClusterMembers',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.input.newGlobalClusterIdentifier,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyGlobalCluster.GlobalCluster.GlobalClusterMembers', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterMembers') as unknown as shapes.RdsGlobalClusterMember[];
  }

}

export class RDSModifyOptionGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyOptionGroupMessage) {
    super(scope, id);
  }

  public get optionGroup(): RDSModifyOptionGroupOptionGroup {
    return new RDSModifyOptionGroupOptionGroup(this, 'OptionGroup', this.__resources, this.input);
  }

}

export class RDSModifyOptionGroupOptionGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsModifyOptionGroupMessage) {
    super(scope, id);
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.OptionGroupName'),
        outputPath: 'OptionGroup.OptionGroupName',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          OptionsToInclude: this.input.optionsToInclude,
          OptionsToRemove: this.input.optionsToRemove,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyOptionGroup.OptionGroup.OptionGroupName', props);
    return resource.getResponseField('OptionGroup.OptionGroupName') as unknown as string;
  }

  public get optionGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.OptionGroupDescription'),
        outputPath: 'OptionGroup.OptionGroupDescription',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          OptionsToInclude: this.input.optionsToInclude,
          OptionsToRemove: this.input.optionsToRemove,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyOptionGroup.OptionGroup.OptionGroupDescription', props);
    return resource.getResponseField('OptionGroup.OptionGroupDescription') as unknown as string;
  }

  public get engineName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.EngineName'),
        outputPath: 'OptionGroup.EngineName',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          OptionsToInclude: this.input.optionsToInclude,
          OptionsToRemove: this.input.optionsToRemove,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyOptionGroup.OptionGroup.EngineName', props);
    return resource.getResponseField('OptionGroup.EngineName') as unknown as string;
  }

  public get majorEngineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.MajorEngineVersion'),
        outputPath: 'OptionGroup.MajorEngineVersion',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          OptionsToInclude: this.input.optionsToInclude,
          OptionsToRemove: this.input.optionsToRemove,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyOptionGroup.OptionGroup.MajorEngineVersion', props);
    return resource.getResponseField('OptionGroup.MajorEngineVersion') as unknown as string;
  }

  public get options(): shapes.RdsOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.Options'),
        outputPath: 'OptionGroup.Options',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          OptionsToInclude: this.input.optionsToInclude,
          OptionsToRemove: this.input.optionsToRemove,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyOptionGroup.OptionGroup.Options', props);
    return resource.getResponseField('OptionGroup.Options') as unknown as shapes.RdsOption[];
  }

  public get allowsVpcAndNonVpcInstanceMemberships(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships'),
        outputPath: 'OptionGroup.AllowsVpcAndNonVpcInstanceMemberships',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          OptionsToInclude: this.input.optionsToInclude,
          OptionsToRemove: this.input.optionsToRemove,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships', props);
    return resource.getResponseField('OptionGroup.AllowsVpcAndNonVpcInstanceMemberships') as unknown as boolean;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.VpcId'),
        outputPath: 'OptionGroup.VpcId',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          OptionsToInclude: this.input.optionsToInclude,
          OptionsToRemove: this.input.optionsToRemove,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyOptionGroup.OptionGroup.VpcId', props);
    return resource.getResponseField('OptionGroup.VpcId') as unknown as string;
  }

  public get optionGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.OptionGroupArn'),
        outputPath: 'OptionGroup.OptionGroupArn',
        parameters: {
          OptionGroupName: this.input.optionGroupName,
          OptionsToInclude: this.input.optionsToInclude,
          OptionsToRemove: this.input.optionsToRemove,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ModifyOptionGroup.OptionGroup.OptionGroupArn', props);
    return resource.getResponseField('OptionGroup.OptionGroupArn') as unknown as string;
  }

}

export class RDSPromoteReadReplica extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPromoteReadReplicaMessage) {
    super(scope, id);
  }

  public get dbInstance(): RDSPromoteReadReplicaDbInstance {
    return new RDSPromoteReadReplicaDbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSPromoteReadReplicaDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPromoteReadReplicaMessage) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSPromoteReadReplicaDbInstanceEndpoint {
    return new RDSPromoteReadReplicaDbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSPromoteReadReplicaDbInstanceDbSubnetGroup {
    return new RDSPromoteReadReplicaDbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSPromoteReadReplicaDbInstancePendingModifiedValues {
    return new RDSPromoteReadReplicaDbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSPromoteReadReplicaDbInstanceListenerEndpoint {
    return new RDSPromoteReadReplicaDbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSPromoteReadReplicaDbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPromoteReadReplicaMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSPromoteReadReplicaDbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPromoteReadReplicaMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSPromoteReadReplicaDbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPromoteReadReplicaMessage) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSPromoteReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSPromoteReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSPromoteReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPromoteReadReplicaMessage) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSPromoteReadReplicaDbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPromoteReadReplicaMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplica.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSPromoteReadReplicaDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPromoteReadReplicaDbClusterMessage) {
    super(scope, id);
  }

  public get dbCluster(): RDSPromoteReadReplicaDbClusterDbCluster {
    return new RDSPromoteReadReplicaDbClusterDbCluster(this, 'DbCluster', this.__resources, this.input);
  }

}

export class RDSPromoteReadReplicaDbClusterDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPromoteReadReplicaDbClusterMessage) {
    super(scope, id);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSPromoteReadReplicaDbClusterDbClusterScalingConfigurationInfo {
    return new RDSPromoteReadReplicaDbClusterDbClusterScalingConfigurationInfo(this, 'ScalingConfigurationInfo', this.__resources, this.input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSPromoteReadReplicaDbClusterDbClusterScalingConfigurationInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPromoteReadReplicaDbClusterMessage) {
    super(scope, id);
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSPurchaseReservedDbInstancesOffering extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPurchaseReservedDbInstancesOfferingMessage) {
    super(scope, id);
  }

  public get reservedDbInstance(): RDSPurchaseReservedDbInstancesOfferingReservedDbInstance {
    return new RDSPurchaseReservedDbInstancesOfferingReservedDbInstance(this, 'ReservedDbInstance', this.__resources, this.input);
  }

}

export class RDSPurchaseReservedDbInstancesOfferingReservedDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsPurchaseReservedDbInstancesOfferingMessage) {
    super(scope, id);
  }

  public get reservedDbInstanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstanceId'),
        outputPath: 'ReservedDBInstance.ReservedDBInstanceId',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstanceId', props);
    return resource.getResponseField('ReservedDBInstance.ReservedDBInstanceId') as unknown as string;
  }

  public get reservedDbInstancesOfferingId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstancesOfferingId'),
        outputPath: 'ReservedDBInstance.ReservedDBInstancesOfferingId',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstancesOfferingId', props);
    return resource.getResponseField('ReservedDBInstance.ReservedDBInstancesOfferingId') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.DBInstanceClass'),
        outputPath: 'ReservedDBInstance.DBInstanceClass',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.DBInstanceClass', props);
    return resource.getResponseField('ReservedDBInstance.DBInstanceClass') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.StartTime'),
        outputPath: 'ReservedDBInstance.StartTime',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.StartTime', props);
    return resource.getResponseField('ReservedDBInstance.StartTime') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.Duration'),
        outputPath: 'ReservedDBInstance.Duration',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.Duration', props);
    return resource.getResponseField('ReservedDBInstance.Duration') as unknown as number;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.FixedPrice'),
        outputPath: 'ReservedDBInstance.FixedPrice',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.FixedPrice', props);
    return resource.getResponseField('ReservedDBInstance.FixedPrice') as unknown as number;
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.UsagePrice'),
        outputPath: 'ReservedDBInstance.UsagePrice',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.UsagePrice', props);
    return resource.getResponseField('ReservedDBInstance.UsagePrice') as unknown as number;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.CurrencyCode'),
        outputPath: 'ReservedDBInstance.CurrencyCode',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.CurrencyCode', props);
    return resource.getResponseField('ReservedDBInstance.CurrencyCode') as unknown as string;
  }

  public get dbInstanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.DBInstanceCount'),
        outputPath: 'ReservedDBInstance.DBInstanceCount',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.DBInstanceCount', props);
    return resource.getResponseField('ReservedDBInstance.DBInstanceCount') as unknown as number;
  }

  public get productDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.ProductDescription'),
        outputPath: 'ReservedDBInstance.ProductDescription',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.ProductDescription', props);
    return resource.getResponseField('ReservedDBInstance.ProductDescription') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.OfferingType'),
        outputPath: 'ReservedDBInstance.OfferingType',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.OfferingType', props);
    return resource.getResponseField('ReservedDBInstance.OfferingType') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.MultiAZ'),
        outputPath: 'ReservedDBInstance.MultiAZ',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.MultiAZ', props);
    return resource.getResponseField('ReservedDBInstance.MultiAZ') as unknown as boolean;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.State'),
        outputPath: 'ReservedDBInstance.State',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.State', props);
    return resource.getResponseField('ReservedDBInstance.State') as unknown as string;
  }

  public get recurringCharges(): shapes.RdsRecurringCharge[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.RecurringCharges'),
        outputPath: 'ReservedDBInstance.RecurringCharges',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.RecurringCharges', props);
    return resource.getResponseField('ReservedDBInstance.RecurringCharges') as unknown as shapes.RdsRecurringCharge[];
  }

  public get reservedDbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstanceArn'),
        outputPath: 'ReservedDBInstance.ReservedDBInstanceArn',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstanceArn', props);
    return resource.getResponseField('ReservedDBInstance.ReservedDBInstanceArn') as unknown as string;
  }

  public get leaseId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.LeaseId'),
        outputPath: 'ReservedDBInstance.LeaseId',
        parameters: {
          ReservedDBInstancesOfferingId: this.input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.input.reservedDbInstanceId,
          DBInstanceCount: this.input.dbInstanceCount,
          Tags: this.input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.LeaseId', props);
    return resource.getResponseField('ReservedDBInstance.LeaseId') as unknown as string;
  }

}

export class RDSRebootDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRebootDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstance(): RDSRebootDbInstanceDbInstance {
    return new RDSRebootDbInstanceDbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSRebootDbInstanceDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRebootDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSRebootDbInstanceDbInstanceEndpoint {
    return new RDSRebootDbInstanceDbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSRebootDbInstanceDbInstanceDbSubnetGroup {
    return new RDSRebootDbInstanceDbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSRebootDbInstanceDbInstancePendingModifiedValues {
    return new RDSRebootDbInstanceDbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSRebootDbInstanceDbInstanceListenerEndpoint {
    return new RDSRebootDbInstanceDbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSRebootDbInstanceDbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRebootDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSRebootDbInstanceDbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRebootDbInstanceMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSRebootDbInstanceDbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRebootDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSRebootDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSRebootDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSRebootDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRebootDbInstanceMessage) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSRebootDbInstanceDbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRebootDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          ForceFailover: this.input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RebootDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSRegisterDbProxyTargets extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRegisterDbProxyTargetsRequest) {
    super(scope, id);
  }

  public get dbProxyTargets(): shapes.RdsdbProxyTarget[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerDbProxyTargets',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RegisterDBProxyTargets.DBProxyTargets'),
        outputPath: 'DBProxyTargets',
        parameters: {
          DBProxyName: this.input.dbProxyName,
          TargetGroupName: this.input.targetGroupName,
          DBInstanceIdentifiers: this.input.dbInstanceIdentifiers,
          DBClusterIdentifiers: this.input.dbClusterIdentifiers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RegisterDBProxyTargets.DBProxyTargets', props);
    return resource.getResponseField('DBProxyTargets') as unknown as shapes.RdsdbProxyTarget[];
  }

}

export class RDSRemoveFromGlobalCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRemoveFromGlobalClusterMessage) {
    super(scope, id);
  }

  public get globalCluster(): RDSRemoveFromGlobalClusterGlobalCluster {
    return new RDSRemoveFromGlobalClusterGlobalCluster(this, 'GlobalCluster', this.__resources, this.input);
  }

}

export class RDSRemoveFromGlobalClusterGlobalCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRemoveFromGlobalClusterMessage) {
    super(scope, id);
  }

  public get globalClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.GlobalClusterIdentifier'),
        outputPath: 'GlobalCluster.GlobalClusterIdentifier',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          DbClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveFromGlobalCluster.GlobalCluster.GlobalClusterIdentifier', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterIdentifier') as unknown as string;
  }

  public get globalClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.GlobalClusterResourceId'),
        outputPath: 'GlobalCluster.GlobalClusterResourceId',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          DbClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveFromGlobalCluster.GlobalCluster.GlobalClusterResourceId', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterResourceId') as unknown as string;
  }

  public get globalClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.GlobalClusterArn'),
        outputPath: 'GlobalCluster.GlobalClusterArn',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          DbClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveFromGlobalCluster.GlobalCluster.GlobalClusterArn', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.Status'),
        outputPath: 'GlobalCluster.Status',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          DbClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveFromGlobalCluster.GlobalCluster.Status', props);
    return resource.getResponseField('GlobalCluster.Status') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.Engine'),
        outputPath: 'GlobalCluster.Engine',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          DbClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveFromGlobalCluster.GlobalCluster.Engine', props);
    return resource.getResponseField('GlobalCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.EngineVersion'),
        outputPath: 'GlobalCluster.EngineVersion',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          DbClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveFromGlobalCluster.GlobalCluster.EngineVersion', props);
    return resource.getResponseField('GlobalCluster.EngineVersion') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.DatabaseName'),
        outputPath: 'GlobalCluster.DatabaseName',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          DbClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveFromGlobalCluster.GlobalCluster.DatabaseName', props);
    return resource.getResponseField('GlobalCluster.DatabaseName') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.StorageEncrypted'),
        outputPath: 'GlobalCluster.StorageEncrypted',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          DbClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveFromGlobalCluster.GlobalCluster.StorageEncrypted', props);
    return resource.getResponseField('GlobalCluster.StorageEncrypted') as unknown as boolean;
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.DeletionProtection'),
        outputPath: 'GlobalCluster.DeletionProtection',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          DbClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveFromGlobalCluster.GlobalCluster.DeletionProtection', props);
    return resource.getResponseField('GlobalCluster.DeletionProtection') as unknown as boolean;
  }

  public get globalClusterMembers(): shapes.RdsGlobalClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.GlobalClusterMembers'),
        outputPath: 'GlobalCluster.GlobalClusterMembers',
        parameters: {
          GlobalClusterIdentifier: this.input.globalClusterIdentifier,
          DbClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveFromGlobalCluster.GlobalCluster.GlobalClusterMembers', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterMembers') as unknown as shapes.RdsGlobalClusterMember[];
  }

}

export class RDSRemoveSourceIdentifierFromSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRemoveSourceIdentifierFromSubscriptionMessage) {
    super(scope, id);
  }

  public get eventSubscription(): RDSRemoveSourceIdentifierFromSubscriptionEventSubscription {
    return new RDSRemoveSourceIdentifierFromSubscriptionEventSubscription(this, 'EventSubscription', this.__resources, this.input);
  }

}

export class RDSRemoveSourceIdentifierFromSubscriptionEventSubscription extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRemoveSourceIdentifierFromSubscriptionMessage) {
    super(scope, id);
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveSourceIdentifierFromSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveSourceIdentifierFromSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveSourceIdentifierFromSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveSourceIdentifierFromSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveSourceIdentifierFromSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.input.subscriptionName,
          SourceIdentifier: this.input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RemoveSourceIdentifierFromSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class RDSResetDbClusterParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsResetDbClusterParameterGroupMessage) {
    super(scope, id);
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ResetDBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroupName',
        parameters: {
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          ResetAllParameters: this.input.resetAllParameters,
          Parameters: this.input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResetDBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroupName') as unknown as string;
  }

}

export class RDSResetDbParameterGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsResetDbParameterGroupMessage) {
    super(scope, id);
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ResetDBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroupName',
        parameters: {
          DBParameterGroupName: this.input.dbParameterGroupName,
          ResetAllParameters: this.input.resetAllParameters,
          Parameters: this.input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'ResetDBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroupName') as unknown as string;
  }

}

export class RDSRestoreDbClusterFromS3 extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbClusterFromS3Message) {
    super(scope, id);
  }

  public get dbCluster(): RDSRestoreDbClusterFromS3DbCluster {
    return new RDSRestoreDbClusterFromS3DbCluster(this, 'DbCluster', this.__resources, this.input);
  }

}

export class RDSRestoreDbClusterFromS3DbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbClusterFromS3Message) {
    super(scope, id);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSRestoreDbClusterFromS3DbClusterScalingConfigurationInfo {
    return new RDSRestoreDbClusterFromS3DbClusterScalingConfigurationInfo(this, 'ScalingConfigurationInfo', this.__resources, this.input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSRestoreDbClusterFromS3DbClusterScalingConfigurationInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbClusterFromS3Message) {
    super(scope, id);
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          CharacterSetName: this.input.characterSetName,
          DatabaseName: this.input.databaseName,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          OptionGroupName: this.input.optionGroupName,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          Tags: this.input.tags,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSRestoreDbClusterFromSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbClusterFromSnapshotMessage) {
    super(scope, id);
  }

  public get dbCluster(): RDSRestoreDbClusterFromSnapshotDbCluster {
    return new RDSRestoreDbClusterFromSnapshotDbCluster(this, 'DbCluster', this.__resources, this.input);
  }

}

export class RDSRestoreDbClusterFromSnapshotDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbClusterFromSnapshotMessage) {
    super(scope, id);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSRestoreDbClusterFromSnapshotDbClusterScalingConfigurationInfo {
    return new RDSRestoreDbClusterFromSnapshotDbClusterScalingConfigurationInfo(this, 'ScalingConfigurationInfo', this.__resources, this.input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSRestoreDbClusterFromSnapshotDbClusterScalingConfigurationInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbClusterFromSnapshotMessage) {
    super(scope, id);
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          AvailabilityZones: this.input.availabilityZones,
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          SnapshotIdentifier: this.input.snapshotIdentifier,
          Engine: this.input.engine,
          EngineVersion: this.input.engineVersion,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          DatabaseName: this.input.databaseName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          EngineMode: this.input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.input.scalingConfiguration?.maxCapacity,
            AutoPause: this.input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSRestoreDbClusterToPointInTime extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbClusterToPointInTimeMessage) {
    super(scope, id);
  }

  public get dbCluster(): RDSRestoreDbClusterToPointInTimeDbCluster {
    return new RDSRestoreDbClusterToPointInTimeDbCluster(this, 'DbCluster', this.__resources, this.input);
  }

}

export class RDSRestoreDbClusterToPointInTimeDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbClusterToPointInTimeMessage) {
    super(scope, id);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSRestoreDbClusterToPointInTimeDbClusterScalingConfigurationInfo {
    return new RDSRestoreDbClusterToPointInTimeDbClusterScalingConfigurationInfo(this, 'ScalingConfigurationInfo', this.__resources, this.input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSRestoreDbClusterToPointInTimeDbClusterScalingConfigurationInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbClusterToPointInTimeMessage) {
    super(scope, id);
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
          RestoreType: this.input.restoreType,
          SourceDBClusterIdentifier: this.input.sourceDbClusterIdentifier,
          RestoreToTime: this.input.restoreToTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          Port: this.input.port,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          OptionGroupName: this.input.optionGroupName,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Tags: this.input.tags,
          KmsKeyId: this.input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.input.backtrackWindow,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.input.dbClusterParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSRestoreDbInstanceFromDbSnapshot extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbInstance(): RDSRestoreDbInstanceFromDbSnapshotDbInstance {
    return new RDSRestoreDbInstanceFromDbSnapshotDbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSRestoreDbInstanceFromDbSnapshotDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSRestoreDbInstanceFromDbSnapshotDbInstanceEndpoint {
    return new RDSRestoreDbInstanceFromDbSnapshotDbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSRestoreDbInstanceFromDbSnapshotDbInstanceDbSubnetGroup {
    return new RDSRestoreDbInstanceFromDbSnapshotDbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValues {
    return new RDSRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSRestoreDbInstanceFromDbSnapshotDbInstanceListenerEndpoint {
    return new RDSRestoreDbInstanceFromDbSnapshotDbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSRestoreDbInstanceFromDbSnapshotDbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSRestoreDbInstanceFromDbSnapshotDbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSRestoreDbInstanceFromDbSnapshotDbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSRestoreDbInstanceFromS3 extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromS3Message) {
    super(scope, id);
  }

  public get dbInstance(): RDSRestoreDbInstanceFromS3DbInstance {
    return new RDSRestoreDbInstanceFromS3DbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSRestoreDbInstanceFromS3DbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromS3Message) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSRestoreDbInstanceFromS3DbInstanceEndpoint {
    return new RDSRestoreDbInstanceFromS3DbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSRestoreDbInstanceFromS3DbInstanceDbSubnetGroup {
    return new RDSRestoreDbInstanceFromS3DbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSRestoreDbInstanceFromS3DbInstancePendingModifiedValues {
    return new RDSRestoreDbInstanceFromS3DbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSRestoreDbInstanceFromS3DbInstanceListenerEndpoint {
    return new RDSRestoreDbInstanceFromS3DbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSRestoreDbInstanceFromS3DbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromS3Message) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSRestoreDbInstanceFromS3DbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromS3Message) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSRestoreDbInstanceFromS3DbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromS3Message) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSRestoreDbInstanceFromS3DbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSRestoreDbInstanceFromS3DbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSRestoreDbInstanceFromS3DbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromS3Message) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSRestoreDbInstanceFromS3DbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceFromS3Message) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBName: this.input.dbName,
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          AllocatedStorage: this.input.allocatedStorage,
          DBInstanceClass: this.input.dbInstanceClass,
          Engine: this.input.engine,
          MasterUsername: this.input.masterUsername,
          MasterUserPassword: this.input.masterUserPassword,
          DBSecurityGroups: this.input.dbSecurityGroups,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.input.preferredMaintenanceWindow,
          DBParameterGroupName: this.input.dbParameterGroupName,
          BackupRetentionPeriod: this.input.backupRetentionPeriod,
          PreferredBackupWindow: this.input.preferredBackupWindow,
          Port: this.input.port,
          MultiAZ: this.input.multiAz,
          EngineVersion: this.input.engineVersion,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          PubliclyAccessible: this.input.publiclyAccessible,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          StorageEncrypted: this.input.storageEncrypted,
          KmsKeyId: this.input.kmsKeyId,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          MonitoringInterval: this.input.monitoringInterval,
          MonitoringRoleArn: this.input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          SourceEngine: this.input.sourceEngine,
          SourceEngineVersion: this.input.sourceEngineVersion,
          S3BucketName: this.input.s3BucketName,
          S3Prefix: this.input.s3Prefix,
          S3IngestionRoleArn: this.input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DeletionProtection: this.input.deletionProtection,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSRestoreDbInstanceToPointInTime extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
    super(scope, id);
  }

  public get dbInstance(): RDSRestoreDbInstanceToPointInTimeDbInstance {
    return new RDSRestoreDbInstanceToPointInTimeDbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSRestoreDbInstanceToPointInTimeDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSRestoreDbInstanceToPointInTimeDbInstanceEndpoint {
    return new RDSRestoreDbInstanceToPointInTimeDbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSRestoreDbInstanceToPointInTimeDbInstanceDbSubnetGroup {
    return new RDSRestoreDbInstanceToPointInTimeDbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValues {
    return new RDSRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSRestoreDbInstanceToPointInTimeDbInstanceListenerEndpoint {
    return new RDSRestoreDbInstanceToPointInTimeDbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSRestoreDbInstanceToPointInTimeDbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSRestoreDbInstanceToPointInTimeDbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSRestoreDbInstanceToPointInTimeDbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          SourceDBInstanceIdentifier: this.input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.input.targetDbInstanceIdentifier,
          RestoreTime: this.input.restoreTime,
          UseLatestRestorableTime: this.input.useLatestRestorableTime,
          DBInstanceClass: this.input.dbInstanceClass,
          Port: this.input.port,
          AvailabilityZone: this.input.availabilityZone,
          DBSubnetGroupName: this.input.dbSubnetGroupName,
          MultiAZ: this.input.multiAz,
          PubliclyAccessible: this.input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.input.autoMinorVersionUpgrade,
          LicenseModel: this.input.licenseModel,
          DBName: this.input.dbName,
          Engine: this.input.engine,
          Iops: this.input.iops,
          OptionGroupName: this.input.optionGroupName,
          CopyTagsToSnapshot: this.input.copyTagsToSnapshot,
          Tags: this.input.tags,
          StorageType: this.input.storageType,
          TdeCredentialArn: this.input.tdeCredentialArn,
          TdeCredentialPassword: this.input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.input.vpcSecurityGroupIds,
          Domain: this.input.domain,
          DomainIAMRoleName: this.input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.input.processorFeatures,
          UseDefaultProcessorFeatures: this.input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.input.dbParameterGroupName,
          DeletionProtection: this.input.deletionProtection,
          SourceDbiResourceId: this.input.sourceDbiResourceId,
          MaxAllocatedStorage: this.input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSRevokeDbSecurityGroupIngress extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRevokeDbSecurityGroupIngressMessage) {
    super(scope, id);
  }

  public get dbSecurityGroup(): RDSRevokeDbSecurityGroupIngressDbSecurityGroup {
    return new RDSRevokeDbSecurityGroupIngressDbSecurityGroup(this, 'DbSecurityGroup', this.__resources, this.input);
  }

}

export class RDSRevokeDbSecurityGroupIngressDbSecurityGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsRevokeDbSecurityGroupIngressMessage) {
    super(scope, id);
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.OwnerId'),
        outputPath: 'DBSecurityGroup.OwnerId',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.OwnerId', props);
    return resource.getResponseField('DBSecurityGroup.OwnerId') as unknown as string;
  }

  public get dbSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupName'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupName',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupName', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupName') as unknown as string;
  }

  public get dbSecurityGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupDescription'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupDescription',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupDescription', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.VpcId'),
        outputPath: 'DBSecurityGroup.VpcId',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.VpcId', props);
    return resource.getResponseField('DBSecurityGroup.VpcId') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.Rdsec2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.EC2SecurityGroups'),
        outputPath: 'DBSecurityGroup.EC2SecurityGroups',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('DBSecurityGroup.EC2SecurityGroups') as unknown as shapes.Rdsec2SecurityGroup[];
  }

  public get ipRanges(): shapes.RdsipRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.IPRanges'),
        outputPath: 'DBSecurityGroup.IPRanges',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.IPRanges', props);
    return resource.getResponseField('DBSecurityGroup.IPRanges') as unknown as shapes.RdsipRange[];
  }

  public get dbSecurityGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupArn'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupArn',
        parameters: {
          DBSecurityGroupName: this.input.dbSecurityGroupName,
          CIDRIP: this.input.cidrip,
          EC2SecurityGroupName: this.input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupArn', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupArn') as unknown as string;
  }

}

export class RDSStartActivityStream extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartActivityStreamRequest) {
    super(scope, id);
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartActivityStream.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          ResourceArn: this.input.resourceArn,
          Mode: this.input.mode,
          KmsKeyId: this.input.kmsKeyId,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartActivityStream.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get kinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartActivityStream.KinesisStreamName'),
        outputPath: 'KinesisStreamName',
        parameters: {
          ResourceArn: this.input.resourceArn,
          Mode: this.input.mode,
          KmsKeyId: this.input.kmsKeyId,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartActivityStream.KinesisStreamName', props);
    return resource.getResponseField('KinesisStreamName') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartActivityStream.Status'),
        outputPath: 'Status',
        parameters: {
          ResourceArn: this.input.resourceArn,
          Mode: this.input.mode,
          KmsKeyId: this.input.kmsKeyId,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartActivityStream.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get mode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartActivityStream.Mode'),
        outputPath: 'Mode',
        parameters: {
          ResourceArn: this.input.resourceArn,
          Mode: this.input.mode,
          KmsKeyId: this.input.kmsKeyId,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartActivityStream.Mode', props);
    return resource.getResponseField('Mode') as unknown as string;
  }

  public get applyImmediately(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartActivityStream.ApplyImmediately'),
        outputPath: 'ApplyImmediately',
        parameters: {
          ResourceArn: this.input.resourceArn,
          Mode: this.input.mode,
          KmsKeyId: this.input.kmsKeyId,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartActivityStream.ApplyImmediately', props);
    return resource.getResponseField('ApplyImmediately') as unknown as boolean;
  }

}

export class RDSStartDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartDbClusterMessage) {
    super(scope, id);
  }

  public get dbCluster(): RDSStartDbClusterDbCluster {
    return new RDSStartDbClusterDbCluster(this, 'DbCluster', this.__resources, this.input);
  }

}

export class RDSStartDbClusterDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartDbClusterMessage) {
    super(scope, id);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSStartDbClusterDbClusterScalingConfigurationInfo {
    return new RDSStartDbClusterDbClusterScalingConfigurationInfo(this, 'ScalingConfigurationInfo', this.__resources, this.input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSStartDbClusterDbClusterScalingConfigurationInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartDbClusterMessage) {
    super(scope, id);
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSStartDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstance(): RDSStartDbInstanceDbInstance {
    return new RDSStartDbInstanceDbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSStartDbInstanceDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSStartDbInstanceDbInstanceEndpoint {
    return new RDSStartDbInstanceDbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSStartDbInstanceDbInstanceDbSubnetGroup {
    return new RDSStartDbInstanceDbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSStartDbInstanceDbInstancePendingModifiedValues {
    return new RDSStartDbInstanceDbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSStartDbInstanceDbInstanceListenerEndpoint {
    return new RDSStartDbInstanceDbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSStartDbInstanceDbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSStartDbInstanceDbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartDbInstanceMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSStartDbInstanceDbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSStartDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSStartDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSStartDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartDbInstanceMessage) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSStartDbInstanceDbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSStartExportTask extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStartExportTaskMessage) {
    super(scope, id);
  }

  public get exportTaskIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.ExportTaskIdentifier'),
        outputPath: 'ExportTaskIdentifier',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.ExportTaskIdentifier', props);
    return resource.getResponseField('ExportTaskIdentifier') as unknown as string;
  }

  public get sourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.SourceArn'),
        outputPath: 'SourceArn',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.SourceArn', props);
    return resource.getResponseField('SourceArn') as unknown as string;
  }

  public get exportOnly(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.ExportOnly'),
        outputPath: 'ExportOnly',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.ExportOnly', props);
    return resource.getResponseField('ExportOnly') as unknown as string[];
  }

  public get snapshotTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.SnapshotTime'),
        outputPath: 'SnapshotTime',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.SnapshotTime', props);
    return resource.getResponseField('SnapshotTime') as unknown as string;
  }

  public get taskStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.TaskStartTime'),
        outputPath: 'TaskStartTime',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.TaskStartTime', props);
    return resource.getResponseField('TaskStartTime') as unknown as string;
  }

  public get taskEndTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.TaskEndTime'),
        outputPath: 'TaskEndTime',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.TaskEndTime', props);
    return resource.getResponseField('TaskEndTime') as unknown as string;
  }

  public get s3Bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.S3Bucket'),
        outputPath: 'S3Bucket',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.S3Bucket', props);
    return resource.getResponseField('S3Bucket') as unknown as string;
  }

  public get s3Prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.S3Prefix'),
        outputPath: 'S3Prefix',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.S3Prefix', props);
    return resource.getResponseField('S3Prefix') as unknown as string;
  }

  public get iamRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.IamRoleArn'),
        outputPath: 'IamRoleArn',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.IamRoleArn', props);
    return resource.getResponseField('IamRoleArn') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.Status'),
        outputPath: 'Status',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.PercentProgress'),
        outputPath: 'PercentProgress',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.PercentProgress', props);
    return resource.getResponseField('PercentProgress') as unknown as number;
  }

  public get totalExtractedDataInGb(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.TotalExtractedDataInGB'),
        outputPath: 'TotalExtractedDataInGB',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.TotalExtractedDataInGB', props);
    return resource.getResponseField('TotalExtractedDataInGB') as unknown as number;
  }

  public get failureCause(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.FailureCause'),
        outputPath: 'FailureCause',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.FailureCause', props);
    return resource.getResponseField('FailureCause') as unknown as string;
  }

  public get warningMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.WarningMessage'),
        outputPath: 'WarningMessage',
        parameters: {
          ExportTaskIdentifier: this.input.exportTaskIdentifier,
          SourceArn: this.input.sourceArn,
          S3BucketName: this.input.s3BucketName,
          IamRoleArn: this.input.iamRoleArn,
          KmsKeyId: this.input.kmsKeyId,
          S3Prefix: this.input.s3Prefix,
          ExportOnly: this.input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StartExportTask.WarningMessage', props);
    return resource.getResponseField('WarningMessage') as unknown as string;
  }

}

export class RDSStopActivityStream extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopActivityStreamRequest) {
    super(scope, id);
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopActivityStream.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          ResourceArn: this.input.resourceArn,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopActivityStream.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get kinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopActivityStream.KinesisStreamName'),
        outputPath: 'KinesisStreamName',
        parameters: {
          ResourceArn: this.input.resourceArn,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopActivityStream.KinesisStreamName', props);
    return resource.getResponseField('KinesisStreamName') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopActivityStream.Status'),
        outputPath: 'Status',
        parameters: {
          ResourceArn: this.input.resourceArn,
          ApplyImmediately: this.input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopActivityStream.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

}

export class RDSStopDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopDbClusterMessage) {
    super(scope, id);
  }

  public get dbCluster(): RDSStopDbClusterDbCluster {
    return new RDSStopDbClusterDbCluster(this, 'DbCluster', this.__resources, this.input);
  }

}

export class RDSStopDbClusterDbCluster extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopDbClusterMessage) {
    super(scope, id);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSStopDbClusterDbClusterScalingConfigurationInfo {
    return new RDSStopDbClusterDbClusterScalingConfigurationInfo(this, 'ScalingConfigurationInfo', this.__resources, this.input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSStopDbClusterDbClusterScalingConfigurationInfo extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopDbClusterMessage) {
    super(scope, id);
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSStopDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstance(): RDSStopDbInstanceDbInstance {
    return new RDSStopDbInstanceDbInstance(this, 'DbInstance', this.__resources, this.input);
  }

}

export class RDSStopDbInstanceDbInstance extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSStopDbInstanceDbInstanceEndpoint {
    return new RDSStopDbInstanceDbInstanceEndpoint(this, 'Endpoint', this.__resources, this.input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSStopDbInstanceDbInstanceDbSubnetGroup {
    return new RDSStopDbInstanceDbInstanceDbSubnetGroup(this, 'DbSubnetGroup', this.__resources, this.input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSStopDbInstanceDbInstancePendingModifiedValues {
    return new RDSStopDbInstanceDbInstancePendingModifiedValues(this, 'PendingModifiedValues', this.__resources, this.input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSStopDbInstanceDbInstanceListenerEndpoint {
    return new RDSStopDbInstanceDbInstanceListenerEndpoint(this, 'ListenerEndpoint', this.__resources, this.input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSStopDbInstanceDbInstanceEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSStopDbInstanceDbInstanceDbSubnetGroup extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopDbInstanceMessage) {
    super(scope, id);
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSStopDbInstanceDbInstancePendingModifiedValues extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopDbInstanceMessage) {
    super(scope, id);
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSStopDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSStopDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this, 'PendingCloudwatchLogsExports', this.__resources, this.input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSStopDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopDbInstanceMessage) {
    super(scope, id);
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSStopDbInstanceDbInstanceListenerEndpoint extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[], private readonly input: shapes.RdsStopDbInstanceMessage) {
    super(scope, id);
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this, 'StopDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

