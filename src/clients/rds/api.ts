import * as cdk from '@aws-cdk/core';
import * as cr from '@aws-cdk/custom-resources';
import * as shapes from './shapes';

export class RdsClient extends cdk.Construct {

  constructor(scope: cdk.Construct, id: string, private readonly __resources: string[]) {
    super(scope, id);
  }

  public addRoleToDbCluster(input: shapes.RdsAddRoleToDbClusterMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addRoleToDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddRoleToDBCluster'),
        parameters: {
          DBClusterIdentifier: input.dbClusterIdentifier,
          RoleArn: input.roleArn,
          FeatureName: input.featureName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddRoleToDBCluster', props);
  }

  public addRoleToDbInstance(input: shapes.RdsAddRoleToDbInstanceMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addRoleToDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddRoleToDBInstance'),
        parameters: {
          DBInstanceIdentifier: input.dbInstanceIdentifier,
          RoleArn: input.roleArn,
          FeatureName: input.featureName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddRoleToDBInstance', props);
  }

  public addSourceIdentifierToSubscription(input: shapes.RdsAddSourceIdentifierToSubscriptionMessage): RDSResponsesAddSourceIdentifierToSubscription {
    return new RDSResponsesAddSourceIdentifierToSubscription(this, this.__resources, input);
  }

  public addTagsToResource(input: shapes.RdsAddTagsToResourceMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addTagsToResource',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddTagsToResource'),
        parameters: {
          ResourceName: input.resourceName,
          Tags: input.tags,
        },
      },
    };
    new cr.AwsCustomResource(this, 'AddTagsToResource', props);
  }

  public applyPendingMaintenanceAction(input: shapes.RdsApplyPendingMaintenanceActionMessage): RDSResponsesApplyPendingMaintenanceAction {
    return new RDSResponsesApplyPendingMaintenanceAction(this, this.__resources, input);
  }

  public authorizeDbSecurityGroupIngress(input: shapes.RdsAuthorizeDbSecurityGroupIngressMessage): RDSResponsesAuthorizeDbSecurityGroupIngress {
    return new RDSResponsesAuthorizeDbSecurityGroupIngress(this, this.__resources, input);
  }

  public backtrackDbCluster(input: shapes.RdsBacktrackDbClusterMessage): RDSResponsesBacktrackDbCluster {
    return new RDSResponsesBacktrackDbCluster(this, this.__resources, input);
  }

  public cancelExportTask(input: shapes.RdsCancelExportTaskMessage): RDSResponsesCancelExportTask {
    return new RDSResponsesCancelExportTask(this, this.__resources, input);
  }

  public copyDbClusterParameterGroup(input: shapes.RdsCopyDbClusterParameterGroupMessage): RDSResponsesCopyDbClusterParameterGroup {
    return new RDSResponsesCopyDbClusterParameterGroup(this, this.__resources, input);
  }

  public copyDbClusterSnapshot(input: shapes.RdsCopyDbClusterSnapshotMessage): RDSResponsesCopyDbClusterSnapshot {
    return new RDSResponsesCopyDbClusterSnapshot(this, this.__resources, input);
  }

  public copyDbParameterGroup(input: shapes.RdsCopyDbParameterGroupMessage): RDSResponsesCopyDbParameterGroup {
    return new RDSResponsesCopyDbParameterGroup(this, this.__resources, input);
  }

  public copyDbSnapshot(input: shapes.RdsCopyDbSnapshotMessage): RDSResponsesCopyDbSnapshot {
    return new RDSResponsesCopyDbSnapshot(this, this.__resources, input);
  }

  public copyOptionGroup(input: shapes.RdsCopyOptionGroupMessage): RDSResponsesCopyOptionGroup {
    return new RDSResponsesCopyOptionGroup(this, this.__resources, input);
  }

  public createCustomAvailabilityZone(input: shapes.RdsCreateCustomAvailabilityZoneMessage): RDSResponsesCreateCustomAvailabilityZone {
    return new RDSResponsesCreateCustomAvailabilityZone(this, this.__resources, input);
  }

  public createDbCluster(input: shapes.RdsCreateDbClusterMessage): RDSResponsesCreateDbCluster {
    return new RDSResponsesCreateDbCluster(this, this.__resources, input);
  }

  public createDbClusterEndpoint(input: shapes.RdsCreateDbClusterEndpointMessage): RDSResponsesCreateDbClusterEndpoint {
    return new RDSResponsesCreateDbClusterEndpoint(this, this.__resources, input);
  }

  public createDbClusterParameterGroup(input: shapes.RdsCreateDbClusterParameterGroupMessage): RDSResponsesCreateDbClusterParameterGroup {
    return new RDSResponsesCreateDbClusterParameterGroup(this, this.__resources, input);
  }

  public createDbClusterSnapshot(input: shapes.RdsCreateDbClusterSnapshotMessage): RDSResponsesCreateDbClusterSnapshot {
    return new RDSResponsesCreateDbClusterSnapshot(this, this.__resources, input);
  }

  public createDbInstance(input: shapes.RdsCreateDbInstanceMessage): RDSResponsesCreateDbInstance {
    return new RDSResponsesCreateDbInstance(this, this.__resources, input);
  }

  public createDbInstanceReadReplica(input: shapes.RdsCreateDbInstanceReadReplicaMessage): RDSResponsesCreateDbInstanceReadReplica {
    return new RDSResponsesCreateDbInstanceReadReplica(this, this.__resources, input);
  }

  public createDbParameterGroup(input: shapes.RdsCreateDbParameterGroupMessage): RDSResponsesCreateDbParameterGroup {
    return new RDSResponsesCreateDbParameterGroup(this, this.__resources, input);
  }

  public createDbProxy(input: shapes.RdsCreateDbProxyRequest): RDSResponsesCreateDbProxy {
    return new RDSResponsesCreateDbProxy(this, this.__resources, input);
  }

  public createDbSecurityGroup(input: shapes.RdsCreateDbSecurityGroupMessage): RDSResponsesCreateDbSecurityGroup {
    return new RDSResponsesCreateDbSecurityGroup(this, this.__resources, input);
  }

  public createDbSnapshot(input: shapes.RdsCreateDbSnapshotMessage): RDSResponsesCreateDbSnapshot {
    return new RDSResponsesCreateDbSnapshot(this, this.__resources, input);
  }

  public createDbSubnetGroup(input: shapes.RdsCreateDbSubnetGroupMessage): RDSResponsesCreateDbSubnetGroup {
    return new RDSResponsesCreateDbSubnetGroup(this, this.__resources, input);
  }

  public createEventSubscription(input: shapes.RdsCreateEventSubscriptionMessage): RDSResponsesCreateEventSubscription {
    return new RDSResponsesCreateEventSubscription(this, this.__resources, input);
  }

  public createGlobalCluster(input: shapes.RdsCreateGlobalClusterMessage): RDSResponsesCreateGlobalCluster {
    return new RDSResponsesCreateGlobalCluster(this, this.__resources, input);
  }

  public createOptionGroup(input: shapes.RdsCreateOptionGroupMessage): RDSResponsesCreateOptionGroup {
    return new RDSResponsesCreateOptionGroup(this, this.__resources, input);
  }

  public deleteCustomAvailabilityZone(input: shapes.RdsDeleteCustomAvailabilityZoneMessage): RDSResponsesDeleteCustomAvailabilityZone {
    return new RDSResponsesDeleteCustomAvailabilityZone(this, this.__resources, input);
  }

  public deleteDbCluster(input: shapes.RdsDeleteDbClusterMessage): RDSResponsesDeleteDbCluster {
    return new RDSResponsesDeleteDbCluster(this, this.__resources, input);
  }

  public deleteDbClusterEndpoint(input: shapes.RdsDeleteDbClusterEndpointMessage): RDSResponsesDeleteDbClusterEndpoint {
    return new RDSResponsesDeleteDbClusterEndpoint(this, this.__resources, input);
  }

  public deleteDbClusterParameterGroup(input: shapes.RdsDeleteDbClusterParameterGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterParameterGroup'),
        parameters: {
          DBClusterParameterGroupName: input.dbClusterParameterGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBClusterParameterGroup', props);
  }

  public deleteDbClusterSnapshot(input: shapes.RdsDeleteDbClusterSnapshotMessage): RDSResponsesDeleteDbClusterSnapshot {
    return new RDSResponsesDeleteDbClusterSnapshot(this, this.__resources, input);
  }

  public deleteDbInstance(input: shapes.RdsDeleteDbInstanceMessage): RDSResponsesDeleteDbInstance {
    return new RDSResponsesDeleteDbInstance(this, this.__resources, input);
  }

  public deleteDbInstanceAutomatedBackup(input: shapes.RdsDeleteDbInstanceAutomatedBackupMessage): RDSResponsesDeleteDbInstanceAutomatedBackup {
    return new RDSResponsesDeleteDbInstanceAutomatedBackup(this, this.__resources, input);
  }

  public deleteDbParameterGroup(input: shapes.RdsDeleteDbParameterGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBParameterGroup'),
        parameters: {
          DBParameterGroupName: input.dbParameterGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBParameterGroup', props);
  }

  public deleteDbProxy(input: shapes.RdsDeleteDbProxyRequest): RDSResponsesDeleteDbProxy {
    return new RDSResponsesDeleteDbProxy(this, this.__resources, input);
  }

  public deleteDbSecurityGroup(input: shapes.RdsDeleteDbSecurityGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSecurityGroup'),
        parameters: {
          DBSecurityGroupName: input.dbSecurityGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBSecurityGroup', props);
  }

  public deleteDbSnapshot(input: shapes.RdsDeleteDbSnapshotMessage): RDSResponsesDeleteDbSnapshot {
    return new RDSResponsesDeleteDbSnapshot(this, this.__resources, input);
  }

  public deleteDbSubnetGroup(input: shapes.RdsDeleteDbSubnetGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSubnetGroup'),
        parameters: {
          DBSubnetGroupName: input.dbSubnetGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteDBSubnetGroup', props);
  }

  public deleteEventSubscription(input: shapes.RdsDeleteEventSubscriptionMessage): RDSResponsesDeleteEventSubscription {
    return new RDSResponsesDeleteEventSubscription(this, this.__resources, input);
  }

  public deleteGlobalCluster(input: shapes.RdsDeleteGlobalClusterMessage): RDSResponsesDeleteGlobalCluster {
    return new RDSResponsesDeleteGlobalCluster(this, this.__resources, input);
  }

  public deleteInstallationMedia(input: shapes.RdsDeleteInstallationMediaMessage): RDSResponsesDeleteInstallationMedia {
    return new RDSResponsesDeleteInstallationMedia(this, this.__resources, input);
  }

  public deleteOptionGroup(input: shapes.RdsDeleteOptionGroupMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteOptionGroup'),
        parameters: {
          OptionGroupName: input.optionGroupName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeleteOptionGroup', props);
  }

  public deregisterDbProxyTargets(input: shapes.RdsDeregisterDbProxyTargetsRequest): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deregisterDbProxyTargets',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeregisterDBProxyTargets'),
        parameters: {
          DBProxyName: input.dbProxyName,
          TargetGroupName: input.targetGroupName,
          DBInstanceIdentifiers: input.dbInstanceIdentifiers,
          DBClusterIdentifiers: input.dbClusterIdentifiers,
        },
      },
    };
    new cr.AwsCustomResource(this, 'DeregisterDBProxyTargets', props);
  }

  public describeAccountAttributes(): RDSResponsesDescribeAccountAttributes {
    return new RDSResponsesDescribeAccountAttributes(this, this.__resources);
  }

  public describeCertificates(input: shapes.RdsDescribeCertificatesMessage): RDSResponsesDescribeCertificates {
    return new RDSResponsesDescribeCertificates(this, this.__resources, input);
  }

  public describeCustomAvailabilityZones(input: shapes.RdsDescribeCustomAvailabilityZonesMessage): RDSResponsesDescribeCustomAvailabilityZones {
    return new RDSResponsesDescribeCustomAvailabilityZones(this, this.__resources, input);
  }

  public describeDbClusterBacktracks(input: shapes.RdsDescribeDbClusterBacktracksMessage): RDSResponsesDescribeDbClusterBacktracks {
    return new RDSResponsesDescribeDbClusterBacktracks(this, this.__resources, input);
  }

  public describeDbClusterEndpoints(input: shapes.RdsDescribeDbClusterEndpointsMessage): RDSResponsesDescribeDbClusterEndpoints {
    return new RDSResponsesDescribeDbClusterEndpoints(this, this.__resources, input);
  }

  public describeDbClusterParameterGroups(input: shapes.RdsDescribeDbClusterParameterGroupsMessage): RDSResponsesDescribeDbClusterParameterGroups {
    return new RDSResponsesDescribeDbClusterParameterGroups(this, this.__resources, input);
  }

  public describeDbClusterParameters(input: shapes.RdsDescribeDbClusterParametersMessage): RDSResponsesDescribeDbClusterParameters {
    return new RDSResponsesDescribeDbClusterParameters(this, this.__resources, input);
  }

  public describeDbClusterSnapshotAttributes(input: shapes.RdsDescribeDbClusterSnapshotAttributesMessage): RDSResponsesDescribeDbClusterSnapshotAttributes {
    return new RDSResponsesDescribeDbClusterSnapshotAttributes(this, this.__resources, input);
  }

  public describeDbClusterSnapshots(input: shapes.RdsDescribeDbClusterSnapshotsMessage): RDSResponsesDescribeDbClusterSnapshots {
    return new RDSResponsesDescribeDbClusterSnapshots(this, this.__resources, input);
  }

  public describeDbClusters(input: shapes.RdsDescribeDbClustersMessage): RDSResponsesDescribeDbClusters {
    return new RDSResponsesDescribeDbClusters(this, this.__resources, input);
  }

  public describeDbEngineVersions(input: shapes.RdsDescribeDbEngineVersionsMessage): RDSResponsesDescribeDbEngineVersions {
    return new RDSResponsesDescribeDbEngineVersions(this, this.__resources, input);
  }

  public describeDbInstanceAutomatedBackups(input: shapes.RdsDescribeDbInstanceAutomatedBackupsMessage): RDSResponsesDescribeDbInstanceAutomatedBackups {
    return new RDSResponsesDescribeDbInstanceAutomatedBackups(this, this.__resources, input);
  }

  public describeDbInstances(input: shapes.RdsDescribeDbInstancesMessage): RDSResponsesDescribeDbInstances {
    return new RDSResponsesDescribeDbInstances(this, this.__resources, input);
  }

  public describeDbLogFiles(input: shapes.RdsDescribeDbLogFilesMessage): RDSResponsesDescribeDbLogFiles {
    return new RDSResponsesDescribeDbLogFiles(this, this.__resources, input);
  }

  public describeDbParameterGroups(input: shapes.RdsDescribeDbParameterGroupsMessage): RDSResponsesDescribeDbParameterGroups {
    return new RDSResponsesDescribeDbParameterGroups(this, this.__resources, input);
  }

  public describeDbParameters(input: shapes.RdsDescribeDbParametersMessage): RDSResponsesDescribeDbParameters {
    return new RDSResponsesDescribeDbParameters(this, this.__resources, input);
  }

  public describeDbProxies(input: shapes.RdsDescribeDbProxiesRequest): RDSResponsesDescribeDbProxies {
    return new RDSResponsesDescribeDbProxies(this, this.__resources, input);
  }

  public describeDbProxyTargetGroups(input: shapes.RdsDescribeDbProxyTargetGroupsRequest): RDSResponsesDescribeDbProxyTargetGroups {
    return new RDSResponsesDescribeDbProxyTargetGroups(this, this.__resources, input);
  }

  public describeDbProxyTargets(input: shapes.RdsDescribeDbProxyTargetsRequest): RDSResponsesDescribeDbProxyTargets {
    return new RDSResponsesDescribeDbProxyTargets(this, this.__resources, input);
  }

  public describeDbSecurityGroups(input: shapes.RdsDescribeDbSecurityGroupsMessage): RDSResponsesDescribeDbSecurityGroups {
    return new RDSResponsesDescribeDbSecurityGroups(this, this.__resources, input);
  }

  public describeDbSnapshotAttributes(input: shapes.RdsDescribeDbSnapshotAttributesMessage): RDSResponsesDescribeDbSnapshotAttributes {
    return new RDSResponsesDescribeDbSnapshotAttributes(this, this.__resources, input);
  }

  public describeDbSnapshots(input: shapes.RdsDescribeDbSnapshotsMessage): RDSResponsesDescribeDbSnapshots {
    return new RDSResponsesDescribeDbSnapshots(this, this.__resources, input);
  }

  public describeDbSubnetGroups(input: shapes.RdsDescribeDbSubnetGroupsMessage): RDSResponsesDescribeDbSubnetGroups {
    return new RDSResponsesDescribeDbSubnetGroups(this, this.__resources, input);
  }

  public describeEngineDefaultClusterParameters(input: shapes.RdsDescribeEngineDefaultClusterParametersMessage): RDSResponsesDescribeEngineDefaultClusterParameters {
    return new RDSResponsesDescribeEngineDefaultClusterParameters(this, this.__resources, input);
  }

  public describeEngineDefaultParameters(input: shapes.RdsDescribeEngineDefaultParametersMessage): RDSResponsesDescribeEngineDefaultParameters {
    return new RDSResponsesDescribeEngineDefaultParameters(this, this.__resources, input);
  }

  public describeEventCategories(input: shapes.RdsDescribeEventCategoriesMessage): RDSResponsesDescribeEventCategories {
    return new RDSResponsesDescribeEventCategories(this, this.__resources, input);
  }

  public describeEventSubscriptions(input: shapes.RdsDescribeEventSubscriptionsMessage): RDSResponsesDescribeEventSubscriptions {
    return new RDSResponsesDescribeEventSubscriptions(this, this.__resources, input);
  }

  public describeEvents(input: shapes.RdsDescribeEventsMessage): RDSResponsesDescribeEvents {
    return new RDSResponsesDescribeEvents(this, this.__resources, input);
  }

  public describeExportTasks(input: shapes.RdsDescribeExportTasksMessage): RDSResponsesDescribeExportTasks {
    return new RDSResponsesDescribeExportTasks(this, this.__resources, input);
  }

  public describeGlobalClusters(input: shapes.RdsDescribeGlobalClustersMessage): RDSResponsesDescribeGlobalClusters {
    return new RDSResponsesDescribeGlobalClusters(this, this.__resources, input);
  }

  public describeInstallationMedia(input: shapes.RdsDescribeInstallationMediaMessage): RDSResponsesDescribeInstallationMedia {
    return new RDSResponsesDescribeInstallationMedia(this, this.__resources, input);
  }

  public describeOptionGroupOptions(input: shapes.RdsDescribeOptionGroupOptionsMessage): RDSResponsesDescribeOptionGroupOptions {
    return new RDSResponsesDescribeOptionGroupOptions(this, this.__resources, input);
  }

  public describeOptionGroups(input: shapes.RdsDescribeOptionGroupsMessage): RDSResponsesDescribeOptionGroups {
    return new RDSResponsesDescribeOptionGroups(this, this.__resources, input);
  }

  public describeOrderableDbInstanceOptions(input: shapes.RdsDescribeOrderableDbInstanceOptionsMessage): RDSResponsesDescribeOrderableDbInstanceOptions {
    return new RDSResponsesDescribeOrderableDbInstanceOptions(this, this.__resources, input);
  }

  public describePendingMaintenanceActions(input: shapes.RdsDescribePendingMaintenanceActionsMessage): RDSResponsesDescribePendingMaintenanceActions {
    return new RDSResponsesDescribePendingMaintenanceActions(this, this.__resources, input);
  }

  public describeReservedDbInstances(input: shapes.RdsDescribeReservedDbInstancesMessage): RDSResponsesDescribeReservedDbInstances {
    return new RDSResponsesDescribeReservedDbInstances(this, this.__resources, input);
  }

  public describeReservedDbInstancesOfferings(input: shapes.RdsDescribeReservedDbInstancesOfferingsMessage): RDSResponsesDescribeReservedDbInstancesOfferings {
    return new RDSResponsesDescribeReservedDbInstancesOfferings(this, this.__resources, input);
  }

  public describeSourceRegions(input: shapes.RdsDescribeSourceRegionsMessage): RDSResponsesDescribeSourceRegions {
    return new RDSResponsesDescribeSourceRegions(this, this.__resources, input);
  }

  public describeValidDbInstanceModifications(input: shapes.RdsDescribeValidDbInstanceModificationsMessage): RDSResponsesDescribeValidDbInstanceModifications {
    return new RDSResponsesDescribeValidDbInstanceModifications(this, this.__resources, input);
  }

  public downloadDbLogFilePortion(input: shapes.RdsDownloadDbLogFilePortionMessage): RDSResponsesDownloadDbLogFilePortion {
    return new RDSResponsesDownloadDbLogFilePortion(this, this.__resources, input);
  }

  public failoverDbCluster(input: shapes.RdsFailoverDbClusterMessage): RDSResponsesFailoverDbCluster {
    return new RDSResponsesFailoverDbCluster(this, this.__resources, input);
  }

  public importInstallationMedia(input: shapes.RdsImportInstallationMediaMessage): RDSResponsesImportInstallationMedia {
    return new RDSResponsesImportInstallationMedia(this, this.__resources, input);
  }

  public listTagsForResource(input: shapes.RdsListTagsForResourceMessage): RDSResponsesListTagsForResource {
    return new RDSResponsesListTagsForResource(this, this.__resources, input);
  }

  public modifyCertificates(input: shapes.RdsModifyCertificatesMessage): RDSResponsesModifyCertificates {
    return new RDSResponsesModifyCertificates(this, this.__resources, input);
  }

  public modifyCurrentDbClusterCapacity(input: shapes.RdsModifyCurrentDbClusterCapacityMessage): RDSResponsesModifyCurrentDbClusterCapacity {
    return new RDSResponsesModifyCurrentDbClusterCapacity(this, this.__resources, input);
  }

  public modifyDbCluster(input: shapes.RdsModifyDbClusterMessage): RDSResponsesModifyDbCluster {
    return new RDSResponsesModifyDbCluster(this, this.__resources, input);
  }

  public modifyDbClusterEndpoint(input: shapes.RdsModifyDbClusterEndpointMessage): RDSResponsesModifyDbClusterEndpoint {
    return new RDSResponsesModifyDbClusterEndpoint(this, this.__resources, input);
  }

  public modifyDbClusterParameterGroup(input: shapes.RdsModifyDbClusterParameterGroupMessage): RDSResponsesModifyDbClusterParameterGroup {
    return new RDSResponsesModifyDbClusterParameterGroup(this, this.__resources, input);
  }

  public modifyDbClusterSnapshotAttribute(input: shapes.RdsModifyDbClusterSnapshotAttributeMessage): RDSResponsesModifyDbClusterSnapshotAttribute {
    return new RDSResponsesModifyDbClusterSnapshotAttribute(this, this.__resources, input);
  }

  public modifyDbInstance(input: shapes.RdsModifyDbInstanceMessage): RDSResponsesModifyDbInstance {
    return new RDSResponsesModifyDbInstance(this, this.__resources, input);
  }

  public modifyDbParameterGroup(input: shapes.RdsModifyDbParameterGroupMessage): RDSResponsesModifyDbParameterGroup {
    return new RDSResponsesModifyDbParameterGroup(this, this.__resources, input);
  }

  public modifyDbProxy(input: shapes.RdsModifyDbProxyRequest): RDSResponsesModifyDbProxy {
    return new RDSResponsesModifyDbProxy(this, this.__resources, input);
  }

  public modifyDbProxyTargetGroup(input: shapes.RdsModifyDbProxyTargetGroupRequest): RDSResponsesModifyDbProxyTargetGroup {
    return new RDSResponsesModifyDbProxyTargetGroup(this, this.__resources, input);
  }

  public modifyDbSnapshot(input: shapes.RdsModifyDbSnapshotMessage): RDSResponsesModifyDbSnapshot {
    return new RDSResponsesModifyDbSnapshot(this, this.__resources, input);
  }

  public modifyDbSnapshotAttribute(input: shapes.RdsModifyDbSnapshotAttributeMessage): RDSResponsesModifyDbSnapshotAttribute {
    return new RDSResponsesModifyDbSnapshotAttribute(this, this.__resources, input);
  }

  public modifyDbSubnetGroup(input: shapes.RdsModifyDbSubnetGroupMessage): RDSResponsesModifyDbSubnetGroup {
    return new RDSResponsesModifyDbSubnetGroup(this, this.__resources, input);
  }

  public modifyEventSubscription(input: shapes.RdsModifyEventSubscriptionMessage): RDSResponsesModifyEventSubscription {
    return new RDSResponsesModifyEventSubscription(this, this.__resources, input);
  }

  public modifyGlobalCluster(input: shapes.RdsModifyGlobalClusterMessage): RDSResponsesModifyGlobalCluster {
    return new RDSResponsesModifyGlobalCluster(this, this.__resources, input);
  }

  public modifyOptionGroup(input: shapes.RdsModifyOptionGroupMessage): RDSResponsesModifyOptionGroup {
    return new RDSResponsesModifyOptionGroup(this, this.__resources, input);
  }

  public promoteReadReplica(input: shapes.RdsPromoteReadReplicaMessage): RDSResponsesPromoteReadReplica {
    return new RDSResponsesPromoteReadReplica(this, this.__resources, input);
  }

  public promoteReadReplicaDbCluster(input: shapes.RdsPromoteReadReplicaDbClusterMessage): RDSResponsesPromoteReadReplicaDbCluster {
    return new RDSResponsesPromoteReadReplicaDbCluster(this, this.__resources, input);
  }

  public purchaseReservedDbInstancesOffering(input: shapes.RdsPurchaseReservedDbInstancesOfferingMessage): RDSResponsesPurchaseReservedDbInstancesOffering {
    return new RDSResponsesPurchaseReservedDbInstancesOffering(this, this.__resources, input);
  }

  public rebootDbInstance(input: shapes.RdsRebootDbInstanceMessage): RDSResponsesRebootDbInstance {
    return new RDSResponsesRebootDbInstance(this, this.__resources, input);
  }

  public registerDbProxyTargets(input: shapes.RdsRegisterDbProxyTargetsRequest): RDSResponsesRegisterDbProxyTargets {
    return new RDSResponsesRegisterDbProxyTargets(this, this.__resources, input);
  }

  public removeFromGlobalCluster(input: shapes.RdsRemoveFromGlobalClusterMessage): RDSResponsesRemoveFromGlobalCluster {
    return new RDSResponsesRemoveFromGlobalCluster(this, this.__resources, input);
  }

  public removeRoleFromDbCluster(input: shapes.RdsRemoveRoleFromDbClusterMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeRoleFromDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveRoleFromDBCluster'),
        parameters: {
          DBClusterIdentifier: input.dbClusterIdentifier,
          RoleArn: input.roleArn,
          FeatureName: input.featureName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveRoleFromDBCluster', props);
  }

  public removeRoleFromDbInstance(input: shapes.RdsRemoveRoleFromDbInstanceMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeRoleFromDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveRoleFromDBInstance'),
        parameters: {
          DBInstanceIdentifier: input.dbInstanceIdentifier,
          RoleArn: input.roleArn,
          FeatureName: input.featureName,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveRoleFromDBInstance', props);
  }

  public removeSourceIdentifierFromSubscription(input: shapes.RdsRemoveSourceIdentifierFromSubscriptionMessage): RDSResponsesRemoveSourceIdentifierFromSubscription {
    return new RDSResponsesRemoveSourceIdentifierFromSubscription(this, this.__resources, input);
  }

  public removeTagsFromResource(input: shapes.RdsRemoveTagsFromResourceMessage): void {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeTagsFromResource',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveTagsFromResource'),
        parameters: {
          ResourceName: input.resourceName,
          TagKeys: input.tagKeys,
        },
      },
    };
    new cr.AwsCustomResource(this, 'RemoveTagsFromResource', props);
  }

  public resetDbClusterParameterGroup(input: shapes.RdsResetDbClusterParameterGroupMessage): RDSResponsesResetDbClusterParameterGroup {
    return new RDSResponsesResetDbClusterParameterGroup(this, this.__resources, input);
  }

  public resetDbParameterGroup(input: shapes.RdsResetDbParameterGroupMessage): RDSResponsesResetDbParameterGroup {
    return new RDSResponsesResetDbParameterGroup(this, this.__resources, input);
  }

  public restoreDbClusterFromS3(input: shapes.RdsRestoreDbClusterFromS3Message): RDSResponsesRestoreDbClusterFromS3 {
    return new RDSResponsesRestoreDbClusterFromS3(this, this.__resources, input);
  }

  public restoreDbClusterFromSnapshot(input: shapes.RdsRestoreDbClusterFromSnapshotMessage): RDSResponsesRestoreDbClusterFromSnapshot {
    return new RDSResponsesRestoreDbClusterFromSnapshot(this, this.__resources, input);
  }

  public restoreDbClusterToPointInTime(input: shapes.RdsRestoreDbClusterToPointInTimeMessage): RDSResponsesRestoreDbClusterToPointInTime {
    return new RDSResponsesRestoreDbClusterToPointInTime(this, this.__resources, input);
  }

  public restoreDbInstanceFromDbSnapshot(input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage): RDSResponsesRestoreDbInstanceFromDbSnapshot {
    return new RDSResponsesRestoreDbInstanceFromDbSnapshot(this, this.__resources, input);
  }

  public restoreDbInstanceFromS3(input: shapes.RdsRestoreDbInstanceFromS3Message): RDSResponsesRestoreDbInstanceFromS3 {
    return new RDSResponsesRestoreDbInstanceFromS3(this, this.__resources, input);
  }

  public restoreDbInstanceToPointInTime(input: shapes.RdsRestoreDbInstanceToPointInTimeMessage): RDSResponsesRestoreDbInstanceToPointInTime {
    return new RDSResponsesRestoreDbInstanceToPointInTime(this, this.__resources, input);
  }

  public revokeDbSecurityGroupIngress(input: shapes.RdsRevokeDbSecurityGroupIngressMessage): RDSResponsesRevokeDbSecurityGroupIngress {
    return new RDSResponsesRevokeDbSecurityGroupIngress(this, this.__resources, input);
  }

  public startActivityStream(input: shapes.RdsStartActivityStreamRequest): RDSResponsesStartActivityStream {
    return new RDSResponsesStartActivityStream(this, this.__resources, input);
  }

  public startDbCluster(input: shapes.RdsStartDbClusterMessage): RDSResponsesStartDbCluster {
    return new RDSResponsesStartDbCluster(this, this.__resources, input);
  }

  public startDbInstance(input: shapes.RdsStartDbInstanceMessage): RDSResponsesStartDbInstance {
    return new RDSResponsesStartDbInstance(this, this.__resources, input);
  }

  public startExportTask(input: shapes.RdsStartExportTaskMessage): RDSResponsesStartExportTask {
    return new RDSResponsesStartExportTask(this, this.__resources, input);
  }

  public stopActivityStream(input: shapes.RdsStopActivityStreamRequest): RDSResponsesStopActivityStream {
    return new RDSResponsesStopActivityStream(this, this.__resources, input);
  }

  public stopDbCluster(input: shapes.RdsStopDbClusterMessage): RDSResponsesStopDbCluster {
    return new RDSResponsesStopDbCluster(this, this.__resources, input);
  }

  public stopDbInstance(input: shapes.RdsStopDbInstanceMessage): RDSResponsesStopDbInstance {
    return new RDSResponsesStopDbInstance(this, this.__resources, input);
  }

}

export class RDSResponsesAddSourceIdentifierToSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsAddSourceIdentifierToSubscriptionMessage) {
  }

  public get eventSubscription(): RDSResponsesAddSourceIdentifierToSubscriptionEventSubscription {
    return new RDSResponsesAddSourceIdentifierToSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesAddSourceIdentifierToSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsAddSourceIdentifierToSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'addSourceIdentifierToSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AddSourceIdentifierToSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AddSourceIdentifierToSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class RDSResponsesApplyPendingMaintenanceAction {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsApplyPendingMaintenanceActionMessage) {
  }

  public get resourcePendingMaintenanceActions(): RDSResponsesApplyPendingMaintenanceActionResourcePendingMaintenanceActions {
    return new RDSResponsesApplyPendingMaintenanceActionResourcePendingMaintenanceActions(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesApplyPendingMaintenanceActionResourcePendingMaintenanceActions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsApplyPendingMaintenanceActionMessage) {
  }

  public get resourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'applyPendingMaintenanceAction',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.ResourceIdentifier'),
        outputPath: 'ResourcePendingMaintenanceActions.ResourceIdentifier',
        parameters: {
          ResourceIdentifier: this.__input.resourceIdentifier,
          ApplyAction: this.__input.applyAction,
          OptInType: this.__input.optInType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.ResourceIdentifier', props);
    return resource.getResponseField('ResourcePendingMaintenanceActions.ResourceIdentifier') as unknown as string;
  }

  public get pendingMaintenanceActionDetails(): shapes.RdsPendingMaintenanceAction[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'applyPendingMaintenanceAction',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails'),
        outputPath: 'ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails',
        parameters: {
          ResourceIdentifier: this.__input.resourceIdentifier,
          ApplyAction: this.__input.applyAction,
          OptInType: this.__input.optInType,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ApplyPendingMaintenanceAction.ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails', props);
    return resource.getResponseField('ResourcePendingMaintenanceActions.PendingMaintenanceActionDetails') as unknown as shapes.RdsPendingMaintenanceAction[];
  }

}

export class RDSResponsesAuthorizeDbSecurityGroupIngress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsAuthorizeDbSecurityGroupIngressMessage) {
  }

  public get dbSecurityGroup(): RDSResponsesAuthorizeDbSecurityGroupIngressDbSecurityGroup {
    return new RDSResponsesAuthorizeDbSecurityGroupIngressDbSecurityGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesAuthorizeDbSecurityGroupIngressDbSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsAuthorizeDbSecurityGroupIngressMessage) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.OwnerId'),
        outputPath: 'DBSecurityGroup.OwnerId',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.OwnerId', props);
    return resource.getResponseField('DBSecurityGroup.OwnerId') as unknown as string;
  }

  public get dbSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupName'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupName',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupName', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupName') as unknown as string;
  }

  public get dbSecurityGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupDescription'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupDescription',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupDescription', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.VpcId'),
        outputPath: 'DBSecurityGroup.VpcId',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.VpcId', props);
    return resource.getResponseField('DBSecurityGroup.VpcId') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.Rdsec2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.EC2SecurityGroups'),
        outputPath: 'DBSecurityGroup.EC2SecurityGroups',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('DBSecurityGroup.EC2SecurityGroups') as unknown as shapes.Rdsec2SecurityGroup[];
  }

  public get ipRanges(): shapes.RdsipRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.IPRanges'),
        outputPath: 'DBSecurityGroup.IPRanges',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.IPRanges', props);
    return resource.getResponseField('DBSecurityGroup.IPRanges') as unknown as shapes.RdsipRange[];
  }

  public get dbSecurityGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'authorizeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupArn'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupArn',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'AuthorizeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupArn', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupArn') as unknown as string;
  }

}

export class RDSResponsesBacktrackDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsBacktrackDbClusterMessage) {
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          BacktrackTo: this.__input.backtrackTo,
          Force: this.__input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.__input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BacktrackDBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get backtrackIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.BacktrackIdentifier'),
        outputPath: 'BacktrackIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          BacktrackTo: this.__input.backtrackTo,
          Force: this.__input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.__input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BacktrackDBCluster.BacktrackIdentifier', props);
    return resource.getResponseField('BacktrackIdentifier') as unknown as string;
  }

  public get backtrackTo(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.BacktrackTo'),
        outputPath: 'BacktrackTo',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          BacktrackTo: this.__input.backtrackTo,
          Force: this.__input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.__input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BacktrackDBCluster.BacktrackTo', props);
    return resource.getResponseField('BacktrackTo') as unknown as string;
  }

  public get backtrackedFrom(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.BacktrackedFrom'),
        outputPath: 'BacktrackedFrom',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          BacktrackTo: this.__input.backtrackTo,
          Force: this.__input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.__input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BacktrackDBCluster.BacktrackedFrom', props);
    return resource.getResponseField('BacktrackedFrom') as unknown as string;
  }

  public get backtrackRequestCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.BacktrackRequestCreationTime'),
        outputPath: 'BacktrackRequestCreationTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          BacktrackTo: this.__input.backtrackTo,
          Force: this.__input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.__input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BacktrackDBCluster.BacktrackRequestCreationTime', props);
    return resource.getResponseField('BacktrackRequestCreationTime') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'backtrackDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.BacktrackDBCluster.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          BacktrackTo: this.__input.backtrackTo,
          Force: this.__input.force,
          UseEarliestTimeOnPointInTimeUnavailable: this.__input.useEarliestTimeOnPointInTimeUnavailable,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'BacktrackDBCluster.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

}

export class RDSResponsesCancelExportTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCancelExportTaskMessage) {
  }

  public get exportTaskIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.ExportTaskIdentifier'),
        outputPath: 'ExportTaskIdentifier',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.ExportTaskIdentifier', props);
    return resource.getResponseField('ExportTaskIdentifier') as unknown as string;
  }

  public get sourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.SourceArn'),
        outputPath: 'SourceArn',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.SourceArn', props);
    return resource.getResponseField('SourceArn') as unknown as string;
  }

  public get exportOnly(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.ExportOnly'),
        outputPath: 'ExportOnly',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.ExportOnly', props);
    return resource.getResponseField('ExportOnly') as unknown as string[];
  }

  public get snapshotTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.SnapshotTime'),
        outputPath: 'SnapshotTime',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.SnapshotTime', props);
    return resource.getResponseField('SnapshotTime') as unknown as string;
  }

  public get taskStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.TaskStartTime'),
        outputPath: 'TaskStartTime',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.TaskStartTime', props);
    return resource.getResponseField('TaskStartTime') as unknown as string;
  }

  public get taskEndTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.TaskEndTime'),
        outputPath: 'TaskEndTime',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.TaskEndTime', props);
    return resource.getResponseField('TaskEndTime') as unknown as string;
  }

  public get s3Bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.S3Bucket'),
        outputPath: 'S3Bucket',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.S3Bucket', props);
    return resource.getResponseField('S3Bucket') as unknown as string;
  }

  public get s3Prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.S3Prefix'),
        outputPath: 'S3Prefix',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.S3Prefix', props);
    return resource.getResponseField('S3Prefix') as unknown as string;
  }

  public get iamRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.IamRoleArn'),
        outputPath: 'IamRoleArn',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.IamRoleArn', props);
    return resource.getResponseField('IamRoleArn') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.Status'),
        outputPath: 'Status',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.PercentProgress'),
        outputPath: 'PercentProgress',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.PercentProgress', props);
    return resource.getResponseField('PercentProgress') as unknown as number;
  }

  public get totalExtractedDataInGb(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.TotalExtractedDataInGB'),
        outputPath: 'TotalExtractedDataInGB',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.TotalExtractedDataInGB', props);
    return resource.getResponseField('TotalExtractedDataInGB') as unknown as number;
  }

  public get failureCause(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.FailureCause'),
        outputPath: 'FailureCause',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.FailureCause', props);
    return resource.getResponseField('FailureCause') as unknown as string;
  }

  public get warningMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'cancelExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CancelExportTask.WarningMessage'),
        outputPath: 'WarningMessage',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CancelExportTask.WarningMessage', props);
    return resource.getResponseField('WarningMessage') as unknown as string;
  }

}

export class RDSResponsesCopyDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCopyDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroup(): RDSResponsesCopyDbClusterParameterGroupDbClusterParameterGroup {
    return new RDSResponsesCopyDbClusterParameterGroupDbClusterParameterGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCopyDbClusterParameterGroupDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCopyDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupName',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.__input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.__input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.__input.targetDbClusterParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBClusterParameterGroup.DBParameterGroupFamily',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.__input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.__input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.__input.targetDbClusterParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBClusterParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterParameterGroup.DBClusterParameterGroup.Description'),
        outputPath: 'DBClusterParameterGroup.Description',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.__input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.__input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.__input.targetDbClusterParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.Description', props);
    return resource.getResponseField('DBClusterParameterGroup.Description') as unknown as string;
  }

  public get dbClusterParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupArn',
        parameters: {
          SourceDBClusterParameterGroupIdentifier: this.__input.sourceDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupIdentifier: this.__input.targetDbClusterParameterGroupIdentifier,
          TargetDBClusterParameterGroupDescription: this.__input.targetDbClusterParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupArn') as unknown as string;
  }

}

export class RDSResponsesCopyDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCopyDbClusterSnapshotMessage) {
  }

  public get dbClusterSnapshot(): RDSResponsesCopyDbClusterSnapshotDbClusterSnapshot {
    return new RDSResponsesCopyDbClusterSnapshotDbClusterSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCopyDbClusterSnapshotDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCopyDbClusterSnapshotMessage) {
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones'),
        outputPath: 'DBClusterSnapshot.AvailabilityZones',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones', props);
    return resource.getResponseField('DBClusterSnapshot.AvailabilityZones') as unknown as string[];
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotIdentifier',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterIdentifier',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime'),
        outputPath: 'DBClusterSnapshot.SnapshotCreateTime',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.Engine'),
        outputPath: 'DBClusterSnapshot.Engine',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.Engine', props);
    return resource.getResponseField('DBClusterSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage'),
        outputPath: 'DBClusterSnapshot.AllocatedStorage',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBClusterSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.Status'),
        outputPath: 'DBClusterSnapshot.Status',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.Status', props);
    return resource.getResponseField('DBClusterSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.Port'),
        outputPath: 'DBClusterSnapshot.Port',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.Port', props);
    return resource.getResponseField('DBClusterSnapshot.Port') as unknown as number;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.VpcId'),
        outputPath: 'DBClusterSnapshot.VpcId',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.VpcId', props);
    return resource.getResponseField('DBClusterSnapshot.VpcId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime'),
        outputPath: 'DBClusterSnapshot.ClusterCreateTime',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.MasterUsername'),
        outputPath: 'DBClusterSnapshot.MasterUsername',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.MasterUsername', props);
    return resource.getResponseField('DBClusterSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.EngineVersion'),
        outputPath: 'DBClusterSnapshot.EngineVersion',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.EngineVersion', props);
    return resource.getResponseField('DBClusterSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.LicenseModel'),
        outputPath: 'DBClusterSnapshot.LicenseModel',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.LicenseModel', props);
    return resource.getResponseField('DBClusterSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotType'),
        outputPath: 'DBClusterSnapshot.SnapshotType',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.SnapshotType', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotType') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.PercentProgress'),
        outputPath: 'DBClusterSnapshot.PercentProgress',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.PercentProgress', props);
    return resource.getResponseField('DBClusterSnapshot.PercentProgress') as unknown as number;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted'),
        outputPath: 'DBClusterSnapshot.StorageEncrypted',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted', props);
    return resource.getResponseField('DBClusterSnapshot.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.KmsKeyId'),
        outputPath: 'DBClusterSnapshot.KmsKeyId',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBClusterSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotArn',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotArn') as unknown as string;
  }

  public get sourceDbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.SourceDBClusterSnapshotArn',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.SourceDBClusterSnapshotArn') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBClusterSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBClusterSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBClusterSnapshot.DBClusterSnapshot.TagList'),
        outputPath: 'DBClusterSnapshot.TagList',
        parameters: {
          SourceDBClusterSnapshotIdentifier: this.__input.sourceDbClusterSnapshotIdentifier,
          TargetDBClusterSnapshotIdentifier: this.__input.targetDbClusterSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          CopyTags: this.__input.copyTags,
          Tags: this.__input.tags,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBClusterSnapshot.DBClusterSnapshot.TagList', props);
    return resource.getResponseField('DBClusterSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesCopyDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCopyDbParameterGroupMessage) {
  }

  public get dbParameterGroup(): RDSResponsesCopyDbParameterGroupDbParameterGroup {
    return new RDSResponsesCopyDbParameterGroupDbParameterGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCopyDbParameterGroupDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCopyDbParameterGroupMessage) {
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBParameterGroup.DBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroup.DBParameterGroupName',
        parameters: {
          SourceDBParameterGroupIdentifier: this.__input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.__input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.__input.targetDbParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBParameterGroup.DBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBParameterGroup.DBParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBParameterGroup.DBParameterGroupFamily',
        parameters: {
          SourceDBParameterGroupIdentifier: this.__input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.__input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.__input.targetDbParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBParameterGroup.DBParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBParameterGroup.DBParameterGroup.Description'),
        outputPath: 'DBParameterGroup.Description',
        parameters: {
          SourceDBParameterGroupIdentifier: this.__input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.__input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.__input.targetDbParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBParameterGroup.DBParameterGroup.Description', props);
    return resource.getResponseField('DBParameterGroup.Description') as unknown as string;
  }

  public get dbParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBParameterGroup.DBParameterGroup.DBParameterGroupArn'),
        outputPath: 'DBParameterGroup.DBParameterGroupArn',
        parameters: {
          SourceDBParameterGroupIdentifier: this.__input.sourceDbParameterGroupIdentifier,
          TargetDBParameterGroupIdentifier: this.__input.targetDbParameterGroupIdentifier,
          TargetDBParameterGroupDescription: this.__input.targetDbParameterGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBParameterGroup.DBParameterGroup.DBParameterGroupArn', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupArn') as unknown as string;
  }

}

export class RDSResponsesCopyDbSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCopyDbSnapshotMessage) {
  }

  public get dbSnapshot(): RDSResponsesCopyDbSnapshotDbSnapshot {
    return new RDSResponsesCopyDbSnapshotDbSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCopyDbSnapshotDbSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCopyDbSnapshotMessage) {
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.DBSnapshotIdentifier',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.DBInstanceIdentifier'),
        outputPath: 'DBSnapshot.DBInstanceIdentifier',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.DBInstanceIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBInstanceIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.SnapshotCreateTime'),
        outputPath: 'DBSnapshot.SnapshotCreateTime',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Engine'),
        outputPath: 'DBSnapshot.Engine',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.Engine', props);
    return resource.getResponseField('DBSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.AllocatedStorage'),
        outputPath: 'DBSnapshot.AllocatedStorage',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Status'),
        outputPath: 'DBSnapshot.Status',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.Status', props);
    return resource.getResponseField('DBSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Port'),
        outputPath: 'DBSnapshot.Port',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.Port', props);
    return resource.getResponseField('DBSnapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.AvailabilityZone'),
        outputPath: 'DBSnapshot.AvailabilityZone',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.AvailabilityZone', props);
    return resource.getResponseField('DBSnapshot.AvailabilityZone') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.VpcId'),
        outputPath: 'DBSnapshot.VpcId',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.VpcId', props);
    return resource.getResponseField('DBSnapshot.VpcId') as unknown as string;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.InstanceCreateTime'),
        outputPath: 'DBSnapshot.InstanceCreateTime',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.InstanceCreateTime', props);
    return resource.getResponseField('DBSnapshot.InstanceCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.MasterUsername'),
        outputPath: 'DBSnapshot.MasterUsername',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.MasterUsername', props);
    return resource.getResponseField('DBSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.EngineVersion'),
        outputPath: 'DBSnapshot.EngineVersion',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.EngineVersion', props);
    return resource.getResponseField('DBSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.LicenseModel'),
        outputPath: 'DBSnapshot.LicenseModel',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.LicenseModel', props);
    return resource.getResponseField('DBSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.SnapshotType'),
        outputPath: 'DBSnapshot.SnapshotType',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.SnapshotType', props);
    return resource.getResponseField('DBSnapshot.SnapshotType') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Iops'),
        outputPath: 'DBSnapshot.Iops',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.Iops', props);
    return resource.getResponseField('DBSnapshot.Iops') as unknown as number;
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.OptionGroupName'),
        outputPath: 'DBSnapshot.OptionGroupName',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.OptionGroupName', props);
    return resource.getResponseField('DBSnapshot.OptionGroupName') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.PercentProgress'),
        outputPath: 'DBSnapshot.PercentProgress',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.PercentProgress', props);
    return resource.getResponseField('DBSnapshot.PercentProgress') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.SourceRegion'),
        outputPath: 'DBSnapshot.SourceRegion',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.SourceRegion', props);
    return resource.getResponseField('DBSnapshot.SourceRegion') as unknown as string;
  }

  public get sourceDbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.SourceDBSnapshotIdentifier',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.SourceDBSnapshotIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.StorageType'),
        outputPath: 'DBSnapshot.StorageType',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.StorageType', props);
    return resource.getResponseField('DBSnapshot.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.TdeCredentialArn'),
        outputPath: 'DBSnapshot.TdeCredentialArn',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.TdeCredentialArn', props);
    return resource.getResponseField('DBSnapshot.TdeCredentialArn') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Encrypted'),
        outputPath: 'DBSnapshot.Encrypted',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.Encrypted', props);
    return resource.getResponseField('DBSnapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.KmsKeyId'),
        outputPath: 'DBSnapshot.KmsKeyId',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.DBSnapshotArn'),
        outputPath: 'DBSnapshot.DBSnapshotArn',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.DBSnapshotArn', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.Timezone'),
        outputPath: 'DBSnapshot.Timezone',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.Timezone', props);
    return resource.getResponseField('DBSnapshot.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.ProcessorFeatures'),
        outputPath: 'DBSnapshot.ProcessorFeatures',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.ProcessorFeatures', props);
    return resource.getResponseField('DBSnapshot.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.DbiResourceId'),
        outputPath: 'DBSnapshot.DbiResourceId',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.DbiResourceId', props);
    return resource.getResponseField('DBSnapshot.DbiResourceId') as unknown as string;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyDBSnapshot.DBSnapshot.TagList'),
        outputPath: 'DBSnapshot.TagList',
        parameters: {
          SourceDBSnapshotIdentifier: this.__input.sourceDbSnapshotIdentifier,
          TargetDBSnapshotIdentifier: this.__input.targetDbSnapshotIdentifier,
          KmsKeyId: this.__input.kmsKeyId,
          Tags: this.__input.tags,
          CopyTags: this.__input.copyTags,
          PreSignedUrl: this.__input.preSignedUrl,
          OptionGroupName: this.__input.optionGroupName,
          TargetCustomAvailabilityZone: this.__input.targetCustomAvailabilityZone,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyDBSnapshot.DBSnapshot.TagList', props);
    return resource.getResponseField('DBSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesCopyOptionGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCopyOptionGroupMessage) {
  }

  public get optionGroup(): RDSResponsesCopyOptionGroupOptionGroup {
    return new RDSResponsesCopyOptionGroupOptionGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCopyOptionGroupOptionGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCopyOptionGroupMessage) {
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.OptionGroupName'),
        outputPath: 'OptionGroup.OptionGroupName',
        parameters: {
          SourceOptionGroupIdentifier: this.__input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.__input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.__input.targetOptionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyOptionGroup.OptionGroup.OptionGroupName', props);
    return resource.getResponseField('OptionGroup.OptionGroupName') as unknown as string;
  }

  public get optionGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.OptionGroupDescription'),
        outputPath: 'OptionGroup.OptionGroupDescription',
        parameters: {
          SourceOptionGroupIdentifier: this.__input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.__input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.__input.targetOptionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyOptionGroup.OptionGroup.OptionGroupDescription', props);
    return resource.getResponseField('OptionGroup.OptionGroupDescription') as unknown as string;
  }

  public get engineName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.EngineName'),
        outputPath: 'OptionGroup.EngineName',
        parameters: {
          SourceOptionGroupIdentifier: this.__input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.__input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.__input.targetOptionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyOptionGroup.OptionGroup.EngineName', props);
    return resource.getResponseField('OptionGroup.EngineName') as unknown as string;
  }

  public get majorEngineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.MajorEngineVersion'),
        outputPath: 'OptionGroup.MajorEngineVersion',
        parameters: {
          SourceOptionGroupIdentifier: this.__input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.__input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.__input.targetOptionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyOptionGroup.OptionGroup.MajorEngineVersion', props);
    return resource.getResponseField('OptionGroup.MajorEngineVersion') as unknown as string;
  }

  public get options(): shapes.RdsOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.Options'),
        outputPath: 'OptionGroup.Options',
        parameters: {
          SourceOptionGroupIdentifier: this.__input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.__input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.__input.targetOptionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyOptionGroup.OptionGroup.Options', props);
    return resource.getResponseField('OptionGroup.Options') as unknown as shapes.RdsOption[];
  }

  public get allowsVpcAndNonVpcInstanceMemberships(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships'),
        outputPath: 'OptionGroup.AllowsVpcAndNonVpcInstanceMemberships',
        parameters: {
          SourceOptionGroupIdentifier: this.__input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.__input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.__input.targetOptionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships', props);
    return resource.getResponseField('OptionGroup.AllowsVpcAndNonVpcInstanceMemberships') as unknown as boolean;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.VpcId'),
        outputPath: 'OptionGroup.VpcId',
        parameters: {
          SourceOptionGroupIdentifier: this.__input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.__input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.__input.targetOptionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyOptionGroup.OptionGroup.VpcId', props);
    return resource.getResponseField('OptionGroup.VpcId') as unknown as string;
  }

  public get optionGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'copyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CopyOptionGroup.OptionGroup.OptionGroupArn'),
        outputPath: 'OptionGroup.OptionGroupArn',
        parameters: {
          SourceOptionGroupIdentifier: this.__input.sourceOptionGroupIdentifier,
          TargetOptionGroupIdentifier: this.__input.targetOptionGroupIdentifier,
          TargetOptionGroupDescription: this.__input.targetOptionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CopyOptionGroup.OptionGroup.OptionGroupArn', props);
    return resource.getResponseField('OptionGroup.OptionGroupArn') as unknown as string;
  }

}

export class RDSResponsesCreateCustomAvailabilityZone {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateCustomAvailabilityZoneMessage) {
  }

  public get customAvailabilityZone(): RDSResponsesCreateCustomAvailabilityZoneCustomAvailabilityZone {
    return new RDSResponsesCreateCustomAvailabilityZoneCustomAvailabilityZone(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateCustomAvailabilityZoneCustomAvailabilityZone {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateCustomAvailabilityZoneMessage) {
  }

  public get customAvailabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneId'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneId',
        parameters: {
          CustomAvailabilityZoneName: this.__input.customAvailabilityZoneName,
          ExistingVpnId: this.__input.existingVpnId,
          NewVpnTunnelName: this.__input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.__input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneId', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneId') as unknown as string;
  }

  public get customAvailabilityZoneName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneName'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneName',
        parameters: {
          CustomAvailabilityZoneName: this.__input.customAvailabilityZoneName,
          ExistingVpnId: this.__input.existingVpnId,
          NewVpnTunnelName: this.__input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.__input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneName', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneName') as unknown as string;
  }

  public get customAvailabilityZoneStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneStatus'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneStatus',
        parameters: {
          CustomAvailabilityZoneName: this.__input.customAvailabilityZoneName,
          ExistingVpnId: this.__input.existingVpnId,
          NewVpnTunnelName: this.__input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.__input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneStatus', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneStatus') as unknown as string;
  }

  public get vpnDetails(): RDSResponsesCreateCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails {
    return new RDSResponsesCreateCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateCustomAvailabilityZoneMessage) {
  }

  public get vpnId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnId'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnId',
        parameters: {
          CustomAvailabilityZoneName: this.__input.customAvailabilityZoneName,
          ExistingVpnId: this.__input.existingVpnId,
          NewVpnTunnelName: this.__input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.__input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnId', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnId') as unknown as string;
  }

  public get vpnTunnelOriginatorIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP',
        parameters: {
          CustomAvailabilityZoneName: this.__input.customAvailabilityZoneName,
          ExistingVpnId: this.__input.existingVpnId,
          NewVpnTunnelName: this.__input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.__input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP') as unknown as string;
  }

  public get vpnGatewayIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnGatewayIp'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnGatewayIp',
        parameters: {
          CustomAvailabilityZoneName: this.__input.customAvailabilityZoneName,
          ExistingVpnId: this.__input.existingVpnId,
          NewVpnTunnelName: this.__input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.__input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnGatewayIp', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnGatewayIp') as unknown as string;
  }

  public get vpnPsk(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnPSK'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnPSK',
        parameters: {
          CustomAvailabilityZoneName: this.__input.customAvailabilityZoneName,
          ExistingVpnId: this.__input.existingVpnId,
          NewVpnTunnelName: this.__input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.__input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnPSK', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnPSK') as unknown as string;
  }

  public get vpnName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnName'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnName',
        parameters: {
          CustomAvailabilityZoneName: this.__input.customAvailabilityZoneName,
          ExistingVpnId: this.__input.existingVpnId,
          NewVpnTunnelName: this.__input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.__input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnName', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnName') as unknown as string;
  }

  public get vpnState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnState'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnState',
        parameters: {
          CustomAvailabilityZoneName: this.__input.customAvailabilityZoneName,
          ExistingVpnId: this.__input.existingVpnId,
          NewVpnTunnelName: this.__input.newVpnTunnelName,
          VpnTunnelOriginatorIP: this.__input.vpnTunnelOriginatorIp,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnState', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnState') as unknown as string;
  }

}

export class RDSResponsesCreateDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbClusterMessage) {
  }

  public get dbCluster(): RDSResponsesCreateDbClusterDbCluster {
    return new RDSResponsesCreateDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSResponsesCreateDbClusterDbClusterScalingConfigurationInfo {
    return new RDSResponsesCreateDbClusterDbClusterScalingConfigurationInfo(this.__scope, this.__resources, this.__input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSResponsesCreateDbClusterDbClusterScalingConfigurationInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbClusterMessage) {
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          ReplicationSourceIdentifier: this.__input.replicationSourceIdentifier,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesCreateDbClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbClusterEndpointMessage) {
  }

  public get dbClusterEndpointIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.DBClusterEndpointIdentifier'),
        outputPath: 'DBClusterEndpointIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.DBClusterEndpointIdentifier', props);
    return resource.getResponseField('DBClusterEndpointIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterEndpointResourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.DBClusterEndpointResourceIdentifier'),
        outputPath: 'DBClusterEndpointResourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.DBClusterEndpointResourceIdentifier', props);
    return resource.getResponseField('DBClusterEndpointResourceIdentifier') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.Endpoint'),
        outputPath: 'Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.Endpoint', props);
    return resource.getResponseField('Endpoint') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get endpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.EndpointType'),
        outputPath: 'EndpointType',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.EndpointType', props);
    return resource.getResponseField('EndpointType') as unknown as string;
  }

  public get customEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.CustomEndpointType'),
        outputPath: 'CustomEndpointType',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.CustomEndpointType', props);
    return resource.getResponseField('CustomEndpointType') as unknown as string;
  }

  public get staticMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.StaticMembers'),
        outputPath: 'StaticMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.StaticMembers', props);
    return resource.getResponseField('StaticMembers') as unknown as string[];
  }

  public get excludedMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.ExcludedMembers'),
        outputPath: 'ExcludedMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.ExcludedMembers', props);
    return resource.getResponseField('ExcludedMembers') as unknown as string[];
  }

  public get dbClusterEndpointArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterEndpoint.DBClusterEndpointArn'),
        outputPath: 'DBClusterEndpointArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterEndpoint.DBClusterEndpointArn', props);
    return resource.getResponseField('DBClusterEndpointArn') as unknown as string;
  }

}

export class RDSResponsesCreateDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroup(): RDSResponsesCreateDbClusterParameterGroupDbClusterParameterGroup {
    return new RDSResponsesCreateDbClusterParameterGroupDbClusterParameterGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateDbClusterParameterGroupDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupName',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBClusterParameterGroup.DBParameterGroupFamily',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBClusterParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterParameterGroup.DBClusterParameterGroup.Description'),
        outputPath: 'DBClusterParameterGroup.Description',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.Description', props);
    return resource.getResponseField('DBClusterParameterGroup.Description') as unknown as string;
  }

  public get dbClusterParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn'),
        outputPath: 'DBClusterParameterGroup.DBClusterParameterGroupArn',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterParameterGroup.DBClusterParameterGroup.DBClusterParameterGroupArn', props);
    return resource.getResponseField('DBClusterParameterGroup.DBClusterParameterGroupArn') as unknown as string;
  }

}

export class RDSResponsesCreateDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbClusterSnapshotMessage) {
  }

  public get dbClusterSnapshot(): RDSResponsesCreateDbClusterSnapshotDbClusterSnapshot {
    return new RDSResponsesCreateDbClusterSnapshotDbClusterSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateDbClusterSnapshotDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbClusterSnapshotMessage) {
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones'),
        outputPath: 'DBClusterSnapshot.AvailabilityZones',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones', props);
    return resource.getResponseField('DBClusterSnapshot.AvailabilityZones') as unknown as string[];
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime'),
        outputPath: 'DBClusterSnapshot.SnapshotCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.Engine'),
        outputPath: 'DBClusterSnapshot.Engine',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.Engine', props);
    return resource.getResponseField('DBClusterSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage'),
        outputPath: 'DBClusterSnapshot.AllocatedStorage',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBClusterSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.Status'),
        outputPath: 'DBClusterSnapshot.Status',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.Status', props);
    return resource.getResponseField('DBClusterSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.Port'),
        outputPath: 'DBClusterSnapshot.Port',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.Port', props);
    return resource.getResponseField('DBClusterSnapshot.Port') as unknown as number;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.VpcId'),
        outputPath: 'DBClusterSnapshot.VpcId',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.VpcId', props);
    return resource.getResponseField('DBClusterSnapshot.VpcId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime'),
        outputPath: 'DBClusterSnapshot.ClusterCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.MasterUsername'),
        outputPath: 'DBClusterSnapshot.MasterUsername',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.MasterUsername', props);
    return resource.getResponseField('DBClusterSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.EngineVersion'),
        outputPath: 'DBClusterSnapshot.EngineVersion',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.EngineVersion', props);
    return resource.getResponseField('DBClusterSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.LicenseModel'),
        outputPath: 'DBClusterSnapshot.LicenseModel',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.LicenseModel', props);
    return resource.getResponseField('DBClusterSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotType'),
        outputPath: 'DBClusterSnapshot.SnapshotType',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.SnapshotType', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotType') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.PercentProgress'),
        outputPath: 'DBClusterSnapshot.PercentProgress',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.PercentProgress', props);
    return resource.getResponseField('DBClusterSnapshot.PercentProgress') as unknown as number;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted'),
        outputPath: 'DBClusterSnapshot.StorageEncrypted',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted', props);
    return resource.getResponseField('DBClusterSnapshot.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.KmsKeyId'),
        outputPath: 'DBClusterSnapshot.KmsKeyId',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBClusterSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotArn') as unknown as string;
  }

  public get sourceDbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.SourceDBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.SourceDBClusterSnapshotArn') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBClusterSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBClusterSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBClusterSnapshot.DBClusterSnapshot.TagList'),
        outputPath: 'DBClusterSnapshot.TagList',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBClusterSnapshot.DBClusterSnapshot.TagList', props);
    return resource.getResponseField('DBClusterSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesCreateDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceMessage) {
  }

  public get dbInstance(): RDSResponsesCreateDbInstanceDbInstance {
    return new RDSResponsesCreateDbInstanceDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateDbInstanceDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesCreateDbInstanceDbInstanceEndpoint {
    return new RDSResponsesCreateDbInstanceDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesCreateDbInstanceDbInstanceDbSubnetGroup {
    return new RDSResponsesCreateDbInstanceDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesCreateDbInstanceDbInstancePendingModifiedValues {
    return new RDSResponsesCreateDbInstanceDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesCreateDbInstanceDbInstanceListenerEndpoint {
    return new RDSResponsesCreateDbInstanceDbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesCreateDbInstanceDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesCreateDbInstanceDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesCreateDbInstanceDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesCreateDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesCreateDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesCreateDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesCreateDbInstanceDbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CharacterSetName: this.__input.characterSetName,
          NcharCharacterSetName: this.__input.ncharCharacterSetName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          Timezone: this.__input.timezone,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesCreateDbInstanceReadReplica {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
  }

  public get dbInstance(): RDSResponsesCreateDbInstanceReadReplicaDbInstance {
    return new RDSResponsesCreateDbInstanceReadReplicaDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateDbInstanceReadReplicaDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesCreateDbInstanceReadReplicaDbInstanceEndpoint {
    return new RDSResponsesCreateDbInstanceReadReplicaDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesCreateDbInstanceReadReplicaDbInstanceDbSubnetGroup {
    return new RDSResponsesCreateDbInstanceReadReplicaDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesCreateDbInstanceReadReplicaDbInstancePendingModifiedValues {
    return new RDSResponsesCreateDbInstanceReadReplicaDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesCreateDbInstanceReadReplicaDbInstanceListenerEndpoint {
    return new RDSResponsesCreateDbInstanceReadReplicaDbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesCreateDbInstanceReadReplicaDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesCreateDbInstanceReadReplicaDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesCreateDbInstanceReadReplicaDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesCreateDbInstanceReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesCreateDbInstanceReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesCreateDbInstanceReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesCreateDbInstanceReadReplicaDbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbInstanceReadReplicaMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbInstanceReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          AvailabilityZone: this.__input.availabilityZone,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          StorageType: this.__input.storageType,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          PreSignedUrl: this.__input.preSignedUrl,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ReplicaMode: this.__input.replicaMode,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          SourceRegion: this.__input.sourceRegion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBInstanceReadReplica.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesCreateDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbParameterGroupMessage) {
  }

  public get dbParameterGroup(): RDSResponsesCreateDbParameterGroupDbParameterGroup {
    return new RDSResponsesCreateDbParameterGroupDbParameterGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateDbParameterGroupDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbParameterGroupMessage) {
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBParameterGroup.DBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroup.DBParameterGroupName',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBParameterGroup.DBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupName') as unknown as string;
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBParameterGroup.DBParameterGroup.DBParameterGroupFamily'),
        outputPath: 'DBParameterGroup.DBParameterGroupFamily',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBParameterGroup.DBParameterGroup.DBParameterGroupFamily', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupFamily') as unknown as string;
  }

  public get description(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBParameterGroup.DBParameterGroup.Description'),
        outputPath: 'DBParameterGroup.Description',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBParameterGroup.DBParameterGroup.Description', props);
    return resource.getResponseField('DBParameterGroup.Description') as unknown as string;
  }

  public get dbParameterGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBParameterGroup.DBParameterGroup.DBParameterGroupArn'),
        outputPath: 'DBParameterGroup.DBParameterGroupArn',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Description: this.__input.description,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBParameterGroup.DBParameterGroup.DBParameterGroupArn', props);
    return resource.getResponseField('DBParameterGroup.DBParameterGroupArn') as unknown as string;
  }

}

export class RDSResponsesCreateDbProxy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbProxyRequest) {
  }

  public get dbProxy(): RDSResponsesCreateDbProxyDbProxy {
    return new RDSResponsesCreateDbProxyDbProxy(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateDbProxyDbProxy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbProxyRequest) {
  }

  public get dbProxyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.DBProxyName'),
        outputPath: 'DBProxy.DBProxyName',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.DBProxyName', props);
    return resource.getResponseField('DBProxy.DBProxyName') as unknown as string;
  }

  public get dbProxyArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.DBProxyArn'),
        outputPath: 'DBProxy.DBProxyArn',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.DBProxyArn', props);
    return resource.getResponseField('DBProxy.DBProxyArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.Status'),
        outputPath: 'DBProxy.Status',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.Status', props);
    return resource.getResponseField('DBProxy.Status') as unknown as string;
  }

  public get engineFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.EngineFamily'),
        outputPath: 'DBProxy.EngineFamily',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.EngineFamily', props);
    return resource.getResponseField('DBProxy.EngineFamily') as unknown as string;
  }

  public get vpcSecurityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.VpcSecurityGroupIds'),
        outputPath: 'DBProxy.VpcSecurityGroupIds',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.VpcSecurityGroupIds', props);
    return resource.getResponseField('DBProxy.VpcSecurityGroupIds') as unknown as string[];
  }

  public get vpcSubnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.VpcSubnetIds'),
        outputPath: 'DBProxy.VpcSubnetIds',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.VpcSubnetIds', props);
    return resource.getResponseField('DBProxy.VpcSubnetIds') as unknown as string[];
  }

  public get auth(): shapes.RdsUserAuthConfigInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.Auth'),
        outputPath: 'DBProxy.Auth',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.Auth', props);
    return resource.getResponseField('DBProxy.Auth') as unknown as shapes.RdsUserAuthConfigInfo[];
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.RoleArn'),
        outputPath: 'DBProxy.RoleArn',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.RoleArn', props);
    return resource.getResponseField('DBProxy.RoleArn') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.Endpoint'),
        outputPath: 'DBProxy.Endpoint',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.Endpoint', props);
    return resource.getResponseField('DBProxy.Endpoint') as unknown as string;
  }

  public get requireTls(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.RequireTLS'),
        outputPath: 'DBProxy.RequireTLS',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.RequireTLS', props);
    return resource.getResponseField('DBProxy.RequireTLS') as unknown as boolean;
  }

  public get idleClientTimeout(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.IdleClientTimeout'),
        outputPath: 'DBProxy.IdleClientTimeout',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.IdleClientTimeout', props);
    return resource.getResponseField('DBProxy.IdleClientTimeout') as unknown as number;
  }

  public get debugLogging(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.DebugLogging'),
        outputPath: 'DBProxy.DebugLogging',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.DebugLogging', props);
    return resource.getResponseField('DBProxy.DebugLogging') as unknown as boolean;
  }

  public get createdDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.CreatedDate'),
        outputPath: 'DBProxy.CreatedDate',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.CreatedDate', props);
    return resource.getResponseField('DBProxy.CreatedDate') as unknown as string;
  }

  public get updatedDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBProxy.DBProxy.UpdatedDate'),
        outputPath: 'DBProxy.UpdatedDate',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          EngineFamily: this.__input.engineFamily,
          Auth: this.__input.auth,
          RoleArn: this.__input.roleArn,
          VpcSubnetIds: this.__input.vpcSubnetIds,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBProxy.DBProxy.UpdatedDate', props);
    return resource.getResponseField('DBProxy.UpdatedDate') as unknown as string;
  }

}

export class RDSResponsesCreateDbSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbSecurityGroupMessage) {
  }

  public get dbSecurityGroup(): RDSResponsesCreateDbSecurityGroupDbSecurityGroup {
    return new RDSResponsesCreateDbSecurityGroupDbSecurityGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateDbSecurityGroupDbSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbSecurityGroupMessage) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.OwnerId'),
        outputPath: 'DBSecurityGroup.OwnerId',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.__input.dbSecurityGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSecurityGroup.DBSecurityGroup.OwnerId', props);
    return resource.getResponseField('DBSecurityGroup.OwnerId') as unknown as string;
  }

  public get dbSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupName'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupName',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.__input.dbSecurityGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupName', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupName') as unknown as string;
  }

  public get dbSecurityGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupDescription'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupDescription',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.__input.dbSecurityGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupDescription', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.VpcId'),
        outputPath: 'DBSecurityGroup.VpcId',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.__input.dbSecurityGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSecurityGroup.DBSecurityGroup.VpcId', props);
    return resource.getResponseField('DBSecurityGroup.VpcId') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.Rdsec2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.EC2SecurityGroups'),
        outputPath: 'DBSecurityGroup.EC2SecurityGroups',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.__input.dbSecurityGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSecurityGroup.DBSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('DBSecurityGroup.EC2SecurityGroups') as unknown as shapes.Rdsec2SecurityGroup[];
  }

  public get ipRanges(): shapes.RdsipRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.IPRanges'),
        outputPath: 'DBSecurityGroup.IPRanges',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.__input.dbSecurityGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSecurityGroup.DBSecurityGroup.IPRanges', props);
    return resource.getResponseField('DBSecurityGroup.IPRanges') as unknown as shapes.RdsipRange[];
  }

  public get dbSecurityGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSecurityGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupArn'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupArn',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          DBSecurityGroupDescription: this.__input.dbSecurityGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSecurityGroup.DBSecurityGroup.DBSecurityGroupArn', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupArn') as unknown as string;
  }

}

export class RDSResponsesCreateDbSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbSnapshotMessage) {
  }

  public get dbSnapshot(): RDSResponsesCreateDbSnapshotDbSnapshot {
    return new RDSResponsesCreateDbSnapshotDbSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateDbSnapshotDbSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbSnapshotMessage) {
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.DBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.DBInstanceIdentifier'),
        outputPath: 'DBSnapshot.DBInstanceIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.DBInstanceIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBInstanceIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.SnapshotCreateTime'),
        outputPath: 'DBSnapshot.SnapshotCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Engine'),
        outputPath: 'DBSnapshot.Engine',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.Engine', props);
    return resource.getResponseField('DBSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.AllocatedStorage'),
        outputPath: 'DBSnapshot.AllocatedStorage',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Status'),
        outputPath: 'DBSnapshot.Status',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.Status', props);
    return resource.getResponseField('DBSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Port'),
        outputPath: 'DBSnapshot.Port',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.Port', props);
    return resource.getResponseField('DBSnapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.AvailabilityZone'),
        outputPath: 'DBSnapshot.AvailabilityZone',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.AvailabilityZone', props);
    return resource.getResponseField('DBSnapshot.AvailabilityZone') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.VpcId'),
        outputPath: 'DBSnapshot.VpcId',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.VpcId', props);
    return resource.getResponseField('DBSnapshot.VpcId') as unknown as string;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.InstanceCreateTime'),
        outputPath: 'DBSnapshot.InstanceCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.InstanceCreateTime', props);
    return resource.getResponseField('DBSnapshot.InstanceCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.MasterUsername'),
        outputPath: 'DBSnapshot.MasterUsername',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.MasterUsername', props);
    return resource.getResponseField('DBSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.EngineVersion'),
        outputPath: 'DBSnapshot.EngineVersion',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.EngineVersion', props);
    return resource.getResponseField('DBSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.LicenseModel'),
        outputPath: 'DBSnapshot.LicenseModel',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.LicenseModel', props);
    return resource.getResponseField('DBSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.SnapshotType'),
        outputPath: 'DBSnapshot.SnapshotType',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.SnapshotType', props);
    return resource.getResponseField('DBSnapshot.SnapshotType') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Iops'),
        outputPath: 'DBSnapshot.Iops',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.Iops', props);
    return resource.getResponseField('DBSnapshot.Iops') as unknown as number;
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.OptionGroupName'),
        outputPath: 'DBSnapshot.OptionGroupName',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.OptionGroupName', props);
    return resource.getResponseField('DBSnapshot.OptionGroupName') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.PercentProgress'),
        outputPath: 'DBSnapshot.PercentProgress',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.PercentProgress', props);
    return resource.getResponseField('DBSnapshot.PercentProgress') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.SourceRegion'),
        outputPath: 'DBSnapshot.SourceRegion',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.SourceRegion', props);
    return resource.getResponseField('DBSnapshot.SourceRegion') as unknown as string;
  }

  public get sourceDbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.SourceDBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.SourceDBSnapshotIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.StorageType'),
        outputPath: 'DBSnapshot.StorageType',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.StorageType', props);
    return resource.getResponseField('DBSnapshot.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.TdeCredentialArn'),
        outputPath: 'DBSnapshot.TdeCredentialArn',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.TdeCredentialArn', props);
    return resource.getResponseField('DBSnapshot.TdeCredentialArn') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Encrypted'),
        outputPath: 'DBSnapshot.Encrypted',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.Encrypted', props);
    return resource.getResponseField('DBSnapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.KmsKeyId'),
        outputPath: 'DBSnapshot.KmsKeyId',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.DBSnapshotArn'),
        outputPath: 'DBSnapshot.DBSnapshotArn',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.DBSnapshotArn', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.Timezone'),
        outputPath: 'DBSnapshot.Timezone',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.Timezone', props);
    return resource.getResponseField('DBSnapshot.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.ProcessorFeatures'),
        outputPath: 'DBSnapshot.ProcessorFeatures',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.ProcessorFeatures', props);
    return resource.getResponseField('DBSnapshot.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.DbiResourceId'),
        outputPath: 'DBSnapshot.DbiResourceId',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.DbiResourceId', props);
    return resource.getResponseField('DBSnapshot.DbiResourceId') as unknown as string;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSnapshot.DBSnapshot.TagList'),
        outputPath: 'DBSnapshot.TagList',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSnapshot.DBSnapshot.TagList', props);
    return resource.getResponseField('DBSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesCreateDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbSubnetGroupMessage) {
  }

  public get dbSubnetGroup(): RDSResponsesCreateDbSubnetGroupDbSubnetGroup {
    return new RDSResponsesCreateDbSubnetGroupDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateDbSubnetGroupDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateDbSubnetGroupMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.VpcId'),
        outputPath: 'DBSubnetGroup.VpcId',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.Subnets'),
        outputPath: 'DBSubnetGroup.Subnets',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesCreateEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateEventSubscriptionMessage) {
  }

  public get eventSubscription(): RDSResponsesCreateEventSubscriptionEventSubscription {
    return new RDSResponsesCreateEventSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateEventSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateEventSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateEventSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          SourceIds: this.__input.sourceIds,
          Enabled: this.__input.enabled,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateEventSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class RDSResponsesCreateGlobalCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateGlobalClusterMessage) {
  }

  public get globalCluster(): RDSResponsesCreateGlobalClusterGlobalCluster {
    return new RDSResponsesCreateGlobalClusterGlobalCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateGlobalClusterGlobalCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateGlobalClusterMessage) {
  }

  public get globalClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.GlobalClusterIdentifier'),
        outputPath: 'GlobalCluster.GlobalClusterIdentifier',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          DatabaseName: this.__input.databaseName,
          StorageEncrypted: this.__input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateGlobalCluster.GlobalCluster.GlobalClusterIdentifier', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterIdentifier') as unknown as string;
  }

  public get globalClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.GlobalClusterResourceId'),
        outputPath: 'GlobalCluster.GlobalClusterResourceId',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          DatabaseName: this.__input.databaseName,
          StorageEncrypted: this.__input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateGlobalCluster.GlobalCluster.GlobalClusterResourceId', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterResourceId') as unknown as string;
  }

  public get globalClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.GlobalClusterArn'),
        outputPath: 'GlobalCluster.GlobalClusterArn',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          DatabaseName: this.__input.databaseName,
          StorageEncrypted: this.__input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateGlobalCluster.GlobalCluster.GlobalClusterArn', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.Status'),
        outputPath: 'GlobalCluster.Status',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          DatabaseName: this.__input.databaseName,
          StorageEncrypted: this.__input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateGlobalCluster.GlobalCluster.Status', props);
    return resource.getResponseField('GlobalCluster.Status') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.Engine'),
        outputPath: 'GlobalCluster.Engine',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          DatabaseName: this.__input.databaseName,
          StorageEncrypted: this.__input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateGlobalCluster.GlobalCluster.Engine', props);
    return resource.getResponseField('GlobalCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.EngineVersion'),
        outputPath: 'GlobalCluster.EngineVersion',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          DatabaseName: this.__input.databaseName,
          StorageEncrypted: this.__input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateGlobalCluster.GlobalCluster.EngineVersion', props);
    return resource.getResponseField('GlobalCluster.EngineVersion') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.DatabaseName'),
        outputPath: 'GlobalCluster.DatabaseName',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          DatabaseName: this.__input.databaseName,
          StorageEncrypted: this.__input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateGlobalCluster.GlobalCluster.DatabaseName', props);
    return resource.getResponseField('GlobalCluster.DatabaseName') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.StorageEncrypted'),
        outputPath: 'GlobalCluster.StorageEncrypted',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          DatabaseName: this.__input.databaseName,
          StorageEncrypted: this.__input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateGlobalCluster.GlobalCluster.StorageEncrypted', props);
    return resource.getResponseField('GlobalCluster.StorageEncrypted') as unknown as boolean;
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.DeletionProtection'),
        outputPath: 'GlobalCluster.DeletionProtection',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          DatabaseName: this.__input.databaseName,
          StorageEncrypted: this.__input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateGlobalCluster.GlobalCluster.DeletionProtection', props);
    return resource.getResponseField('GlobalCluster.DeletionProtection') as unknown as boolean;
  }

  public get globalClusterMembers(): shapes.RdsGlobalClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateGlobalCluster.GlobalCluster.GlobalClusterMembers'),
        outputPath: 'GlobalCluster.GlobalClusterMembers',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DeletionProtection: this.__input.deletionProtection,
          DatabaseName: this.__input.databaseName,
          StorageEncrypted: this.__input.storageEncrypted,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateGlobalCluster.GlobalCluster.GlobalClusterMembers', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterMembers') as unknown as shapes.RdsGlobalClusterMember[];
  }

}

export class RDSResponsesCreateOptionGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateOptionGroupMessage) {
  }

  public get optionGroup(): RDSResponsesCreateOptionGroupOptionGroup {
    return new RDSResponsesCreateOptionGroupOptionGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesCreateOptionGroupOptionGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsCreateOptionGroupMessage) {
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.OptionGroupName'),
        outputPath: 'OptionGroup.OptionGroupName',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
          OptionGroupDescription: this.__input.optionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOptionGroup.OptionGroup.OptionGroupName', props);
    return resource.getResponseField('OptionGroup.OptionGroupName') as unknown as string;
  }

  public get optionGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.OptionGroupDescription'),
        outputPath: 'OptionGroup.OptionGroupDescription',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
          OptionGroupDescription: this.__input.optionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOptionGroup.OptionGroup.OptionGroupDescription', props);
    return resource.getResponseField('OptionGroup.OptionGroupDescription') as unknown as string;
  }

  public get engineName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.EngineName'),
        outputPath: 'OptionGroup.EngineName',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
          OptionGroupDescription: this.__input.optionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOptionGroup.OptionGroup.EngineName', props);
    return resource.getResponseField('OptionGroup.EngineName') as unknown as string;
  }

  public get majorEngineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.MajorEngineVersion'),
        outputPath: 'OptionGroup.MajorEngineVersion',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
          OptionGroupDescription: this.__input.optionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOptionGroup.OptionGroup.MajorEngineVersion', props);
    return resource.getResponseField('OptionGroup.MajorEngineVersion') as unknown as string;
  }

  public get options(): shapes.RdsOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.Options'),
        outputPath: 'OptionGroup.Options',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
          OptionGroupDescription: this.__input.optionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOptionGroup.OptionGroup.Options', props);
    return resource.getResponseField('OptionGroup.Options') as unknown as shapes.RdsOption[];
  }

  public get allowsVpcAndNonVpcInstanceMemberships(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships'),
        outputPath: 'OptionGroup.AllowsVpcAndNonVpcInstanceMemberships',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
          OptionGroupDescription: this.__input.optionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships', props);
    return resource.getResponseField('OptionGroup.AllowsVpcAndNonVpcInstanceMemberships') as unknown as boolean;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.VpcId'),
        outputPath: 'OptionGroup.VpcId',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
          OptionGroupDescription: this.__input.optionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOptionGroup.OptionGroup.VpcId', props);
    return resource.getResponseField('OptionGroup.VpcId') as unknown as string;
  }

  public get optionGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'createOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.CreateOptionGroup.OptionGroup.OptionGroupArn'),
        outputPath: 'OptionGroup.OptionGroupArn',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
          OptionGroupDescription: this.__input.optionGroupDescription,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'CreateOptionGroup.OptionGroup.OptionGroupArn', props);
    return resource.getResponseField('OptionGroup.OptionGroupArn') as unknown as string;
  }

}

export class RDSResponsesDeleteCustomAvailabilityZone {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteCustomAvailabilityZoneMessage) {
  }

  public get customAvailabilityZone(): RDSResponsesDeleteCustomAvailabilityZoneCustomAvailabilityZone {
    return new RDSResponsesDeleteCustomAvailabilityZoneCustomAvailabilityZone(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteCustomAvailabilityZoneCustomAvailabilityZone {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteCustomAvailabilityZoneMessage) {
  }

  public get customAvailabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneId'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneId',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneId', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneId') as unknown as string;
  }

  public get customAvailabilityZoneName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneName'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneName',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneName', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneName') as unknown as string;
  }

  public get customAvailabilityZoneStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneStatus'),
        outputPath: 'CustomAvailabilityZone.CustomAvailabilityZoneStatus',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.CustomAvailabilityZoneStatus', props);
    return resource.getResponseField('CustomAvailabilityZone.CustomAvailabilityZoneStatus') as unknown as string;
  }

  public get vpnDetails(): RDSResponsesDeleteCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails {
    return new RDSResponsesDeleteCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteCustomAvailabilityZoneCustomAvailabilityZoneVpnDetails {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteCustomAvailabilityZoneMessage) {
  }

  public get vpnId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnId'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnId',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnId', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnId') as unknown as string;
  }

  public get vpnTunnelOriginatorIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnTunnelOriginatorIP') as unknown as string;
  }

  public get vpnGatewayIp(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnGatewayIp'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnGatewayIp',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnGatewayIp', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnGatewayIp') as unknown as string;
  }

  public get vpnPsk(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnPSK'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnPSK',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnPSK', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnPSK') as unknown as string;
  }

  public get vpnName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnName'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnName',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnName', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnName') as unknown as string;
  }

  public get vpnState(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteCustomAvailabilityZone',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnState'),
        outputPath: 'CustomAvailabilityZone.VpnDetails.VpnState',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteCustomAvailabilityZone.CustomAvailabilityZone.VpnDetails.VpnState', props);
    return resource.getResponseField('CustomAvailabilityZone.VpnDetails.VpnState') as unknown as string;
  }

}

export class RDSResponsesDeleteDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbClusterMessage) {
  }

  public get dbCluster(): RDSResponsesDeleteDbClusterDbCluster {
    return new RDSResponsesDeleteDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSResponsesDeleteDbClusterDbClusterScalingConfigurationInfo {
    return new RDSResponsesDeleteDbClusterDbClusterScalingConfigurationInfo(this.__scope, this.__resources, this.__input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSResponsesDeleteDbClusterDbClusterScalingConfigurationInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbClusterMessage) {
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesDeleteDbClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbClusterEndpointMessage) {
  }

  public get dbClusterEndpointIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.DBClusterEndpointIdentifier'),
        outputPath: 'DBClusterEndpointIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.DBClusterEndpointIdentifier', props);
    return resource.getResponseField('DBClusterEndpointIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterEndpointResourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.DBClusterEndpointResourceIdentifier'),
        outputPath: 'DBClusterEndpointResourceIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.DBClusterEndpointResourceIdentifier', props);
    return resource.getResponseField('DBClusterEndpointResourceIdentifier') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.Endpoint'),
        outputPath: 'Endpoint',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.Endpoint', props);
    return resource.getResponseField('Endpoint') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get endpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.EndpointType'),
        outputPath: 'EndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.EndpointType', props);
    return resource.getResponseField('EndpointType') as unknown as string;
  }

  public get customEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.CustomEndpointType'),
        outputPath: 'CustomEndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.CustomEndpointType', props);
    return resource.getResponseField('CustomEndpointType') as unknown as string;
  }

  public get staticMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.StaticMembers'),
        outputPath: 'StaticMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.StaticMembers', props);
    return resource.getResponseField('StaticMembers') as unknown as string[];
  }

  public get excludedMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.ExcludedMembers'),
        outputPath: 'ExcludedMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.ExcludedMembers', props);
    return resource.getResponseField('ExcludedMembers') as unknown as string[];
  }

  public get dbClusterEndpointArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterEndpoint.DBClusterEndpointArn'),
        outputPath: 'DBClusterEndpointArn',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterEndpoint.DBClusterEndpointArn', props);
    return resource.getResponseField('DBClusterEndpointArn') as unknown as string;
  }

}

export class RDSResponsesDeleteDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbClusterSnapshotMessage) {
  }

  public get dbClusterSnapshot(): RDSResponsesDeleteDbClusterSnapshotDbClusterSnapshot {
    return new RDSResponsesDeleteDbClusterSnapshotDbClusterSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteDbClusterSnapshotDbClusterSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbClusterSnapshotMessage) {
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones'),
        outputPath: 'DBClusterSnapshot.AvailabilityZones',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.AvailabilityZones', props);
    return resource.getResponseField('DBClusterSnapshot.AvailabilityZones') as unknown as string[];
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier'),
        outputPath: 'DBClusterSnapshot.DBClusterIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime'),
        outputPath: 'DBClusterSnapshot.SnapshotCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.Engine'),
        outputPath: 'DBClusterSnapshot.Engine',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.Engine', props);
    return resource.getResponseField('DBClusterSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage'),
        outputPath: 'DBClusterSnapshot.AllocatedStorage',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBClusterSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.Status'),
        outputPath: 'DBClusterSnapshot.Status',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.Status', props);
    return resource.getResponseField('DBClusterSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.Port'),
        outputPath: 'DBClusterSnapshot.Port',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.Port', props);
    return resource.getResponseField('DBClusterSnapshot.Port') as unknown as number;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.VpcId'),
        outputPath: 'DBClusterSnapshot.VpcId',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.VpcId', props);
    return resource.getResponseField('DBClusterSnapshot.VpcId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime'),
        outputPath: 'DBClusterSnapshot.ClusterCreateTime',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.ClusterCreateTime', props);
    return resource.getResponseField('DBClusterSnapshot.ClusterCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.MasterUsername'),
        outputPath: 'DBClusterSnapshot.MasterUsername',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.MasterUsername', props);
    return resource.getResponseField('DBClusterSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.EngineVersion'),
        outputPath: 'DBClusterSnapshot.EngineVersion',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.EngineVersion', props);
    return resource.getResponseField('DBClusterSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.LicenseModel'),
        outputPath: 'DBClusterSnapshot.LicenseModel',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.LicenseModel', props);
    return resource.getResponseField('DBClusterSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotType'),
        outputPath: 'DBClusterSnapshot.SnapshotType',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.SnapshotType', props);
    return resource.getResponseField('DBClusterSnapshot.SnapshotType') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.PercentProgress'),
        outputPath: 'DBClusterSnapshot.PercentProgress',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.PercentProgress', props);
    return resource.getResponseField('DBClusterSnapshot.PercentProgress') as unknown as number;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted'),
        outputPath: 'DBClusterSnapshot.StorageEncrypted',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.StorageEncrypted', props);
    return resource.getResponseField('DBClusterSnapshot.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.KmsKeyId'),
        outputPath: 'DBClusterSnapshot.KmsKeyId',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBClusterSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.DBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.DBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.DBClusterSnapshotArn') as unknown as string;
  }

  public get sourceDbClusterSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn'),
        outputPath: 'DBClusterSnapshot.SourceDBClusterSnapshotArn',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.SourceDBClusterSnapshotArn', props);
    return resource.getResponseField('DBClusterSnapshot.SourceDBClusterSnapshotArn') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBClusterSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBClusterSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbClusterSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBClusterSnapshot.DBClusterSnapshot.TagList'),
        outputPath: 'DBClusterSnapshot.TagList',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBClusterSnapshot.DBClusterSnapshot.TagList', props);
    return resource.getResponseField('DBClusterSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesDeleteDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbInstanceMessage) {
  }

  public get dbInstance(): RDSResponsesDeleteDbInstanceDbInstance {
    return new RDSResponsesDeleteDbInstanceDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteDbInstanceDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbInstanceMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesDeleteDbInstanceDbInstanceEndpoint {
    return new RDSResponsesDeleteDbInstanceDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesDeleteDbInstanceDbInstanceDbSubnetGroup {
    return new RDSResponsesDeleteDbInstanceDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesDeleteDbInstanceDbInstancePendingModifiedValues {
    return new RDSResponsesDeleteDbInstanceDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesDeleteDbInstanceDbInstanceListenerEndpoint {
    return new RDSResponsesDeleteDbInstanceDbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesDeleteDbInstanceDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesDeleteDbInstanceDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbInstanceMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesDeleteDbInstanceDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbInstanceMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesDeleteDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesDeleteDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesDeleteDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbInstanceMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesDeleteDbInstanceDbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          SkipFinalSnapshot: this.__input.skipFinalSnapshot,
          FinalDBSnapshotIdentifier: this.__input.finalDbSnapshotIdentifier,
          DeleteAutomatedBackups: this.__input.deleteAutomatedBackups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesDeleteDbInstanceAutomatedBackup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbInstanceAutomatedBackupMessage) {
  }

  public get dbInstanceAutomatedBackup(): RDSResponsesDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackup {
    return new RDSResponsesDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbInstanceAutomatedBackupMessage) {
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DBInstanceArn'),
        outputPath: 'DBInstanceAutomatedBackup.DBInstanceArn',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DBInstanceArn', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.DBInstanceArn') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DbiResourceId'),
        outputPath: 'DBInstanceAutomatedBackup.DbiResourceId',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DbiResourceId', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.DbiResourceId') as unknown as string;
  }

  public get region(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Region'),
        outputPath: 'DBInstanceAutomatedBackup.Region',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Region', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Region') as unknown as string;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DBInstanceIdentifier'),
        outputPath: 'DBInstanceAutomatedBackup.DBInstanceIdentifier',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.DBInstanceIdentifier') as unknown as string;
  }

  public get restoreWindow(): RDSResponsesDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackupRestoreWindow {
    return new RDSResponsesDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackupRestoreWindow(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.AllocatedStorage'),
        outputPath: 'DBInstanceAutomatedBackup.AllocatedStorage',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.AllocatedStorage', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Status'),
        outputPath: 'DBInstanceAutomatedBackup.Status',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Status', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Port'),
        outputPath: 'DBInstanceAutomatedBackup.Port',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Port', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.AvailabilityZone'),
        outputPath: 'DBInstanceAutomatedBackup.AvailabilityZone',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.AvailabilityZone', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.AvailabilityZone') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.VpcId'),
        outputPath: 'DBInstanceAutomatedBackup.VpcId',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.VpcId', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.VpcId') as unknown as string;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.InstanceCreateTime'),
        outputPath: 'DBInstanceAutomatedBackup.InstanceCreateTime',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.InstanceCreateTime', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.InstanceCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.MasterUsername'),
        outputPath: 'DBInstanceAutomatedBackup.MasterUsername',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.MasterUsername', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.MasterUsername') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Engine'),
        outputPath: 'DBInstanceAutomatedBackup.Engine',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Engine', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.EngineVersion'),
        outputPath: 'DBInstanceAutomatedBackup.EngineVersion',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.EngineVersion', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.LicenseModel'),
        outputPath: 'DBInstanceAutomatedBackup.LicenseModel',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.LicenseModel', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Iops'),
        outputPath: 'DBInstanceAutomatedBackup.Iops',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Iops', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Iops') as unknown as number;
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.OptionGroupName'),
        outputPath: 'DBInstanceAutomatedBackup.OptionGroupName',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.OptionGroupName', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.OptionGroupName') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.TdeCredentialArn'),
        outputPath: 'DBInstanceAutomatedBackup.TdeCredentialArn',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.TdeCredentialArn', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.TdeCredentialArn') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Encrypted'),
        outputPath: 'DBInstanceAutomatedBackup.Encrypted',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Encrypted', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Encrypted') as unknown as boolean;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.StorageType'),
        outputPath: 'DBInstanceAutomatedBackup.StorageType',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.StorageType', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.StorageType') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.KmsKeyId'),
        outputPath: 'DBInstanceAutomatedBackup.KmsKeyId',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.KmsKeyId', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.KmsKeyId') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Timezone'),
        outputPath: 'DBInstanceAutomatedBackup.Timezone',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.Timezone', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstanceAutomatedBackup.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

}

export class RDSResponsesDeleteDbInstanceAutomatedBackupDbInstanceAutomatedBackupRestoreWindow {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbInstanceAutomatedBackupMessage) {
  }

  public get earliestTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.RestoreWindow.EarliestTime'),
        outputPath: 'DBInstanceAutomatedBackup.RestoreWindow.EarliestTime',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.RestoreWindow.EarliestTime', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.RestoreWindow.EarliestTime') as unknown as string;
  }

  public get latestTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbInstanceAutomatedBackup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.RestoreWindow.LatestTime'),
        outputPath: 'DBInstanceAutomatedBackup.RestoreWindow.LatestTime',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBInstanceAutomatedBackup.DBInstanceAutomatedBackup.RestoreWindow.LatestTime', props);
    return resource.getResponseField('DBInstanceAutomatedBackup.RestoreWindow.LatestTime') as unknown as string;
  }

}

export class RDSResponsesDeleteDbProxy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbProxyRequest) {
  }

  public get dbProxy(): RDSResponsesDeleteDbProxyDbProxy {
    return new RDSResponsesDeleteDbProxyDbProxy(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteDbProxyDbProxy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbProxyRequest) {
  }

  public get dbProxyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.DBProxyName'),
        outputPath: 'DBProxy.DBProxyName',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.DBProxyName', props);
    return resource.getResponseField('DBProxy.DBProxyName') as unknown as string;
  }

  public get dbProxyArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.DBProxyArn'),
        outputPath: 'DBProxy.DBProxyArn',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.DBProxyArn', props);
    return resource.getResponseField('DBProxy.DBProxyArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.Status'),
        outputPath: 'DBProxy.Status',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.Status', props);
    return resource.getResponseField('DBProxy.Status') as unknown as string;
  }

  public get engineFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.EngineFamily'),
        outputPath: 'DBProxy.EngineFamily',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.EngineFamily', props);
    return resource.getResponseField('DBProxy.EngineFamily') as unknown as string;
  }

  public get vpcSecurityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.VpcSecurityGroupIds'),
        outputPath: 'DBProxy.VpcSecurityGroupIds',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.VpcSecurityGroupIds', props);
    return resource.getResponseField('DBProxy.VpcSecurityGroupIds') as unknown as string[];
  }

  public get vpcSubnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.VpcSubnetIds'),
        outputPath: 'DBProxy.VpcSubnetIds',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.VpcSubnetIds', props);
    return resource.getResponseField('DBProxy.VpcSubnetIds') as unknown as string[];
  }

  public get auth(): shapes.RdsUserAuthConfigInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.Auth'),
        outputPath: 'DBProxy.Auth',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.Auth', props);
    return resource.getResponseField('DBProxy.Auth') as unknown as shapes.RdsUserAuthConfigInfo[];
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.RoleArn'),
        outputPath: 'DBProxy.RoleArn',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.RoleArn', props);
    return resource.getResponseField('DBProxy.RoleArn') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.Endpoint'),
        outputPath: 'DBProxy.Endpoint',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.Endpoint', props);
    return resource.getResponseField('DBProxy.Endpoint') as unknown as string;
  }

  public get requireTls(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.RequireTLS'),
        outputPath: 'DBProxy.RequireTLS',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.RequireTLS', props);
    return resource.getResponseField('DBProxy.RequireTLS') as unknown as boolean;
  }

  public get idleClientTimeout(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.IdleClientTimeout'),
        outputPath: 'DBProxy.IdleClientTimeout',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.IdleClientTimeout', props);
    return resource.getResponseField('DBProxy.IdleClientTimeout') as unknown as number;
  }

  public get debugLogging(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.DebugLogging'),
        outputPath: 'DBProxy.DebugLogging',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.DebugLogging', props);
    return resource.getResponseField('DBProxy.DebugLogging') as unknown as boolean;
  }

  public get createdDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.CreatedDate'),
        outputPath: 'DBProxy.CreatedDate',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.CreatedDate', props);
    return resource.getResponseField('DBProxy.CreatedDate') as unknown as string;
  }

  public get updatedDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBProxy.DBProxy.UpdatedDate'),
        outputPath: 'DBProxy.UpdatedDate',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBProxy.DBProxy.UpdatedDate', props);
    return resource.getResponseField('DBProxy.UpdatedDate') as unknown as string;
  }

}

export class RDSResponsesDeleteDbSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbSnapshotMessage) {
  }

  public get dbSnapshot(): RDSResponsesDeleteDbSnapshotDbSnapshot {
    return new RDSResponsesDeleteDbSnapshotDbSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteDbSnapshotDbSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteDbSnapshotMessage) {
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.DBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.DBInstanceIdentifier'),
        outputPath: 'DBSnapshot.DBInstanceIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.DBInstanceIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBInstanceIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.SnapshotCreateTime'),
        outputPath: 'DBSnapshot.SnapshotCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Engine'),
        outputPath: 'DBSnapshot.Engine',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.Engine', props);
    return resource.getResponseField('DBSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.AllocatedStorage'),
        outputPath: 'DBSnapshot.AllocatedStorage',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Status'),
        outputPath: 'DBSnapshot.Status',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.Status', props);
    return resource.getResponseField('DBSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Port'),
        outputPath: 'DBSnapshot.Port',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.Port', props);
    return resource.getResponseField('DBSnapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.AvailabilityZone'),
        outputPath: 'DBSnapshot.AvailabilityZone',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.AvailabilityZone', props);
    return resource.getResponseField('DBSnapshot.AvailabilityZone') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.VpcId'),
        outputPath: 'DBSnapshot.VpcId',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.VpcId', props);
    return resource.getResponseField('DBSnapshot.VpcId') as unknown as string;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.InstanceCreateTime'),
        outputPath: 'DBSnapshot.InstanceCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.InstanceCreateTime', props);
    return resource.getResponseField('DBSnapshot.InstanceCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.MasterUsername'),
        outputPath: 'DBSnapshot.MasterUsername',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.MasterUsername', props);
    return resource.getResponseField('DBSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.EngineVersion'),
        outputPath: 'DBSnapshot.EngineVersion',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.EngineVersion', props);
    return resource.getResponseField('DBSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.LicenseModel'),
        outputPath: 'DBSnapshot.LicenseModel',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.LicenseModel', props);
    return resource.getResponseField('DBSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.SnapshotType'),
        outputPath: 'DBSnapshot.SnapshotType',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.SnapshotType', props);
    return resource.getResponseField('DBSnapshot.SnapshotType') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Iops'),
        outputPath: 'DBSnapshot.Iops',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.Iops', props);
    return resource.getResponseField('DBSnapshot.Iops') as unknown as number;
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.OptionGroupName'),
        outputPath: 'DBSnapshot.OptionGroupName',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.OptionGroupName', props);
    return resource.getResponseField('DBSnapshot.OptionGroupName') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.PercentProgress'),
        outputPath: 'DBSnapshot.PercentProgress',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.PercentProgress', props);
    return resource.getResponseField('DBSnapshot.PercentProgress') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.SourceRegion'),
        outputPath: 'DBSnapshot.SourceRegion',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.SourceRegion', props);
    return resource.getResponseField('DBSnapshot.SourceRegion') as unknown as string;
  }

  public get sourceDbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.SourceDBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.SourceDBSnapshotIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.StorageType'),
        outputPath: 'DBSnapshot.StorageType',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.StorageType', props);
    return resource.getResponseField('DBSnapshot.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.TdeCredentialArn'),
        outputPath: 'DBSnapshot.TdeCredentialArn',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.TdeCredentialArn', props);
    return resource.getResponseField('DBSnapshot.TdeCredentialArn') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Encrypted'),
        outputPath: 'DBSnapshot.Encrypted',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.Encrypted', props);
    return resource.getResponseField('DBSnapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.KmsKeyId'),
        outputPath: 'DBSnapshot.KmsKeyId',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.DBSnapshotArn'),
        outputPath: 'DBSnapshot.DBSnapshotArn',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.DBSnapshotArn', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.Timezone'),
        outputPath: 'DBSnapshot.Timezone',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.Timezone', props);
    return resource.getResponseField('DBSnapshot.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.ProcessorFeatures'),
        outputPath: 'DBSnapshot.ProcessorFeatures',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.ProcessorFeatures', props);
    return resource.getResponseField('DBSnapshot.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.DbiResourceId'),
        outputPath: 'DBSnapshot.DbiResourceId',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.DbiResourceId', props);
    return resource.getResponseField('DBSnapshot.DbiResourceId') as unknown as string;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteDBSnapshot.DBSnapshot.TagList'),
        outputPath: 'DBSnapshot.TagList',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteDBSnapshot.DBSnapshot.TagList', props);
    return resource.getResponseField('DBSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesDeleteEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteEventSubscriptionMessage) {
  }

  public get eventSubscription(): RDSResponsesDeleteEventSubscriptionEventSubscription {
    return new RDSResponsesDeleteEventSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteEventSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteEventSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteEventSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteEventSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class RDSResponsesDeleteGlobalCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteGlobalClusterMessage) {
  }

  public get globalCluster(): RDSResponsesDeleteGlobalClusterGlobalCluster {
    return new RDSResponsesDeleteGlobalClusterGlobalCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteGlobalClusterGlobalCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteGlobalClusterMessage) {
  }

  public get globalClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.GlobalClusterIdentifier'),
        outputPath: 'GlobalCluster.GlobalClusterIdentifier',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteGlobalCluster.GlobalCluster.GlobalClusterIdentifier', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterIdentifier') as unknown as string;
  }

  public get globalClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.GlobalClusterResourceId'),
        outputPath: 'GlobalCluster.GlobalClusterResourceId',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteGlobalCluster.GlobalCluster.GlobalClusterResourceId', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterResourceId') as unknown as string;
  }

  public get globalClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.GlobalClusterArn'),
        outputPath: 'GlobalCluster.GlobalClusterArn',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteGlobalCluster.GlobalCluster.GlobalClusterArn', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.Status'),
        outputPath: 'GlobalCluster.Status',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteGlobalCluster.GlobalCluster.Status', props);
    return resource.getResponseField('GlobalCluster.Status') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.Engine'),
        outputPath: 'GlobalCluster.Engine',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteGlobalCluster.GlobalCluster.Engine', props);
    return resource.getResponseField('GlobalCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.EngineVersion'),
        outputPath: 'GlobalCluster.EngineVersion',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteGlobalCluster.GlobalCluster.EngineVersion', props);
    return resource.getResponseField('GlobalCluster.EngineVersion') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.DatabaseName'),
        outputPath: 'GlobalCluster.DatabaseName',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteGlobalCluster.GlobalCluster.DatabaseName', props);
    return resource.getResponseField('GlobalCluster.DatabaseName') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.StorageEncrypted'),
        outputPath: 'GlobalCluster.StorageEncrypted',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteGlobalCluster.GlobalCluster.StorageEncrypted', props);
    return resource.getResponseField('GlobalCluster.StorageEncrypted') as unknown as boolean;
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.DeletionProtection'),
        outputPath: 'GlobalCluster.DeletionProtection',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteGlobalCluster.GlobalCluster.DeletionProtection', props);
    return resource.getResponseField('GlobalCluster.DeletionProtection') as unknown as boolean;
  }

  public get globalClusterMembers(): shapes.RdsGlobalClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteGlobalCluster.GlobalCluster.GlobalClusterMembers'),
        outputPath: 'GlobalCluster.GlobalClusterMembers',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteGlobalCluster.GlobalCluster.GlobalClusterMembers', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterMembers') as unknown as shapes.RdsGlobalClusterMember[];
  }

}

export class RDSResponsesDeleteInstallationMedia {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteInstallationMediaMessage) {
  }

  public get installationMediaId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.InstallationMediaId'),
        outputPath: 'InstallationMediaId',
        parameters: {
          InstallationMediaId: this.__input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInstallationMedia.InstallationMediaId', props);
    return resource.getResponseField('InstallationMediaId') as unknown as string;
  }

  public get customAvailabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.CustomAvailabilityZoneId'),
        outputPath: 'CustomAvailabilityZoneId',
        parameters: {
          InstallationMediaId: this.__input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInstallationMedia.CustomAvailabilityZoneId', props);
    return resource.getResponseField('CustomAvailabilityZoneId') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.Engine'),
        outputPath: 'Engine',
        parameters: {
          InstallationMediaId: this.__input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInstallationMedia.Engine', props);
    return resource.getResponseField('Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.EngineVersion'),
        outputPath: 'EngineVersion',
        parameters: {
          InstallationMediaId: this.__input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInstallationMedia.EngineVersion', props);
    return resource.getResponseField('EngineVersion') as unknown as string;
  }

  public get engineInstallationMediaPath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.EngineInstallationMediaPath'),
        outputPath: 'EngineInstallationMediaPath',
        parameters: {
          InstallationMediaId: this.__input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInstallationMedia.EngineInstallationMediaPath', props);
    return resource.getResponseField('EngineInstallationMediaPath') as unknown as string;
  }

  public get osInstallationMediaPath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.OSInstallationMediaPath'),
        outputPath: 'OSInstallationMediaPath',
        parameters: {
          InstallationMediaId: this.__input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInstallationMedia.OSInstallationMediaPath', props);
    return resource.getResponseField('OSInstallationMediaPath') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.Status'),
        outputPath: 'Status',
        parameters: {
          InstallationMediaId: this.__input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInstallationMedia.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get failureCause(): RDSResponsesDeleteInstallationMediaFailureCause {
    return new RDSResponsesDeleteInstallationMediaFailureCause(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDeleteInstallationMediaFailureCause {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDeleteInstallationMediaMessage) {
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'deleteInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DeleteInstallationMedia.FailureCause.Message'),
        outputPath: 'FailureCause.Message',
        parameters: {
          InstallationMediaId: this.__input.installationMediaId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DeleteInstallationMedia.FailureCause.Message', props);
    return resource.getResponseField('FailureCause.Message') as unknown as string;
  }

}

export class RDSResponsesDescribeAccountAttributes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[]) {
  }

  public get accountQuotas(): shapes.RdsAccountQuota[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeAccountAttributes',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeAccountAttributes.AccountQuotas'),
        outputPath: 'AccountQuotas',
        parameters: {
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeAccountAttributes.AccountQuotas', props);
    return resource.getResponseField('AccountQuotas') as unknown as shapes.RdsAccountQuota[];
  }

}

export class RDSResponsesDescribeCertificates {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeCertificatesMessage) {
  }

  public get certificates(): shapes.RdsCertificate[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeCertificates.Certificates'),
        outputPath: 'Certificates',
        parameters: {
          CertificateIdentifier: this.__input.certificateIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCertificates.Certificates', props);
    return resource.getResponseField('Certificates') as unknown as shapes.RdsCertificate[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeCertificates.Marker'),
        outputPath: 'Marker',
        parameters: {
          CertificateIdentifier: this.__input.certificateIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCertificates.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribeCustomAvailabilityZones {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeCustomAvailabilityZonesMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCustomAvailabilityZones',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeCustomAvailabilityZones.Marker'),
        outputPath: 'Marker',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCustomAvailabilityZones.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get customAvailabilityZones(): shapes.RdsCustomAvailabilityZone[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeCustomAvailabilityZones',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeCustomAvailabilityZones.CustomAvailabilityZones'),
        outputPath: 'CustomAvailabilityZones',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeCustomAvailabilityZones.CustomAvailabilityZones', props);
    return resource.getResponseField('CustomAvailabilityZones') as unknown as shapes.RdsCustomAvailabilityZone[];
  }

}

export class RDSResponsesDescribeDbClusterBacktracks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbClusterBacktracksMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterBacktracks',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterBacktracks.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          BacktrackIdentifier: this.__input.backtrackIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterBacktracks.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterBacktracks(): shapes.RdsdbClusterBacktrack[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterBacktracks',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterBacktracks.DBClusterBacktracks'),
        outputPath: 'DBClusterBacktracks',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          BacktrackIdentifier: this.__input.backtrackIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterBacktracks.DBClusterBacktracks', props);
    return resource.getResponseField('DBClusterBacktracks') as unknown as shapes.RdsdbClusterBacktrack[];
  }

}

export class RDSResponsesDescribeDbClusterEndpoints {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbClusterEndpointsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterEndpoints',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterEndpoints.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterEndpoints.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterEndpoints(): shapes.RdsdbClusterEndpoint[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterEndpoints',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterEndpoints.DBClusterEndpoints'),
        outputPath: 'DBClusterEndpoints',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterEndpoints.DBClusterEndpoints', props);
    return resource.getResponseField('DBClusterEndpoints') as unknown as shapes.RdsdbClusterEndpoint[];
  }

}

export class RDSResponsesDescribeDbClusterParameterGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbClusterParameterGroupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameterGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterParameterGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterParameterGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterParameterGroups(): shapes.RdsdbClusterParameterGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameterGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterParameterGroups.DBClusterParameterGroups'),
        outputPath: 'DBClusterParameterGroups',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterParameterGroups.DBClusterParameterGroups', props);
    return resource.getResponseField('DBClusterParameterGroups') as unknown as shapes.RdsdbClusterParameterGroup[];
  }

}

export class RDSResponsesDescribeDbClusterParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbClusterParametersMessage) {
  }

  public get parameters(): shapes.RdsParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterParameters.Parameters'),
        outputPath: 'Parameters',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          Source: this.__input.source,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterParameters.Parameters', props);
    return resource.getResponseField('Parameters') as unknown as shapes.RdsParameter[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterParameters.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          Source: this.__input.source,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterParameters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribeDbClusterSnapshotAttributes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbClusterSnapshotAttributesMessage) {
  }

  public get dbClusterSnapshotAttributesResult(): RDSResponsesDescribeDbClusterSnapshotAttributesDbClusterSnapshotAttributesResult {
    return new RDSResponsesDescribeDbClusterSnapshotAttributesDbClusterSnapshotAttributesResult(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDescribeDbClusterSnapshotAttributesDbClusterSnapshotAttributesResult {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbClusterSnapshotAttributesMessage) {
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshotAttributes',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterSnapshotAttributes(): shapes.RdsdbClusterSnapshotAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshotAttributes',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterSnapshotAttributes.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes') as unknown as shapes.RdsdbClusterSnapshotAttribute[];
  }

}

export class RDSResponsesDescribeDbClusterSnapshots {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbClusterSnapshotsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshots',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterSnapshots.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          SnapshotType: this.__input.snapshotType,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          IncludeShared: this.__input.includeShared,
          IncludePublic: this.__input.includePublic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterSnapshots.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusterSnapshots(): shapes.RdsdbClusterSnapshot[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusterSnapshots',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusterSnapshots.DBClusterSnapshots'),
        outputPath: 'DBClusterSnapshots',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          SnapshotType: this.__input.snapshotType,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          IncludeShared: this.__input.includeShared,
          IncludePublic: this.__input.includePublic,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusterSnapshots.DBClusterSnapshots', props);
    return resource.getResponseField('DBClusterSnapshots') as unknown as shapes.RdsdbClusterSnapshot[];
  }

}

export class RDSResponsesDescribeDbClusters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbClustersMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusters.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          IncludeShared: this.__input.includeShared,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbClusters(): shapes.RdsdbCluster[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbClusters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBClusters.DBClusters'),
        outputPath: 'DBClusters',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          IncludeShared: this.__input.includeShared,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBClusters.DBClusters', props);
    return resource.getResponseField('DBClusters') as unknown as shapes.RdsdbCluster[];
  }

}

export class RDSResponsesDescribeDbEngineVersions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbEngineVersionsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbEngineVersions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBEngineVersions.Marker'),
        outputPath: 'Marker',
        parameters: {
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          DefaultOnly: this.__input.defaultOnly,
          ListSupportedCharacterSets: this.__input.listSupportedCharacterSets,
          ListSupportedTimezones: this.__input.listSupportedTimezones,
          IncludeAll: this.__input.includeAll,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBEngineVersions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbEngineVersions(): shapes.RdsdbEngineVersion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbEngineVersions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBEngineVersions.DBEngineVersions'),
        outputPath: 'DBEngineVersions',
        parameters: {
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          DefaultOnly: this.__input.defaultOnly,
          ListSupportedCharacterSets: this.__input.listSupportedCharacterSets,
          ListSupportedTimezones: this.__input.listSupportedTimezones,
          IncludeAll: this.__input.includeAll,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBEngineVersions.DBEngineVersions', props);
    return resource.getResponseField('DBEngineVersions') as unknown as shapes.RdsdbEngineVersion[];
  }

}

export class RDSResponsesDescribeDbInstanceAutomatedBackups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbInstanceAutomatedBackupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbInstanceAutomatedBackups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBInstanceAutomatedBackups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBInstanceAutomatedBackups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbInstanceAutomatedBackups(): shapes.RdsdbInstanceAutomatedBackup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbInstanceAutomatedBackups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBInstanceAutomatedBackups.DBInstanceAutomatedBackups'),
        outputPath: 'DBInstanceAutomatedBackups',
        parameters: {
          DbiResourceId: this.__input.dbiResourceId,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBInstanceAutomatedBackups.DBInstanceAutomatedBackups', props);
    return resource.getResponseField('DBInstanceAutomatedBackups') as unknown as shapes.RdsdbInstanceAutomatedBackup[];
  }

}

export class RDSResponsesDescribeDbInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbInstancesMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbInstances',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBInstances.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBInstances.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbInstances(): shapes.RdsdbInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbInstances',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBInstances.DBInstances'),
        outputPath: 'DBInstances',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBInstances.DBInstances', props);
    return resource.getResponseField('DBInstances') as unknown as shapes.RdsdbInstance[];
  }

}

export class RDSResponsesDescribeDbLogFiles {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbLogFilesMessage) {
  }

  public get describeDbLogFiles(): shapes.RdsDescribeDbLogFilesDetails[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbLogFiles',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBLogFiles.DescribeDBLogFiles'),
        outputPath: 'DescribeDBLogFiles',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          FilenameContains: this.__input.filenameContains,
          FileLastWritten: this.__input.fileLastWritten,
          FileSize: this.__input.fileSize,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBLogFiles.DescribeDBLogFiles', props);
    return resource.getResponseField('DescribeDBLogFiles') as unknown as shapes.RdsDescribeDbLogFilesDetails[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbLogFiles',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBLogFiles.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          FilenameContains: this.__input.filenameContains,
          FileLastWritten: this.__input.fileLastWritten,
          FileSize: this.__input.fileSize,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBLogFiles.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribeDbParameterGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbParameterGroupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameterGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBParameterGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBParameterGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameterGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBParameterGroups.DBParameterGroups'),
        outputPath: 'DBParameterGroups',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBParameterGroups.DBParameterGroups', props);
    return resource.getResponseField('DBParameterGroups') as unknown as shapes.RdsdbParameterGroup[];
  }

}

export class RDSResponsesDescribeDbParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbParametersMessage) {
  }

  public get parameters(): shapes.RdsParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBParameters.Parameters'),
        outputPath: 'Parameters',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          Source: this.__input.source,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBParameters.Parameters', props);
    return resource.getResponseField('Parameters') as unknown as shapes.RdsParameter[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBParameters.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          Source: this.__input.source,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBParameters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribeDbProxies {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbProxiesRequest) {
  }

  public get dbProxies(): shapes.RdsdbProxy[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxies',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxies.DBProxies'),
        outputPath: 'DBProxies',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBProxies.DBProxies', props);
    return resource.getResponseField('DBProxies') as unknown as shapes.RdsdbProxy[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxies',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxies.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBProxies.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribeDbProxyTargetGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbProxyTargetGroupsRequest) {
  }

  public get targetGroups(): shapes.RdsdbProxyTargetGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxyTargetGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxyTargetGroups.TargetGroups'),
        outputPath: 'TargetGroups',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          TargetGroupName: this.__input.targetGroupName,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBProxyTargetGroups.TargetGroups', props);
    return resource.getResponseField('TargetGroups') as unknown as shapes.RdsdbProxyTargetGroup[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxyTargetGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxyTargetGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          TargetGroupName: this.__input.targetGroupName,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBProxyTargetGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribeDbProxyTargets {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbProxyTargetsRequest) {
  }

  public get targets(): shapes.RdsdbProxyTarget[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxyTargets',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxyTargets.Targets'),
        outputPath: 'Targets',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          TargetGroupName: this.__input.targetGroupName,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBProxyTargets.Targets', props);
    return resource.getResponseField('Targets') as unknown as shapes.RdsdbProxyTarget[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbProxyTargets',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBProxyTargets.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          TargetGroupName: this.__input.targetGroupName,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBProxyTargets.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribeDbSecurityGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbSecurityGroupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSecurityGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSecurityGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBSecurityGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSecurityGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSecurityGroups.DBSecurityGroups'),
        outputPath: 'DBSecurityGroups',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBSecurityGroups.DBSecurityGroups', props);
    return resource.getResponseField('DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroup[];
  }

}

export class RDSResponsesDescribeDbSnapshotAttributes {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbSnapshotAttributesMessage) {
  }

  public get dbSnapshotAttributesResult(): RDSResponsesDescribeDbSnapshotAttributesDbSnapshotAttributesResult {
    return new RDSResponsesDescribeDbSnapshotAttributesDbSnapshotAttributesResult(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDescribeDbSnapshotAttributesDbSnapshotAttributesResult {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbSnapshotAttributesMessage) {
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSnapshotAttributes',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSnapshotAttributes.DBSnapshotAttributesResult.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshotAttributesResult.DBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBSnapshotAttributes.DBSnapshotAttributesResult.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshotAttributesResult.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbSnapshotAttributes(): shapes.RdsdbSnapshotAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSnapshotAttributes',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSnapshotAttributes.DBSnapshotAttributesResult.DBSnapshotAttributes'),
        outputPath: 'DBSnapshotAttributesResult.DBSnapshotAttributes',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBSnapshotAttributes.DBSnapshotAttributesResult.DBSnapshotAttributes', props);
    return resource.getResponseField('DBSnapshotAttributesResult.DBSnapshotAttributes') as unknown as shapes.RdsdbSnapshotAttribute[];
  }

}

export class RDSResponsesDescribeDbSnapshots {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbSnapshotsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSnapshots',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSnapshots.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          SnapshotType: this.__input.snapshotType,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          IncludeShared: this.__input.includeShared,
          IncludePublic: this.__input.includePublic,
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBSnapshots.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbSnapshots(): shapes.RdsdbSnapshot[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSnapshots',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSnapshots.DBSnapshots'),
        outputPath: 'DBSnapshots',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          SnapshotType: this.__input.snapshotType,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          IncludeShared: this.__input.includeShared,
          IncludePublic: this.__input.includePublic,
          DbiResourceId: this.__input.dbiResourceId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBSnapshots.DBSnapshots', props);
    return resource.getResponseField('DBSnapshots') as unknown as shapes.RdsdbSnapshot[];
  }

}

export class RDSResponsesDescribeDbSubnetGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeDbSubnetGroupsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSubnetGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSubnetGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBSubnetGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get dbSubnetGroups(): shapes.RdsdbSubnetGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeDbSubnetGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeDBSubnetGroups.DBSubnetGroups'),
        outputPath: 'DBSubnetGroups',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeDBSubnetGroups.DBSubnetGroups', props);
    return resource.getResponseField('DBSubnetGroups') as unknown as shapes.RdsdbSubnetGroup[];
  }

}

export class RDSResponsesDescribeEngineDefaultClusterParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeEngineDefaultClusterParametersMessage) {
  }

  public get engineDefaults(): RDSResponsesDescribeEngineDefaultClusterParametersEngineDefaults {
    return new RDSResponsesDescribeEngineDefaultClusterParametersEngineDefaults(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDescribeEngineDefaultClusterParametersEngineDefaults {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeEngineDefaultClusterParametersMessage) {
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultClusterParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultClusterParameters.EngineDefaults.DBParameterGroupFamily'),
        outputPath: 'EngineDefaults.DBParameterGroupFamily',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultClusterParameters.EngineDefaults.DBParameterGroupFamily', props);
    return resource.getResponseField('EngineDefaults.DBParameterGroupFamily') as unknown as string;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultClusterParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultClusterParameters.EngineDefaults.Marker'),
        outputPath: 'EngineDefaults.Marker',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultClusterParameters.EngineDefaults.Marker', props);
    return resource.getResponseField('EngineDefaults.Marker') as unknown as string;
  }

  public get parameters(): shapes.RdsParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultClusterParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultClusterParameters.EngineDefaults.Parameters'),
        outputPath: 'EngineDefaults.Parameters',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultClusterParameters.EngineDefaults.Parameters', props);
    return resource.getResponseField('EngineDefaults.Parameters') as unknown as shapes.RdsParameter[];
  }

}

export class RDSResponsesDescribeEngineDefaultParameters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeEngineDefaultParametersMessage) {
  }

  public get engineDefaults(): RDSResponsesDescribeEngineDefaultParametersEngineDefaults {
    return new RDSResponsesDescribeEngineDefaultParametersEngineDefaults(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDescribeEngineDefaultParametersEngineDefaults {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeEngineDefaultParametersMessage) {
  }

  public get dbParameterGroupFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultParameters.EngineDefaults.DBParameterGroupFamily'),
        outputPath: 'EngineDefaults.DBParameterGroupFamily',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultParameters.EngineDefaults.DBParameterGroupFamily', props);
    return resource.getResponseField('EngineDefaults.DBParameterGroupFamily') as unknown as string;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultParameters.EngineDefaults.Marker'),
        outputPath: 'EngineDefaults.Marker',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultParameters.EngineDefaults.Marker', props);
    return resource.getResponseField('EngineDefaults.Marker') as unknown as string;
  }

  public get parameters(): shapes.RdsParameter[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEngineDefaultParameters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEngineDefaultParameters.EngineDefaults.Parameters'),
        outputPath: 'EngineDefaults.Parameters',
        parameters: {
          DBParameterGroupFamily: this.__input.dbParameterGroupFamily,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEngineDefaultParameters.EngineDefaults.Parameters', props);
    return resource.getResponseField('EngineDefaults.Parameters') as unknown as shapes.RdsParameter[];
  }

}

export class RDSResponsesDescribeEventCategories {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeEventCategoriesMessage) {
  }

  public get eventCategoriesMapList(): shapes.RdsEventCategoriesMap[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventCategories',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEventCategories.EventCategoriesMapList'),
        outputPath: 'EventCategoriesMapList',
        parameters: {
          SourceType: this.__input.sourceType,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEventCategories.EventCategoriesMapList', props);
    return resource.getResponseField('EventCategoriesMapList') as unknown as shapes.RdsEventCategoriesMap[];
  }

}

export class RDSResponsesDescribeEventSubscriptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeEventSubscriptionsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventSubscriptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEventSubscriptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEventSubscriptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get eventSubscriptionsList(): shapes.RdsEventSubscription[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEventSubscriptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEventSubscriptions.EventSubscriptionsList'),
        outputPath: 'EventSubscriptionsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEventSubscriptions.EventSubscriptionsList', props);
    return resource.getResponseField('EventSubscriptionsList') as unknown as shapes.RdsEventSubscription[];
  }

}

export class RDSResponsesDescribeEvents {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeEventsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEvents',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEvents.Marker'),
        outputPath: 'Marker',
        parameters: {
          SourceIdentifier: this.__input.sourceIdentifier,
          SourceType: this.__input.sourceType,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Duration: this.__input.duration,
          EventCategories: this.__input.eventCategories,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEvents.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get events(): shapes.RdsEvent[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeEvents',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeEvents.Events'),
        outputPath: 'Events',
        parameters: {
          SourceIdentifier: this.__input.sourceIdentifier,
          SourceType: this.__input.sourceType,
          StartTime: this.__input.startTime,
          EndTime: this.__input.endTime,
          Duration: this.__input.duration,
          EventCategories: this.__input.eventCategories,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeEvents.Events', props);
    return resource.getResponseField('Events') as unknown as shapes.RdsEvent[];
  }

}

export class RDSResponsesDescribeExportTasks {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeExportTasksMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeExportTasks',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeExportTasks.Marker'),
        outputPath: 'Marker',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeExportTasks.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get exportTasks(): shapes.RdsExportTask[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeExportTasks',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeExportTasks.ExportTasks'),
        outputPath: 'ExportTasks',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeExportTasks.ExportTasks', props);
    return resource.getResponseField('ExportTasks') as unknown as shapes.RdsExportTask[];
  }

}

export class RDSResponsesDescribeGlobalClusters {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeGlobalClustersMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeGlobalClusters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeGlobalClusters.Marker'),
        outputPath: 'Marker',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeGlobalClusters.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get globalClusters(): shapes.RdsGlobalCluster[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeGlobalClusters',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeGlobalClusters.GlobalClusters'),
        outputPath: 'GlobalClusters',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeGlobalClusters.GlobalClusters', props);
    return resource.getResponseField('GlobalClusters') as unknown as shapes.RdsGlobalCluster[];
  }

}

export class RDSResponsesDescribeInstallationMedia {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeInstallationMediaMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeInstallationMedia.Marker'),
        outputPath: 'Marker',
        parameters: {
          InstallationMediaId: this.__input.installationMediaId,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstallationMedia.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get installationMedia(): shapes.RdsInstallationMedia[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeInstallationMedia.InstallationMedia'),
        outputPath: 'InstallationMedia',
        parameters: {
          InstallationMediaId: this.__input.installationMediaId,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeInstallationMedia.InstallationMedia', props);
    return resource.getResponseField('InstallationMedia') as unknown as shapes.RdsInstallationMedia[];
  }

}

export class RDSResponsesDescribeOptionGroupOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeOptionGroupOptionsMessage) {
  }

  public get optionGroupOptions(): shapes.RdsOptionGroupOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOptionGroupOptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOptionGroupOptions.OptionGroupOptions'),
        outputPath: 'OptionGroupOptions',
        parameters: {
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOptionGroupOptions.OptionGroupOptions', props);
    return resource.getResponseField('OptionGroupOptions') as unknown as shapes.RdsOptionGroupOption[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOptionGroupOptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOptionGroupOptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOptionGroupOptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribeOptionGroups {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeOptionGroupsMessage) {
  }

  public get optionGroupsList(): shapes.RdsOptionGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOptionGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOptionGroups.OptionGroupsList'),
        outputPath: 'OptionGroupsList',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOptionGroups.OptionGroupsList', props);
    return resource.getResponseField('OptionGroupsList') as unknown as shapes.RdsOptionGroup[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOptionGroups',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOptionGroups.Marker'),
        outputPath: 'Marker',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
          EngineName: this.__input.engineName,
          MajorEngineVersion: this.__input.majorEngineVersion,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOptionGroups.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribeOrderableDbInstanceOptions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeOrderableDbInstanceOptionsMessage) {
  }

  public get orderableDbInstanceOptions(): shapes.RdsOrderableDbInstanceOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOrderableDbInstanceOptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOrderableDBInstanceOptions.OrderableDBInstanceOptions'),
        outputPath: 'OrderableDBInstanceOptions',
        parameters: {
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DBInstanceClass: this.__input.dbInstanceClass,
          LicenseModel: this.__input.licenseModel,
          AvailabilityZoneGroup: this.__input.availabilityZoneGroup,
          Vpc: this.__input.vpc,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOrderableDBInstanceOptions.OrderableDBInstanceOptions', props);
    return resource.getResponseField('OrderableDBInstanceOptions') as unknown as shapes.RdsOrderableDbInstanceOption[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeOrderableDbInstanceOptions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeOrderableDBInstanceOptions.Marker'),
        outputPath: 'Marker',
        parameters: {
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          DBInstanceClass: this.__input.dbInstanceClass,
          LicenseModel: this.__input.licenseModel,
          AvailabilityZoneGroup: this.__input.availabilityZoneGroup,
          Vpc: this.__input.vpc,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeOrderableDBInstanceOptions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribePendingMaintenanceActions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribePendingMaintenanceActionsMessage) {
  }

  public get pendingMaintenanceActions(): shapes.RdsResourcePendingMaintenanceActions[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePendingMaintenanceActions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribePendingMaintenanceActions.PendingMaintenanceActions'),
        outputPath: 'PendingMaintenanceActions',
        parameters: {
          ResourceIdentifier: this.__input.resourceIdentifier,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePendingMaintenanceActions.PendingMaintenanceActions', props);
    return resource.getResponseField('PendingMaintenanceActions') as unknown as shapes.RdsResourcePendingMaintenanceActions[];
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describePendingMaintenanceActions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribePendingMaintenanceActions.Marker'),
        outputPath: 'Marker',
        parameters: {
          ResourceIdentifier: this.__input.resourceIdentifier,
          Filters: this.__input.filters,
          Marker: this.__input.marker,
          MaxRecords: this.__input.maxRecords,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribePendingMaintenanceActions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

}

export class RDSResponsesDescribeReservedDbInstances {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeReservedDbInstancesMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedDbInstances',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeReservedDBInstances.Marker'),
        outputPath: 'Marker',
        parameters: {
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          DBInstanceClass: this.__input.dbInstanceClass,
          Duration: this.__input.duration,
          ProductDescription: this.__input.productDescription,
          OfferingType: this.__input.offeringType,
          MultiAZ: this.__input.multiAz,
          LeaseId: this.__input.leaseId,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedDBInstances.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get reservedDbInstances(): shapes.RdsReservedDbInstance[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedDbInstances',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeReservedDBInstances.ReservedDBInstances'),
        outputPath: 'ReservedDBInstances',
        parameters: {
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          DBInstanceClass: this.__input.dbInstanceClass,
          Duration: this.__input.duration,
          ProductDescription: this.__input.productDescription,
          OfferingType: this.__input.offeringType,
          MultiAZ: this.__input.multiAz,
          LeaseId: this.__input.leaseId,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedDBInstances.ReservedDBInstances', props);
    return resource.getResponseField('ReservedDBInstances') as unknown as shapes.RdsReservedDbInstance[];
  }

}

export class RDSResponsesDescribeReservedDbInstancesOfferings {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeReservedDbInstancesOfferingsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedDbInstancesOfferings',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeReservedDBInstancesOfferings.Marker'),
        outputPath: 'Marker',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          DBInstanceClass: this.__input.dbInstanceClass,
          Duration: this.__input.duration,
          ProductDescription: this.__input.productDescription,
          OfferingType: this.__input.offeringType,
          MultiAZ: this.__input.multiAz,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedDBInstancesOfferings.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get reservedDbInstancesOfferings(): shapes.RdsReservedDbInstancesOffering[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeReservedDbInstancesOfferings',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeReservedDBInstancesOfferings.ReservedDBInstancesOfferings'),
        outputPath: 'ReservedDBInstancesOfferings',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          DBInstanceClass: this.__input.dbInstanceClass,
          Duration: this.__input.duration,
          ProductDescription: this.__input.productDescription,
          OfferingType: this.__input.offeringType,
          MultiAZ: this.__input.multiAz,
          Filters: this.__input.filters,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeReservedDBInstancesOfferings.ReservedDBInstancesOfferings', props);
    return resource.getResponseField('ReservedDBInstancesOfferings') as unknown as shapes.RdsReservedDbInstancesOffering[];
  }

}

export class RDSResponsesDescribeSourceRegions {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeSourceRegionsMessage) {
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSourceRegions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeSourceRegions.Marker'),
        outputPath: 'Marker',
        parameters: {
          RegionName: this.__input.regionName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSourceRegions.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get sourceRegions(): shapes.RdsSourceRegion[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeSourceRegions',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeSourceRegions.SourceRegions'),
        outputPath: 'SourceRegions',
        parameters: {
          RegionName: this.__input.regionName,
          MaxRecords: this.__input.maxRecords,
          Marker: this.__input.marker,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeSourceRegions.SourceRegions', props);
    return resource.getResponseField('SourceRegions') as unknown as shapes.RdsSourceRegion[];
  }

}

export class RDSResponsesDescribeValidDbInstanceModifications {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeValidDbInstanceModificationsMessage) {
  }

  public get validDbInstanceModificationsMessage(): RDSResponsesDescribeValidDbInstanceModificationsValidDbInstanceModificationsMessage {
    return new RDSResponsesDescribeValidDbInstanceModificationsValidDbInstanceModificationsMessage(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesDescribeValidDbInstanceModificationsValidDbInstanceModificationsMessage {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDescribeValidDbInstanceModificationsMessage) {
  }

  public get storage(): shapes.RdsValidStorageOptions[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeValidDbInstanceModifications',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeValidDBInstanceModifications.ValidDBInstanceModificationsMessage.Storage'),
        outputPath: 'ValidDBInstanceModificationsMessage.Storage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeValidDBInstanceModifications.ValidDBInstanceModificationsMessage.Storage', props);
    return resource.getResponseField('ValidDBInstanceModificationsMessage.Storage') as unknown as shapes.RdsValidStorageOptions[];
  }

  public get validProcessorFeatures(): shapes.RdsAvailableProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'describeValidDbInstanceModifications',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DescribeValidDBInstanceModifications.ValidDBInstanceModificationsMessage.ValidProcessorFeatures'),
        outputPath: 'ValidDBInstanceModificationsMessage.ValidProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DescribeValidDBInstanceModifications.ValidDBInstanceModificationsMessage.ValidProcessorFeatures', props);
    return resource.getResponseField('ValidDBInstanceModificationsMessage.ValidProcessorFeatures') as unknown as shapes.RdsAvailableProcessorFeature[];
  }

}

export class RDSResponsesDownloadDbLogFilePortion {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsDownloadDbLogFilePortionMessage) {
  }

  public get logFileData(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'downloadDbLogFilePortion',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DownloadDBLogFilePortion.LogFileData'),
        outputPath: 'LogFileData',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          LogFileName: this.__input.logFileName,
          Marker: this.__input.marker,
          NumberOfLines: this.__input.numberOfLines,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DownloadDBLogFilePortion.LogFileData', props);
    return resource.getResponseField('LogFileData') as unknown as string;
  }

  public get marker(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'downloadDbLogFilePortion',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DownloadDBLogFilePortion.Marker'),
        outputPath: 'Marker',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          LogFileName: this.__input.logFileName,
          Marker: this.__input.marker,
          NumberOfLines: this.__input.numberOfLines,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DownloadDBLogFilePortion.Marker', props);
    return resource.getResponseField('Marker') as unknown as string;
  }

  public get additionalDataPending(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'downloadDbLogFilePortion',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.DownloadDBLogFilePortion.AdditionalDataPending'),
        outputPath: 'AdditionalDataPending',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          LogFileName: this.__input.logFileName,
          Marker: this.__input.marker,
          NumberOfLines: this.__input.numberOfLines,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'DownloadDBLogFilePortion.AdditionalDataPending', props);
    return resource.getResponseField('AdditionalDataPending') as unknown as boolean;
  }

}

export class RDSResponsesFailoverDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsFailoverDbClusterMessage) {
  }

  public get dbCluster(): RDSResponsesFailoverDbClusterDbCluster {
    return new RDSResponsesFailoverDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesFailoverDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsFailoverDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSResponsesFailoverDbClusterDbClusterScalingConfigurationInfo {
    return new RDSResponsesFailoverDbClusterDbClusterScalingConfigurationInfo(this.__scope, this.__resources, this.__input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSResponsesFailoverDbClusterDbClusterScalingConfigurationInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsFailoverDbClusterMessage) {
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'failoverDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.FailoverDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'FailoverDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesImportInstallationMedia {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsImportInstallationMediaMessage) {
  }

  public get installationMediaId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.InstallationMediaId'),
        outputPath: 'InstallationMediaId',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          EngineInstallationMediaPath: this.__input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.__input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstallationMedia.InstallationMediaId', props);
    return resource.getResponseField('InstallationMediaId') as unknown as string;
  }

  public get customAvailabilityZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.CustomAvailabilityZoneId'),
        outputPath: 'CustomAvailabilityZoneId',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          EngineInstallationMediaPath: this.__input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.__input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstallationMedia.CustomAvailabilityZoneId', props);
    return resource.getResponseField('CustomAvailabilityZoneId') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.Engine'),
        outputPath: 'Engine',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          EngineInstallationMediaPath: this.__input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.__input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstallationMedia.Engine', props);
    return resource.getResponseField('Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.EngineVersion'),
        outputPath: 'EngineVersion',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          EngineInstallationMediaPath: this.__input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.__input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstallationMedia.EngineVersion', props);
    return resource.getResponseField('EngineVersion') as unknown as string;
  }

  public get engineInstallationMediaPath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.EngineInstallationMediaPath'),
        outputPath: 'EngineInstallationMediaPath',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          EngineInstallationMediaPath: this.__input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.__input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstallationMedia.EngineInstallationMediaPath', props);
    return resource.getResponseField('EngineInstallationMediaPath') as unknown as string;
  }

  public get osInstallationMediaPath(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.OSInstallationMediaPath'),
        outputPath: 'OSInstallationMediaPath',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          EngineInstallationMediaPath: this.__input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.__input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstallationMedia.OSInstallationMediaPath', props);
    return resource.getResponseField('OSInstallationMediaPath') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.Status'),
        outputPath: 'Status',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          EngineInstallationMediaPath: this.__input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.__input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstallationMedia.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get failureCause(): RDSResponsesImportInstallationMediaFailureCause {
    return new RDSResponsesImportInstallationMediaFailureCause(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesImportInstallationMediaFailureCause {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsImportInstallationMediaMessage) {
  }

  public get message(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'importInstallationMedia',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ImportInstallationMedia.FailureCause.Message'),
        outputPath: 'FailureCause.Message',
        parameters: {
          CustomAvailabilityZoneId: this.__input.customAvailabilityZoneId,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          EngineInstallationMediaPath: this.__input.engineInstallationMediaPath,
          OSInstallationMediaPath: this.__input.osInstallationMediaPath,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ImportInstallationMedia.FailureCause.Message', props);
    return resource.getResponseField('FailureCause.Message') as unknown as string;
  }

}

export class RDSResponsesListTagsForResource {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsListTagsForResourceMessage) {
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'listTagsForResource',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ListTagsForResource.TagList'),
        outputPath: 'TagList',
        parameters: {
          ResourceName: this.__input.resourceName,
          Filters: this.__input.filters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ListTagsForResource.TagList', props);
    return resource.getResponseField('TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesModifyCertificates {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyCertificatesMessage) {
  }

  public get certificate(): RDSResponsesModifyCertificatesCertificate {
    return new RDSResponsesModifyCertificatesCertificate(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyCertificatesCertificate {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyCertificatesMessage) {
  }

  public get certificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.CertificateIdentifier'),
        outputPath: 'Certificate.CertificateIdentifier',
        parameters: {
          CertificateIdentifier: this.__input.certificateIdentifier,
          RemoveCustomerOverride: this.__input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCertificates.Certificate.CertificateIdentifier', props);
    return resource.getResponseField('Certificate.CertificateIdentifier') as unknown as string;
  }

  public get certificateType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.CertificateType'),
        outputPath: 'Certificate.CertificateType',
        parameters: {
          CertificateIdentifier: this.__input.certificateIdentifier,
          RemoveCustomerOverride: this.__input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCertificates.Certificate.CertificateType', props);
    return resource.getResponseField('Certificate.CertificateType') as unknown as string;
  }

  public get thumbprint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.Thumbprint'),
        outputPath: 'Certificate.Thumbprint',
        parameters: {
          CertificateIdentifier: this.__input.certificateIdentifier,
          RemoveCustomerOverride: this.__input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCertificates.Certificate.Thumbprint', props);
    return resource.getResponseField('Certificate.Thumbprint') as unknown as string;
  }

  public get validFrom(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.ValidFrom'),
        outputPath: 'Certificate.ValidFrom',
        parameters: {
          CertificateIdentifier: this.__input.certificateIdentifier,
          RemoveCustomerOverride: this.__input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCertificates.Certificate.ValidFrom', props);
    return resource.getResponseField('Certificate.ValidFrom') as unknown as string;
  }

  public get validTill(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.ValidTill'),
        outputPath: 'Certificate.ValidTill',
        parameters: {
          CertificateIdentifier: this.__input.certificateIdentifier,
          RemoveCustomerOverride: this.__input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCertificates.Certificate.ValidTill', props);
    return resource.getResponseField('Certificate.ValidTill') as unknown as string;
  }

  public get certificateArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.CertificateArn'),
        outputPath: 'Certificate.CertificateArn',
        parameters: {
          CertificateIdentifier: this.__input.certificateIdentifier,
          RemoveCustomerOverride: this.__input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCertificates.Certificate.CertificateArn', props);
    return resource.getResponseField('Certificate.CertificateArn') as unknown as string;
  }

  public get customerOverride(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.CustomerOverride'),
        outputPath: 'Certificate.CustomerOverride',
        parameters: {
          CertificateIdentifier: this.__input.certificateIdentifier,
          RemoveCustomerOverride: this.__input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCertificates.Certificate.CustomerOverride', props);
    return resource.getResponseField('Certificate.CustomerOverride') as unknown as boolean;
  }

  public get customerOverrideValidTill(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCertificates',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCertificates.Certificate.CustomerOverrideValidTill'),
        outputPath: 'Certificate.CustomerOverrideValidTill',
        parameters: {
          CertificateIdentifier: this.__input.certificateIdentifier,
          RemoveCustomerOverride: this.__input.removeCustomerOverride,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCertificates.Certificate.CustomerOverrideValidTill', props);
    return resource.getResponseField('Certificate.CustomerOverrideValidTill') as unknown as string;
  }

}

export class RDSResponsesModifyCurrentDbClusterCapacity {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyCurrentDbClusterCapacityMessage) {
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCurrentDbClusterCapacity',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCurrentDBClusterCapacity.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Capacity: this.__input.capacity,
          SecondsBeforeTimeout: this.__input.secondsBeforeTimeout,
          TimeoutAction: this.__input.timeoutAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCurrentDBClusterCapacity.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get pendingCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCurrentDbClusterCapacity',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCurrentDBClusterCapacity.PendingCapacity'),
        outputPath: 'PendingCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Capacity: this.__input.capacity,
          SecondsBeforeTimeout: this.__input.secondsBeforeTimeout,
          TimeoutAction: this.__input.timeoutAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCurrentDBClusterCapacity.PendingCapacity', props);
    return resource.getResponseField('PendingCapacity') as unknown as number;
  }

  public get currentCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCurrentDbClusterCapacity',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCurrentDBClusterCapacity.CurrentCapacity'),
        outputPath: 'CurrentCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Capacity: this.__input.capacity,
          SecondsBeforeTimeout: this.__input.secondsBeforeTimeout,
          TimeoutAction: this.__input.timeoutAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCurrentDBClusterCapacity.CurrentCapacity', props);
    return resource.getResponseField('CurrentCapacity') as unknown as number;
  }

  public get secondsBeforeTimeout(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCurrentDbClusterCapacity',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCurrentDBClusterCapacity.SecondsBeforeTimeout'),
        outputPath: 'SecondsBeforeTimeout',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Capacity: this.__input.capacity,
          SecondsBeforeTimeout: this.__input.secondsBeforeTimeout,
          TimeoutAction: this.__input.timeoutAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCurrentDBClusterCapacity.SecondsBeforeTimeout', props);
    return resource.getResponseField('SecondsBeforeTimeout') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyCurrentDbClusterCapacity',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyCurrentDBClusterCapacity.TimeoutAction'),
        outputPath: 'TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          Capacity: this.__input.capacity,
          SecondsBeforeTimeout: this.__input.secondsBeforeTimeout,
          TimeoutAction: this.__input.timeoutAction,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyCurrentDBClusterCapacity.TimeoutAction', props);
    return resource.getResponseField('TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesModifyDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbClusterMessage) {
  }

  public get dbCluster(): RDSResponsesModifyDbClusterDbCluster {
    return new RDSResponsesModifyDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSResponsesModifyDbClusterDbClusterScalingConfigurationInfo {
    return new RDSResponsesModifyDbClusterDbClusterScalingConfigurationInfo(this.__scope, this.__resources, this.__input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSResponsesModifyDbClusterDbClusterScalingConfigurationInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbClusterMessage) {
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          NewDBClusterIdentifier: this.__input.newDbClusterIdentifier,
          ApplyImmediately: this.__input.applyImmediately,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Port: this.__input.port,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          DBInstanceParameterGroupName: this.__input.dbInstanceParameterGroupName,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DeletionProtection: this.__input.deletionProtection,
          EnableHttpEndpoint: this.__input.enableHttpEndpoint,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          EnableGlobalWriteForwarding: this.__input.enableGlobalWriteForwarding,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesModifyDbClusterEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbClusterEndpointMessage) {
  }

  public get dbClusterEndpointIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.DBClusterEndpointIdentifier'),
        outputPath: 'DBClusterEndpointIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.DBClusterEndpointIdentifier', props);
    return resource.getResponseField('DBClusterEndpointIdentifier') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.DBClusterIdentifier'),
        outputPath: 'DBClusterIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.DBClusterIdentifier', props);
    return resource.getResponseField('DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterEndpointResourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.DBClusterEndpointResourceIdentifier'),
        outputPath: 'DBClusterEndpointResourceIdentifier',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.DBClusterEndpointResourceIdentifier', props);
    return resource.getResponseField('DBClusterEndpointResourceIdentifier') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.Endpoint'),
        outputPath: 'Endpoint',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.Endpoint', props);
    return resource.getResponseField('Endpoint') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.Status'),
        outputPath: 'Status',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get endpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.EndpointType'),
        outputPath: 'EndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.EndpointType', props);
    return resource.getResponseField('EndpointType') as unknown as string;
  }

  public get customEndpointType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.CustomEndpointType'),
        outputPath: 'CustomEndpointType',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.CustomEndpointType', props);
    return resource.getResponseField('CustomEndpointType') as unknown as string;
  }

  public get staticMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.StaticMembers'),
        outputPath: 'StaticMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.StaticMembers', props);
    return resource.getResponseField('StaticMembers') as unknown as string[];
  }

  public get excludedMembers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.ExcludedMembers'),
        outputPath: 'ExcludedMembers',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.ExcludedMembers', props);
    return resource.getResponseField('ExcludedMembers') as unknown as string[];
  }

  public get dbClusterEndpointArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterEndpoint',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterEndpoint.DBClusterEndpointArn'),
        outputPath: 'DBClusterEndpointArn',
        parameters: {
          DBClusterEndpointIdentifier: this.__input.dbClusterEndpointIdentifier,
          EndpointType: this.__input.endpointType,
          StaticMembers: this.__input.staticMembers,
          ExcludedMembers: this.__input.excludedMembers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterEndpoint.DBClusterEndpointArn', props);
    return resource.getResponseField('DBClusterEndpointArn') as unknown as string;
  }

}

export class RDSResponsesModifyDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroupName',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroupName') as unknown as string;
  }

}

export class RDSResponsesModifyDbClusterSnapshotAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbClusterSnapshotAttributeMessage) {
  }

  public get dbClusterSnapshotAttributesResult(): RDSResponsesModifyDbClusterSnapshotAttributeDbClusterSnapshotAttributesResult {
    return new RDSResponsesModifyDbClusterSnapshotAttributeDbClusterSnapshotAttributesResult(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyDbClusterSnapshotAttributeDbClusterSnapshotAttributesResult {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbClusterSnapshotAttributeMessage) {
  }

  public get dbClusterSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterSnapshotAttribute',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          AttributeName: this.__input.attributeName,
          ValuesToAdd: this.__input.valuesToAdd,
          ValuesToRemove: this.__input.valuesToRemove,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotIdentifier') as unknown as string;
  }

  public get dbClusterSnapshotAttributes(): shapes.RdsdbClusterSnapshotAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbClusterSnapshotAttribute',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes'),
        outputPath: 'DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes',
        parameters: {
          DBClusterSnapshotIdentifier: this.__input.dbClusterSnapshotIdentifier,
          AttributeName: this.__input.attributeName,
          ValuesToAdd: this.__input.valuesToAdd,
          ValuesToRemove: this.__input.valuesToRemove,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBClusterSnapshotAttribute.DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes', props);
    return resource.getResponseField('DBClusterSnapshotAttributesResult.DBClusterSnapshotAttributes') as unknown as shapes.RdsdbClusterSnapshotAttribute[];
  }

}

export class RDSResponsesModifyDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbInstanceMessage) {
  }

  public get dbInstance(): RDSResponsesModifyDbInstanceDbInstance {
    return new RDSResponsesModifyDbInstanceDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyDbInstanceDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbInstanceMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesModifyDbInstanceDbInstanceEndpoint {
    return new RDSResponsesModifyDbInstanceDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesModifyDbInstanceDbInstanceDbSubnetGroup {
    return new RDSResponsesModifyDbInstanceDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesModifyDbInstanceDbInstancePendingModifiedValues {
    return new RDSResponsesModifyDbInstanceDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesModifyDbInstanceDbInstanceListenerEndpoint {
    return new RDSResponsesModifyDbInstanceDbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesModifyDbInstanceDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesModifyDbInstanceDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbInstanceMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesModifyDbInstanceDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbInstanceMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesModifyDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesModifyDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesModifyDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbInstanceMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesModifyDbInstanceDbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          ApplyImmediately: this.__input.applyImmediately,
          MasterUserPassword: this.__input.masterUserPassword,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AllowMajorVersionUpgrade: this.__input.allowMajorVersionUpgrade,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          NewDBInstanceIdentifier: this.__input.newDbInstanceIdentifier,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          CACertificateIdentifier: this.__input.caCertificateIdentifier,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          DBPortNumber: this.__input.dbPortNumber,
          PubliclyAccessible: this.__input.publiclyAccessible,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          PromotionTier: this.__input.promotionTier,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          CloudwatchLogsExportConfiguration: {
            EnableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.enableLogTypes,
            DisableLogTypes: this.__input.cloudwatchLogsExportConfiguration?.disableLogTypes,
          },
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
          CertificateRotationRestart: this.__input.certificateRotationRestart,
          ReplicaMode: this.__input.replicaMode,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesModifyDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbParameterGroupMessage) {
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroupName',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroupName') as unknown as string;
  }

}

export class RDSResponsesModifyDbProxy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbProxyRequest) {
  }

  public get dbProxy(): RDSResponsesModifyDbProxyDbProxy {
    return new RDSResponsesModifyDbProxyDbProxy(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyDbProxyDbProxy {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbProxyRequest) {
  }

  public get dbProxyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.DBProxyName'),
        outputPath: 'DBProxy.DBProxyName',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.DBProxyName', props);
    return resource.getResponseField('DBProxy.DBProxyName') as unknown as string;
  }

  public get dbProxyArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.DBProxyArn'),
        outputPath: 'DBProxy.DBProxyArn',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.DBProxyArn', props);
    return resource.getResponseField('DBProxy.DBProxyArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.Status'),
        outputPath: 'DBProxy.Status',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.Status', props);
    return resource.getResponseField('DBProxy.Status') as unknown as string;
  }

  public get engineFamily(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.EngineFamily'),
        outputPath: 'DBProxy.EngineFamily',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.EngineFamily', props);
    return resource.getResponseField('DBProxy.EngineFamily') as unknown as string;
  }

  public get vpcSecurityGroupIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.VpcSecurityGroupIds'),
        outputPath: 'DBProxy.VpcSecurityGroupIds',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.VpcSecurityGroupIds', props);
    return resource.getResponseField('DBProxy.VpcSecurityGroupIds') as unknown as string[];
  }

  public get vpcSubnetIds(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.VpcSubnetIds'),
        outputPath: 'DBProxy.VpcSubnetIds',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.VpcSubnetIds', props);
    return resource.getResponseField('DBProxy.VpcSubnetIds') as unknown as string[];
  }

  public get auth(): shapes.RdsUserAuthConfigInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.Auth'),
        outputPath: 'DBProxy.Auth',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.Auth', props);
    return resource.getResponseField('DBProxy.Auth') as unknown as shapes.RdsUserAuthConfigInfo[];
  }

  public get roleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.RoleArn'),
        outputPath: 'DBProxy.RoleArn',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.RoleArn', props);
    return resource.getResponseField('DBProxy.RoleArn') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.Endpoint'),
        outputPath: 'DBProxy.Endpoint',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.Endpoint', props);
    return resource.getResponseField('DBProxy.Endpoint') as unknown as string;
  }

  public get requireTls(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.RequireTLS'),
        outputPath: 'DBProxy.RequireTLS',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.RequireTLS', props);
    return resource.getResponseField('DBProxy.RequireTLS') as unknown as boolean;
  }

  public get idleClientTimeout(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.IdleClientTimeout'),
        outputPath: 'DBProxy.IdleClientTimeout',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.IdleClientTimeout', props);
    return resource.getResponseField('DBProxy.IdleClientTimeout') as unknown as number;
  }

  public get debugLogging(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.DebugLogging'),
        outputPath: 'DBProxy.DebugLogging',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.DebugLogging', props);
    return resource.getResponseField('DBProxy.DebugLogging') as unknown as boolean;
  }

  public get createdDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.CreatedDate'),
        outputPath: 'DBProxy.CreatedDate',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.CreatedDate', props);
    return resource.getResponseField('DBProxy.CreatedDate') as unknown as string;
  }

  public get updatedDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxy',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxy.DBProxy.UpdatedDate'),
        outputPath: 'DBProxy.UpdatedDate',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          NewDBProxyName: this.__input.newDbProxyName,
          Auth: this.__input.auth,
          RequireTLS: this.__input.requireTls,
          IdleClientTimeout: this.__input.idleClientTimeout,
          DebugLogging: this.__input.debugLogging,
          RoleArn: this.__input.roleArn,
          SecurityGroups: this.__input.securityGroups,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxy.DBProxy.UpdatedDate', props);
    return resource.getResponseField('DBProxy.UpdatedDate') as unknown as string;
  }

}

export class RDSResponsesModifyDbProxyTargetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbProxyTargetGroupRequest) {
  }

  public get dbProxyTargetGroup(): RDSResponsesModifyDbProxyTargetGroupDbProxyTargetGroup {
    return new RDSResponsesModifyDbProxyTargetGroupDbProxyTargetGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyDbProxyTargetGroupDbProxyTargetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbProxyTargetGroupRequest) {
  }

  public get dbProxyName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.DBProxyName'),
        outputPath: 'DBProxyTargetGroup.DBProxyName',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.DBProxyName', props);
    return resource.getResponseField('DBProxyTargetGroup.DBProxyName') as unknown as string;
  }

  public get targetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.TargetGroupName'),
        outputPath: 'DBProxyTargetGroup.TargetGroupName',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.TargetGroupName', props);
    return resource.getResponseField('DBProxyTargetGroup.TargetGroupName') as unknown as string;
  }

  public get targetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.TargetGroupArn'),
        outputPath: 'DBProxyTargetGroup.TargetGroupArn',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.TargetGroupArn', props);
    return resource.getResponseField('DBProxyTargetGroup.TargetGroupArn') as unknown as string;
  }

  public get isDefault(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.IsDefault'),
        outputPath: 'DBProxyTargetGroup.IsDefault',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.IsDefault', props);
    return resource.getResponseField('DBProxyTargetGroup.IsDefault') as unknown as boolean;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.Status'),
        outputPath: 'DBProxyTargetGroup.Status',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.Status', props);
    return resource.getResponseField('DBProxyTargetGroup.Status') as unknown as string;
  }

  public get connectionPoolConfig(): RDSResponsesModifyDbProxyTargetGroupDbProxyTargetGroupConnectionPoolConfig {
    return new RDSResponsesModifyDbProxyTargetGroupDbProxyTargetGroupConnectionPoolConfig(this.__scope, this.__resources, this.__input);
  }

  public get createdDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.CreatedDate'),
        outputPath: 'DBProxyTargetGroup.CreatedDate',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.CreatedDate', props);
    return resource.getResponseField('DBProxyTargetGroup.CreatedDate') as unknown as string;
  }

  public get updatedDate(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.UpdatedDate'),
        outputPath: 'DBProxyTargetGroup.UpdatedDate',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.UpdatedDate', props);
    return resource.getResponseField('DBProxyTargetGroup.UpdatedDate') as unknown as string;
  }

}

export class RDSResponsesModifyDbProxyTargetGroupDbProxyTargetGroupConnectionPoolConfig {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbProxyTargetGroupRequest) {
  }

  public get maxConnectionsPercent(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.MaxConnectionsPercent'),
        outputPath: 'DBProxyTargetGroup.ConnectionPoolConfig.MaxConnectionsPercent',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.MaxConnectionsPercent', props);
    return resource.getResponseField('DBProxyTargetGroup.ConnectionPoolConfig.MaxConnectionsPercent') as unknown as number;
  }

  public get maxIdleConnectionsPercent(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.MaxIdleConnectionsPercent'),
        outputPath: 'DBProxyTargetGroup.ConnectionPoolConfig.MaxIdleConnectionsPercent',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.MaxIdleConnectionsPercent', props);
    return resource.getResponseField('DBProxyTargetGroup.ConnectionPoolConfig.MaxIdleConnectionsPercent') as unknown as number;
  }

  public get connectionBorrowTimeout(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.ConnectionBorrowTimeout'),
        outputPath: 'DBProxyTargetGroup.ConnectionPoolConfig.ConnectionBorrowTimeout',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.ConnectionBorrowTimeout', props);
    return resource.getResponseField('DBProxyTargetGroup.ConnectionPoolConfig.ConnectionBorrowTimeout') as unknown as number;
  }

  public get sessionPinningFilters(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.SessionPinningFilters'),
        outputPath: 'DBProxyTargetGroup.ConnectionPoolConfig.SessionPinningFilters',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.SessionPinningFilters', props);
    return resource.getResponseField('DBProxyTargetGroup.ConnectionPoolConfig.SessionPinningFilters') as unknown as string[];
  }

  public get initQuery(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbProxyTargetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.InitQuery'),
        outputPath: 'DBProxyTargetGroup.ConnectionPoolConfig.InitQuery',
        parameters: {
          TargetGroupName: this.__input.targetGroupName,
          DBProxyName: this.__input.dbProxyName,
          ConnectionPoolConfig: {
            MaxConnectionsPercent: this.__input.connectionPoolConfig?.maxConnectionsPercent,
            MaxIdleConnectionsPercent: this.__input.connectionPoolConfig?.maxIdleConnectionsPercent,
            ConnectionBorrowTimeout: this.__input.connectionPoolConfig?.connectionBorrowTimeout,
            SessionPinningFilters: this.__input.connectionPoolConfig?.sessionPinningFilters,
            InitQuery: this.__input.connectionPoolConfig?.initQuery,
          },
          NewName: this.__input.newName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBProxyTargetGroup.DBProxyTargetGroup.ConnectionPoolConfig.InitQuery', props);
    return resource.getResponseField('DBProxyTargetGroup.ConnectionPoolConfig.InitQuery') as unknown as string;
  }

}

export class RDSResponsesModifyDbSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbSnapshotMessage) {
  }

  public get dbSnapshot(): RDSResponsesModifyDbSnapshotDbSnapshot {
    return new RDSResponsesModifyDbSnapshotDbSnapshot(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyDbSnapshotDbSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbSnapshotMessage) {
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.DBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.DBInstanceIdentifier'),
        outputPath: 'DBSnapshot.DBInstanceIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.DBInstanceIdentifier', props);
    return resource.getResponseField('DBSnapshot.DBInstanceIdentifier') as unknown as string;
  }

  public get snapshotCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.SnapshotCreateTime'),
        outputPath: 'DBSnapshot.SnapshotCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.SnapshotCreateTime', props);
    return resource.getResponseField('DBSnapshot.SnapshotCreateTime') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Engine'),
        outputPath: 'DBSnapshot.Engine',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.Engine', props);
    return resource.getResponseField('DBSnapshot.Engine') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.AllocatedStorage'),
        outputPath: 'DBSnapshot.AllocatedStorage',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.AllocatedStorage', props);
    return resource.getResponseField('DBSnapshot.AllocatedStorage') as unknown as number;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Status'),
        outputPath: 'DBSnapshot.Status',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.Status', props);
    return resource.getResponseField('DBSnapshot.Status') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Port'),
        outputPath: 'DBSnapshot.Port',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.Port', props);
    return resource.getResponseField('DBSnapshot.Port') as unknown as number;
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.AvailabilityZone'),
        outputPath: 'DBSnapshot.AvailabilityZone',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.AvailabilityZone', props);
    return resource.getResponseField('DBSnapshot.AvailabilityZone') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.VpcId'),
        outputPath: 'DBSnapshot.VpcId',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.VpcId', props);
    return resource.getResponseField('DBSnapshot.VpcId') as unknown as string;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.InstanceCreateTime'),
        outputPath: 'DBSnapshot.InstanceCreateTime',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.InstanceCreateTime', props);
    return resource.getResponseField('DBSnapshot.InstanceCreateTime') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.MasterUsername'),
        outputPath: 'DBSnapshot.MasterUsername',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.MasterUsername', props);
    return resource.getResponseField('DBSnapshot.MasterUsername') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.EngineVersion'),
        outputPath: 'DBSnapshot.EngineVersion',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.EngineVersion', props);
    return resource.getResponseField('DBSnapshot.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.LicenseModel'),
        outputPath: 'DBSnapshot.LicenseModel',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.LicenseModel', props);
    return resource.getResponseField('DBSnapshot.LicenseModel') as unknown as string;
  }

  public get snapshotType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.SnapshotType'),
        outputPath: 'DBSnapshot.SnapshotType',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.SnapshotType', props);
    return resource.getResponseField('DBSnapshot.SnapshotType') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Iops'),
        outputPath: 'DBSnapshot.Iops',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.Iops', props);
    return resource.getResponseField('DBSnapshot.Iops') as unknown as number;
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.OptionGroupName'),
        outputPath: 'DBSnapshot.OptionGroupName',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.OptionGroupName', props);
    return resource.getResponseField('DBSnapshot.OptionGroupName') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.PercentProgress'),
        outputPath: 'DBSnapshot.PercentProgress',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.PercentProgress', props);
    return resource.getResponseField('DBSnapshot.PercentProgress') as unknown as number;
  }

  public get sourceRegion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.SourceRegion'),
        outputPath: 'DBSnapshot.SourceRegion',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.SourceRegion', props);
    return resource.getResponseField('DBSnapshot.SourceRegion') as unknown as string;
  }

  public get sourceDbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier'),
        outputPath: 'DBSnapshot.SourceDBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.SourceDBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshot.SourceDBSnapshotIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.StorageType'),
        outputPath: 'DBSnapshot.StorageType',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.StorageType', props);
    return resource.getResponseField('DBSnapshot.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.TdeCredentialArn'),
        outputPath: 'DBSnapshot.TdeCredentialArn',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.TdeCredentialArn', props);
    return resource.getResponseField('DBSnapshot.TdeCredentialArn') as unknown as string;
  }

  public get encrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Encrypted'),
        outputPath: 'DBSnapshot.Encrypted',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.Encrypted', props);
    return resource.getResponseField('DBSnapshot.Encrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.KmsKeyId'),
        outputPath: 'DBSnapshot.KmsKeyId',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.KmsKeyId', props);
    return resource.getResponseField('DBSnapshot.KmsKeyId') as unknown as string;
  }

  public get dbSnapshotArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.DBSnapshotArn'),
        outputPath: 'DBSnapshot.DBSnapshotArn',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.DBSnapshotArn', props);
    return resource.getResponseField('DBSnapshot.DBSnapshotArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.Timezone'),
        outputPath: 'DBSnapshot.Timezone',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.Timezone', props);
    return resource.getResponseField('DBSnapshot.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBSnapshot.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBSnapshot.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.ProcessorFeatures'),
        outputPath: 'DBSnapshot.ProcessorFeatures',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.ProcessorFeatures', props);
    return resource.getResponseField('DBSnapshot.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.DbiResourceId'),
        outputPath: 'DBSnapshot.DbiResourceId',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.DbiResourceId', props);
    return resource.getResponseField('DBSnapshot.DbiResourceId') as unknown as string;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshot.DBSnapshot.TagList'),
        outputPath: 'DBSnapshot.TagList',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          EngineVersion: this.__input.engineVersion,
          OptionGroupName: this.__input.optionGroupName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshot.DBSnapshot.TagList', props);
    return resource.getResponseField('DBSnapshot.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesModifyDbSnapshotAttribute {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbSnapshotAttributeMessage) {
  }

  public get dbSnapshotAttributesResult(): RDSResponsesModifyDbSnapshotAttributeDbSnapshotAttributesResult {
    return new RDSResponsesModifyDbSnapshotAttributeDbSnapshotAttributesResult(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyDbSnapshotAttributeDbSnapshotAttributesResult {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbSnapshotAttributeMessage) {
  }

  public get dbSnapshotIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshotAttribute',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshotAttribute.DBSnapshotAttributesResult.DBSnapshotIdentifier'),
        outputPath: 'DBSnapshotAttributesResult.DBSnapshotIdentifier',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          AttributeName: this.__input.attributeName,
          ValuesToAdd: this.__input.valuesToAdd,
          ValuesToRemove: this.__input.valuesToRemove,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshotAttribute.DBSnapshotAttributesResult.DBSnapshotIdentifier', props);
    return resource.getResponseField('DBSnapshotAttributesResult.DBSnapshotIdentifier') as unknown as string;
  }

  public get dbSnapshotAttributes(): shapes.RdsdbSnapshotAttribute[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSnapshotAttribute',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSnapshotAttribute.DBSnapshotAttributesResult.DBSnapshotAttributes'),
        outputPath: 'DBSnapshotAttributesResult.DBSnapshotAttributes',
        parameters: {
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          AttributeName: this.__input.attributeName,
          ValuesToAdd: this.__input.valuesToAdd,
          ValuesToRemove: this.__input.valuesToRemove,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSnapshotAttribute.DBSnapshotAttributesResult.DBSnapshotAttributes', props);
    return resource.getResponseField('DBSnapshotAttributesResult.DBSnapshotAttributes') as unknown as shapes.RdsdbSnapshotAttribute[];
  }

}

export class RDSResponsesModifyDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbSubnetGroupMessage) {
  }

  public get dbSubnetGroup(): RDSResponsesModifyDbSubnetGroupDbSubnetGroup {
    return new RDSResponsesModifyDbSubnetGroupDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyDbSubnetGroupDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyDbSubnetGroupMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.VpcId'),
        outputPath: 'DBSubnetGroup.VpcId',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.Subnets'),
        outputPath: 'DBSubnetGroup.Subnets',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyDbSubnetGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DBSubnetGroupDescription: this.__input.dbSubnetGroupDescription,
          SubnetIds: this.__input.subnetIds,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyDBSubnetGroup.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesModifyEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyEventSubscriptionMessage) {
  }

  public get eventSubscription(): RDSResponsesModifyEventSubscriptionEventSubscription {
    return new RDSResponsesModifyEventSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyEventSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyEventSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyEventSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyEventSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SnsTopicArn: this.__input.snsTopicArn,
          SourceType: this.__input.sourceType,
          EventCategories: this.__input.eventCategories,
          Enabled: this.__input.enabled,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyEventSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class RDSResponsesModifyGlobalCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyGlobalClusterMessage) {
  }

  public get globalCluster(): RDSResponsesModifyGlobalClusterGlobalCluster {
    return new RDSResponsesModifyGlobalClusterGlobalCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyGlobalClusterGlobalCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyGlobalClusterMessage) {
  }

  public get globalClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.GlobalClusterIdentifier'),
        outputPath: 'GlobalCluster.GlobalClusterIdentifier',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.__input.newGlobalClusterIdentifier,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyGlobalCluster.GlobalCluster.GlobalClusterIdentifier', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterIdentifier') as unknown as string;
  }

  public get globalClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.GlobalClusterResourceId'),
        outputPath: 'GlobalCluster.GlobalClusterResourceId',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.__input.newGlobalClusterIdentifier,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyGlobalCluster.GlobalCluster.GlobalClusterResourceId', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterResourceId') as unknown as string;
  }

  public get globalClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.GlobalClusterArn'),
        outputPath: 'GlobalCluster.GlobalClusterArn',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.__input.newGlobalClusterIdentifier,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyGlobalCluster.GlobalCluster.GlobalClusterArn', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.Status'),
        outputPath: 'GlobalCluster.Status',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.__input.newGlobalClusterIdentifier,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyGlobalCluster.GlobalCluster.Status', props);
    return resource.getResponseField('GlobalCluster.Status') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.Engine'),
        outputPath: 'GlobalCluster.Engine',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.__input.newGlobalClusterIdentifier,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyGlobalCluster.GlobalCluster.Engine', props);
    return resource.getResponseField('GlobalCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.EngineVersion'),
        outputPath: 'GlobalCluster.EngineVersion',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.__input.newGlobalClusterIdentifier,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyGlobalCluster.GlobalCluster.EngineVersion', props);
    return resource.getResponseField('GlobalCluster.EngineVersion') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.DatabaseName'),
        outputPath: 'GlobalCluster.DatabaseName',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.__input.newGlobalClusterIdentifier,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyGlobalCluster.GlobalCluster.DatabaseName', props);
    return resource.getResponseField('GlobalCluster.DatabaseName') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.StorageEncrypted'),
        outputPath: 'GlobalCluster.StorageEncrypted',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.__input.newGlobalClusterIdentifier,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyGlobalCluster.GlobalCluster.StorageEncrypted', props);
    return resource.getResponseField('GlobalCluster.StorageEncrypted') as unknown as boolean;
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.DeletionProtection'),
        outputPath: 'GlobalCluster.DeletionProtection',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.__input.newGlobalClusterIdentifier,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyGlobalCluster.GlobalCluster.DeletionProtection', props);
    return resource.getResponseField('GlobalCluster.DeletionProtection') as unknown as boolean;
  }

  public get globalClusterMembers(): shapes.RdsGlobalClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyGlobalCluster.GlobalCluster.GlobalClusterMembers'),
        outputPath: 'GlobalCluster.GlobalClusterMembers',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          NewGlobalClusterIdentifier: this.__input.newGlobalClusterIdentifier,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyGlobalCluster.GlobalCluster.GlobalClusterMembers', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterMembers') as unknown as shapes.RdsGlobalClusterMember[];
  }

}

export class RDSResponsesModifyOptionGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyOptionGroupMessage) {
  }

  public get optionGroup(): RDSResponsesModifyOptionGroupOptionGroup {
    return new RDSResponsesModifyOptionGroupOptionGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesModifyOptionGroupOptionGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsModifyOptionGroupMessage) {
  }

  public get optionGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.OptionGroupName'),
        outputPath: 'OptionGroup.OptionGroupName',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          OptionsToInclude: this.__input.optionsToInclude,
          OptionsToRemove: this.__input.optionsToRemove,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyOptionGroup.OptionGroup.OptionGroupName', props);
    return resource.getResponseField('OptionGroup.OptionGroupName') as unknown as string;
  }

  public get optionGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.OptionGroupDescription'),
        outputPath: 'OptionGroup.OptionGroupDescription',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          OptionsToInclude: this.__input.optionsToInclude,
          OptionsToRemove: this.__input.optionsToRemove,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyOptionGroup.OptionGroup.OptionGroupDescription', props);
    return resource.getResponseField('OptionGroup.OptionGroupDescription') as unknown as string;
  }

  public get engineName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.EngineName'),
        outputPath: 'OptionGroup.EngineName',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          OptionsToInclude: this.__input.optionsToInclude,
          OptionsToRemove: this.__input.optionsToRemove,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyOptionGroup.OptionGroup.EngineName', props);
    return resource.getResponseField('OptionGroup.EngineName') as unknown as string;
  }

  public get majorEngineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.MajorEngineVersion'),
        outputPath: 'OptionGroup.MajorEngineVersion',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          OptionsToInclude: this.__input.optionsToInclude,
          OptionsToRemove: this.__input.optionsToRemove,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyOptionGroup.OptionGroup.MajorEngineVersion', props);
    return resource.getResponseField('OptionGroup.MajorEngineVersion') as unknown as string;
  }

  public get options(): shapes.RdsOption[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.Options'),
        outputPath: 'OptionGroup.Options',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          OptionsToInclude: this.__input.optionsToInclude,
          OptionsToRemove: this.__input.optionsToRemove,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyOptionGroup.OptionGroup.Options', props);
    return resource.getResponseField('OptionGroup.Options') as unknown as shapes.RdsOption[];
  }

  public get allowsVpcAndNonVpcInstanceMemberships(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships'),
        outputPath: 'OptionGroup.AllowsVpcAndNonVpcInstanceMemberships',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          OptionsToInclude: this.__input.optionsToInclude,
          OptionsToRemove: this.__input.optionsToRemove,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyOptionGroup.OptionGroup.AllowsVpcAndNonVpcInstanceMemberships', props);
    return resource.getResponseField('OptionGroup.AllowsVpcAndNonVpcInstanceMemberships') as unknown as boolean;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.VpcId'),
        outputPath: 'OptionGroup.VpcId',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          OptionsToInclude: this.__input.optionsToInclude,
          OptionsToRemove: this.__input.optionsToRemove,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyOptionGroup.OptionGroup.VpcId', props);
    return resource.getResponseField('OptionGroup.VpcId') as unknown as string;
  }

  public get optionGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'modifyOptionGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ModifyOptionGroup.OptionGroup.OptionGroupArn'),
        outputPath: 'OptionGroup.OptionGroupArn',
        parameters: {
          OptionGroupName: this.__input.optionGroupName,
          OptionsToInclude: this.__input.optionsToInclude,
          OptionsToRemove: this.__input.optionsToRemove,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ModifyOptionGroup.OptionGroup.OptionGroupArn', props);
    return resource.getResponseField('OptionGroup.OptionGroupArn') as unknown as string;
  }

}

export class RDSResponsesPromoteReadReplica {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPromoteReadReplicaMessage) {
  }

  public get dbInstance(): RDSResponsesPromoteReadReplicaDbInstance {
    return new RDSResponsesPromoteReadReplicaDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesPromoteReadReplicaDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPromoteReadReplicaMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesPromoteReadReplicaDbInstanceEndpoint {
    return new RDSResponsesPromoteReadReplicaDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesPromoteReadReplicaDbInstanceDbSubnetGroup {
    return new RDSResponsesPromoteReadReplicaDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesPromoteReadReplicaDbInstancePendingModifiedValues {
    return new RDSResponsesPromoteReadReplicaDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesPromoteReadReplicaDbInstanceListenerEndpoint {
    return new RDSResponsesPromoteReadReplicaDbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesPromoteReadReplicaDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPromoteReadReplicaMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesPromoteReadReplicaDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPromoteReadReplicaMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesPromoteReadReplicaDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPromoteReadReplicaMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesPromoteReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesPromoteReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesPromoteReadReplicaDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPromoteReadReplicaMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesPromoteReadReplicaDbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPromoteReadReplicaMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplica',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplica.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplica.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesPromoteReadReplicaDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPromoteReadReplicaDbClusterMessage) {
  }

  public get dbCluster(): RDSResponsesPromoteReadReplicaDbClusterDbCluster {
    return new RDSResponsesPromoteReadReplicaDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesPromoteReadReplicaDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPromoteReadReplicaDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSResponsesPromoteReadReplicaDbClusterDbClusterScalingConfigurationInfo {
    return new RDSResponsesPromoteReadReplicaDbClusterDbClusterScalingConfigurationInfo(this.__scope, this.__resources, this.__input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSResponsesPromoteReadReplicaDbClusterDbClusterScalingConfigurationInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPromoteReadReplicaDbClusterMessage) {
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'promoteReadReplicaDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PromoteReadReplicaDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesPurchaseReservedDbInstancesOffering {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPurchaseReservedDbInstancesOfferingMessage) {
  }

  public get reservedDbInstance(): RDSResponsesPurchaseReservedDbInstancesOfferingReservedDbInstance {
    return new RDSResponsesPurchaseReservedDbInstancesOfferingReservedDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesPurchaseReservedDbInstancesOfferingReservedDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsPurchaseReservedDbInstancesOfferingMessage) {
  }

  public get reservedDbInstanceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstanceId'),
        outputPath: 'ReservedDBInstance.ReservedDBInstanceId',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstanceId', props);
    return resource.getResponseField('ReservedDBInstance.ReservedDBInstanceId') as unknown as string;
  }

  public get reservedDbInstancesOfferingId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstancesOfferingId'),
        outputPath: 'ReservedDBInstance.ReservedDBInstancesOfferingId',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstancesOfferingId', props);
    return resource.getResponseField('ReservedDBInstance.ReservedDBInstancesOfferingId') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.DBInstanceClass'),
        outputPath: 'ReservedDBInstance.DBInstanceClass',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.DBInstanceClass', props);
    return resource.getResponseField('ReservedDBInstance.DBInstanceClass') as unknown as string;
  }

  public get startTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.StartTime'),
        outputPath: 'ReservedDBInstance.StartTime',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.StartTime', props);
    return resource.getResponseField('ReservedDBInstance.StartTime') as unknown as string;
  }

  public get duration(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.Duration'),
        outputPath: 'ReservedDBInstance.Duration',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.Duration', props);
    return resource.getResponseField('ReservedDBInstance.Duration') as unknown as number;
  }

  public get fixedPrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.FixedPrice'),
        outputPath: 'ReservedDBInstance.FixedPrice',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.FixedPrice', props);
    return resource.getResponseField('ReservedDBInstance.FixedPrice') as unknown as number;
  }

  public get usagePrice(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.UsagePrice'),
        outputPath: 'ReservedDBInstance.UsagePrice',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.UsagePrice', props);
    return resource.getResponseField('ReservedDBInstance.UsagePrice') as unknown as number;
  }

  public get currencyCode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.CurrencyCode'),
        outputPath: 'ReservedDBInstance.CurrencyCode',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.CurrencyCode', props);
    return resource.getResponseField('ReservedDBInstance.CurrencyCode') as unknown as string;
  }

  public get dbInstanceCount(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.DBInstanceCount'),
        outputPath: 'ReservedDBInstance.DBInstanceCount',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.DBInstanceCount', props);
    return resource.getResponseField('ReservedDBInstance.DBInstanceCount') as unknown as number;
  }

  public get productDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.ProductDescription'),
        outputPath: 'ReservedDBInstance.ProductDescription',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.ProductDescription', props);
    return resource.getResponseField('ReservedDBInstance.ProductDescription') as unknown as string;
  }

  public get offeringType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.OfferingType'),
        outputPath: 'ReservedDBInstance.OfferingType',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.OfferingType', props);
    return resource.getResponseField('ReservedDBInstance.OfferingType') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.MultiAZ'),
        outputPath: 'ReservedDBInstance.MultiAZ',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.MultiAZ', props);
    return resource.getResponseField('ReservedDBInstance.MultiAZ') as unknown as boolean;
  }

  public get state(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.State'),
        outputPath: 'ReservedDBInstance.State',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.State', props);
    return resource.getResponseField('ReservedDBInstance.State') as unknown as string;
  }

  public get recurringCharges(): shapes.RdsRecurringCharge[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.RecurringCharges'),
        outputPath: 'ReservedDBInstance.RecurringCharges',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.RecurringCharges', props);
    return resource.getResponseField('ReservedDBInstance.RecurringCharges') as unknown as shapes.RdsRecurringCharge[];
  }

  public get reservedDbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstanceArn'),
        outputPath: 'ReservedDBInstance.ReservedDBInstanceArn',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.ReservedDBInstanceArn', props);
    return resource.getResponseField('ReservedDBInstance.ReservedDBInstanceArn') as unknown as string;
  }

  public get leaseId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'purchaseReservedDbInstancesOffering',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.PurchaseReservedDBInstancesOffering.ReservedDBInstance.LeaseId'),
        outputPath: 'ReservedDBInstance.LeaseId',
        parameters: {
          ReservedDBInstancesOfferingId: this.__input.reservedDbInstancesOfferingId,
          ReservedDBInstanceId: this.__input.reservedDbInstanceId,
          DBInstanceCount: this.__input.dbInstanceCount,
          Tags: this.__input.tags,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'PurchaseReservedDBInstancesOffering.ReservedDBInstance.LeaseId', props);
    return resource.getResponseField('ReservedDBInstance.LeaseId') as unknown as string;
  }

}

export class RDSResponsesRebootDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRebootDbInstanceMessage) {
  }

  public get dbInstance(): RDSResponsesRebootDbInstanceDbInstance {
    return new RDSResponsesRebootDbInstanceDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesRebootDbInstanceDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRebootDbInstanceMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesRebootDbInstanceDbInstanceEndpoint {
    return new RDSResponsesRebootDbInstanceDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesRebootDbInstanceDbInstanceDbSubnetGroup {
    return new RDSResponsesRebootDbInstanceDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesRebootDbInstanceDbInstancePendingModifiedValues {
    return new RDSResponsesRebootDbInstanceDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesRebootDbInstanceDbInstanceListenerEndpoint {
    return new RDSResponsesRebootDbInstanceDbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesRebootDbInstanceDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRebootDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesRebootDbInstanceDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRebootDbInstanceMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesRebootDbInstanceDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRebootDbInstanceMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesRebootDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesRebootDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesRebootDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRebootDbInstanceMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesRebootDbInstanceDbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRebootDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'rebootDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RebootDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          ForceFailover: this.__input.forceFailover,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RebootDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesRegisterDbProxyTargets {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRegisterDbProxyTargetsRequest) {
  }

  public get dbProxyTargets(): shapes.RdsdbProxyTarget[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'registerDbProxyTargets',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RegisterDBProxyTargets.DBProxyTargets'),
        outputPath: 'DBProxyTargets',
        parameters: {
          DBProxyName: this.__input.dbProxyName,
          TargetGroupName: this.__input.targetGroupName,
          DBInstanceIdentifiers: this.__input.dbInstanceIdentifiers,
          DBClusterIdentifiers: this.__input.dbClusterIdentifiers,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RegisterDBProxyTargets.DBProxyTargets', props);
    return resource.getResponseField('DBProxyTargets') as unknown as shapes.RdsdbProxyTarget[];
  }

}

export class RDSResponsesRemoveFromGlobalCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRemoveFromGlobalClusterMessage) {
  }

  public get globalCluster(): RDSResponsesRemoveFromGlobalClusterGlobalCluster {
    return new RDSResponsesRemoveFromGlobalClusterGlobalCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesRemoveFromGlobalClusterGlobalCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRemoveFromGlobalClusterMessage) {
  }

  public get globalClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.GlobalClusterIdentifier'),
        outputPath: 'GlobalCluster.GlobalClusterIdentifier',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          DbClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveFromGlobalCluster.GlobalCluster.GlobalClusterIdentifier', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterIdentifier') as unknown as string;
  }

  public get globalClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.GlobalClusterResourceId'),
        outputPath: 'GlobalCluster.GlobalClusterResourceId',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          DbClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveFromGlobalCluster.GlobalCluster.GlobalClusterResourceId', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterResourceId') as unknown as string;
  }

  public get globalClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.GlobalClusterArn'),
        outputPath: 'GlobalCluster.GlobalClusterArn',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          DbClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveFromGlobalCluster.GlobalCluster.GlobalClusterArn', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.Status'),
        outputPath: 'GlobalCluster.Status',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          DbClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveFromGlobalCluster.GlobalCluster.Status', props);
    return resource.getResponseField('GlobalCluster.Status') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.Engine'),
        outputPath: 'GlobalCluster.Engine',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          DbClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveFromGlobalCluster.GlobalCluster.Engine', props);
    return resource.getResponseField('GlobalCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.EngineVersion'),
        outputPath: 'GlobalCluster.EngineVersion',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          DbClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveFromGlobalCluster.GlobalCluster.EngineVersion', props);
    return resource.getResponseField('GlobalCluster.EngineVersion') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.DatabaseName'),
        outputPath: 'GlobalCluster.DatabaseName',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          DbClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveFromGlobalCluster.GlobalCluster.DatabaseName', props);
    return resource.getResponseField('GlobalCluster.DatabaseName') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.StorageEncrypted'),
        outputPath: 'GlobalCluster.StorageEncrypted',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          DbClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveFromGlobalCluster.GlobalCluster.StorageEncrypted', props);
    return resource.getResponseField('GlobalCluster.StorageEncrypted') as unknown as boolean;
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.DeletionProtection'),
        outputPath: 'GlobalCluster.DeletionProtection',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          DbClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveFromGlobalCluster.GlobalCluster.DeletionProtection', props);
    return resource.getResponseField('GlobalCluster.DeletionProtection') as unknown as boolean;
  }

  public get globalClusterMembers(): shapes.RdsGlobalClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeFromGlobalCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveFromGlobalCluster.GlobalCluster.GlobalClusterMembers'),
        outputPath: 'GlobalCluster.GlobalClusterMembers',
        parameters: {
          GlobalClusterIdentifier: this.__input.globalClusterIdentifier,
          DbClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveFromGlobalCluster.GlobalCluster.GlobalClusterMembers', props);
    return resource.getResponseField('GlobalCluster.GlobalClusterMembers') as unknown as shapes.RdsGlobalClusterMember[];
  }

}

export class RDSResponsesRemoveSourceIdentifierFromSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRemoveSourceIdentifierFromSubscriptionMessage) {
  }

  public get eventSubscription(): RDSResponsesRemoveSourceIdentifierFromSubscriptionEventSubscription {
    return new RDSResponsesRemoveSourceIdentifierFromSubscriptionEventSubscription(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesRemoveSourceIdentifierFromSubscriptionEventSubscription {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRemoveSourceIdentifierFromSubscriptionMessage) {
  }

  public get customerAwsId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.CustomerAwsId'),
        outputPath: 'EventSubscription.CustomerAwsId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.CustomerAwsId', props);
    return resource.getResponseField('EventSubscription.CustomerAwsId') as unknown as string;
  }

  public get custSubscriptionId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.CustSubscriptionId'),
        outputPath: 'EventSubscription.CustSubscriptionId',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.CustSubscriptionId', props);
    return resource.getResponseField('EventSubscription.CustSubscriptionId') as unknown as string;
  }

  public get snsTopicArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.SnsTopicArn'),
        outputPath: 'EventSubscription.SnsTopicArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SnsTopicArn', props);
    return resource.getResponseField('EventSubscription.SnsTopicArn') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.Status'),
        outputPath: 'EventSubscription.Status',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.Status', props);
    return resource.getResponseField('EventSubscription.Status') as unknown as string;
  }

  public get subscriptionCreationTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.SubscriptionCreationTime'),
        outputPath: 'EventSubscription.SubscriptionCreationTime',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SubscriptionCreationTime', props);
    return resource.getResponseField('EventSubscription.SubscriptionCreationTime') as unknown as string;
  }

  public get sourceType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.SourceType'),
        outputPath: 'EventSubscription.SourceType',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SourceType', props);
    return resource.getResponseField('EventSubscription.SourceType') as unknown as string;
  }

  public get sourceIdsList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.SourceIdsList'),
        outputPath: 'EventSubscription.SourceIdsList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.SourceIdsList', props);
    return resource.getResponseField('EventSubscription.SourceIdsList') as unknown as string[];
  }

  public get eventCategoriesList(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.EventCategoriesList'),
        outputPath: 'EventSubscription.EventCategoriesList',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.EventCategoriesList', props);
    return resource.getResponseField('EventSubscription.EventCategoriesList') as unknown as string[];
  }

  public get enabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.Enabled'),
        outputPath: 'EventSubscription.Enabled',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.Enabled', props);
    return resource.getResponseField('EventSubscription.Enabled') as unknown as boolean;
  }

  public get eventSubscriptionArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'removeSourceIdentifierFromSubscription',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RemoveSourceIdentifierFromSubscription.EventSubscription.EventSubscriptionArn'),
        outputPath: 'EventSubscription.EventSubscriptionArn',
        parameters: {
          SubscriptionName: this.__input.subscriptionName,
          SourceIdentifier: this.__input.sourceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RemoveSourceIdentifierFromSubscription.EventSubscription.EventSubscriptionArn', props);
    return resource.getResponseField('EventSubscription.EventSubscriptionArn') as unknown as string;
  }

}

export class RDSResponsesResetDbClusterParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsResetDbClusterParameterGroupMessage) {
  }

  public get dbClusterParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetDbClusterParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ResetDBClusterParameterGroup.DBClusterParameterGroupName'),
        outputPath: 'DBClusterParameterGroupName',
        parameters: {
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          ResetAllParameters: this.__input.resetAllParameters,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetDBClusterParameterGroup.DBClusterParameterGroupName', props);
    return resource.getResponseField('DBClusterParameterGroupName') as unknown as string;
  }

}

export class RDSResponsesResetDbParameterGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsResetDbParameterGroupMessage) {
  }

  public get dbParameterGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'resetDbParameterGroup',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.ResetDBParameterGroup.DBParameterGroupName'),
        outputPath: 'DBParameterGroupName',
        parameters: {
          DBParameterGroupName: this.__input.dbParameterGroupName,
          ResetAllParameters: this.__input.resetAllParameters,
          Parameters: this.__input.parameters,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'ResetDBParameterGroup.DBParameterGroupName', props);
    return resource.getResponseField('DBParameterGroupName') as unknown as string;
  }

}

export class RDSResponsesRestoreDbClusterFromS3 {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbClusterFromS3Message) {
  }

  public get dbCluster(): RDSResponsesRestoreDbClusterFromS3DbCluster {
    return new RDSResponsesRestoreDbClusterFromS3DbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesRestoreDbClusterFromS3DbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbClusterFromS3Message) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSResponsesRestoreDbClusterFromS3DbClusterScalingConfigurationInfo {
    return new RDSResponsesRestoreDbClusterFromS3DbClusterScalingConfigurationInfo(this.__scope, this.__resources, this.__input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSResponsesRestoreDbClusterFromS3DbClusterScalingConfigurationInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbClusterFromS3Message) {
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          CharacterSetName: this.__input.characterSetName,
          DatabaseName: this.__input.databaseName,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          OptionGroupName: this.__input.optionGroupName,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          Tags: this.__input.tags,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromS3.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesRestoreDbClusterFromSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbClusterFromSnapshotMessage) {
  }

  public get dbCluster(): RDSResponsesRestoreDbClusterFromSnapshotDbCluster {
    return new RDSResponsesRestoreDbClusterFromSnapshotDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesRestoreDbClusterFromSnapshotDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbClusterFromSnapshotMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSResponsesRestoreDbClusterFromSnapshotDbClusterScalingConfigurationInfo {
    return new RDSResponsesRestoreDbClusterFromSnapshotDbClusterScalingConfigurationInfo(this.__scope, this.__resources, this.__input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSResponsesRestoreDbClusterFromSnapshotDbClusterScalingConfigurationInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbClusterFromSnapshotMessage) {
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterFromSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          AvailabilityZones: this.__input.availabilityZones,
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          SnapshotIdentifier: this.__input.snapshotIdentifier,
          Engine: this.__input.engine,
          EngineVersion: this.__input.engineVersion,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          DatabaseName: this.__input.databaseName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          EngineMode: this.__input.engineMode,
          ScalingConfiguration: {
            MinCapacity: this.__input.scalingConfiguration?.minCapacity,
            MaxCapacity: this.__input.scalingConfiguration?.maxCapacity,
            AutoPause: this.__input.scalingConfiguration?.autoPause,
            SecondsUntilAutoPause: this.__input.scalingConfiguration?.secondsUntilAutoPause,
            TimeoutAction: this.__input.scalingConfiguration?.timeoutAction,
          },
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterFromSnapshot.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesRestoreDbClusterToPointInTime {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbClusterToPointInTimeMessage) {
  }

  public get dbCluster(): RDSResponsesRestoreDbClusterToPointInTimeDbCluster {
    return new RDSResponsesRestoreDbClusterToPointInTimeDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesRestoreDbClusterToPointInTimeDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbClusterToPointInTimeMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSResponsesRestoreDbClusterToPointInTimeDbClusterScalingConfigurationInfo {
    return new RDSResponsesRestoreDbClusterToPointInTimeDbClusterScalingConfigurationInfo(this.__scope, this.__resources, this.__input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSResponsesRestoreDbClusterToPointInTimeDbClusterScalingConfigurationInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbClusterToPointInTimeMessage) {
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbClusterToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
          RestoreType: this.__input.restoreType,
          SourceDBClusterIdentifier: this.__input.sourceDbClusterIdentifier,
          RestoreToTime: this.__input.restoreToTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          Port: this.__input.port,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          OptionGroupName: this.__input.optionGroupName,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Tags: this.__input.tags,
          KmsKeyId: this.__input.kmsKeyId,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          BacktrackWindow: this.__input.backtrackWindow,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          DBClusterParameterGroupName: this.__input.dbClusterParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBClusterToPointInTime.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesRestoreDbInstanceFromDbSnapshot {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
  }

  public get dbInstance(): RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstance {
    return new RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstanceEndpoint {
    return new RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstanceDbSubnetGroup {
    return new RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValues {
    return new RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstanceListenerEndpoint {
    return new RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesRestoreDbInstanceFromDbSnapshotDbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromDbSnapshotMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromDbSnapshot',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromDBSnapshot.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesRestoreDbInstanceFromS3 {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromS3Message) {
  }

  public get dbInstance(): RDSResponsesRestoreDbInstanceFromS3DbInstance {
    return new RDSResponsesRestoreDbInstanceFromS3DbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesRestoreDbInstanceFromS3DbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromS3Message) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesRestoreDbInstanceFromS3DbInstanceEndpoint {
    return new RDSResponsesRestoreDbInstanceFromS3DbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesRestoreDbInstanceFromS3DbInstanceDbSubnetGroup {
    return new RDSResponsesRestoreDbInstanceFromS3DbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesRestoreDbInstanceFromS3DbInstancePendingModifiedValues {
    return new RDSResponsesRestoreDbInstanceFromS3DbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesRestoreDbInstanceFromS3DbInstanceListenerEndpoint {
    return new RDSResponsesRestoreDbInstanceFromS3DbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesRestoreDbInstanceFromS3DbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromS3Message) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesRestoreDbInstanceFromS3DbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromS3Message) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesRestoreDbInstanceFromS3DbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromS3Message) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesRestoreDbInstanceFromS3DbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesRestoreDbInstanceFromS3DbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesRestoreDbInstanceFromS3DbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromS3Message) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesRestoreDbInstanceFromS3DbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceFromS3Message) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceFromS3',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBName: this.__input.dbName,
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          AllocatedStorage: this.__input.allocatedStorage,
          DBInstanceClass: this.__input.dbInstanceClass,
          Engine: this.__input.engine,
          MasterUsername: this.__input.masterUsername,
          MasterUserPassword: this.__input.masterUserPassword,
          DBSecurityGroups: this.__input.dbSecurityGroups,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          PreferredMaintenanceWindow: this.__input.preferredMaintenanceWindow,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          BackupRetentionPeriod: this.__input.backupRetentionPeriod,
          PreferredBackupWindow: this.__input.preferredBackupWindow,
          Port: this.__input.port,
          MultiAZ: this.__input.multiAz,
          EngineVersion: this.__input.engineVersion,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          PubliclyAccessible: this.__input.publiclyAccessible,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          StorageEncrypted: this.__input.storageEncrypted,
          KmsKeyId: this.__input.kmsKeyId,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          MonitoringInterval: this.__input.monitoringInterval,
          MonitoringRoleArn: this.__input.monitoringRoleArn,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          SourceEngine: this.__input.sourceEngine,
          SourceEngineVersion: this.__input.sourceEngineVersion,
          S3BucketName: this.__input.s3BucketName,
          S3Prefix: this.__input.s3Prefix,
          S3IngestionRoleArn: this.__input.s3IngestionRoleArn,
          EnablePerformanceInsights: this.__input.enablePerformanceInsights,
          PerformanceInsightsKMSKeyId: this.__input.performanceInsightsKmsKeyId,
          PerformanceInsightsRetentionPeriod: this.__input.performanceInsightsRetentionPeriod,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DeletionProtection: this.__input.deletionProtection,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceFromS3.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesRestoreDbInstanceToPointInTime {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
  }

  public get dbInstance(): RDSResponsesRestoreDbInstanceToPointInTimeDbInstance {
    return new RDSResponsesRestoreDbInstanceToPointInTimeDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesRestoreDbInstanceToPointInTimeDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesRestoreDbInstanceToPointInTimeDbInstanceEndpoint {
    return new RDSResponsesRestoreDbInstanceToPointInTimeDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesRestoreDbInstanceToPointInTimeDbInstanceDbSubnetGroup {
    return new RDSResponsesRestoreDbInstanceToPointInTimeDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValues {
    return new RDSResponsesRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesRestoreDbInstanceToPointInTimeDbInstanceListenerEndpoint {
    return new RDSResponsesRestoreDbInstanceToPointInTimeDbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesRestoreDbInstanceToPointInTimeDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesRestoreDbInstanceToPointInTimeDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesRestoreDbInstanceToPointInTimeDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesRestoreDbInstanceToPointInTimeDbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRestoreDbInstanceToPointInTimeMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'restoreDbInstanceToPointInTime',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          SourceDBInstanceIdentifier: this.__input.sourceDbInstanceIdentifier,
          TargetDBInstanceIdentifier: this.__input.targetDbInstanceIdentifier,
          RestoreTime: this.__input.restoreTime,
          UseLatestRestorableTime: this.__input.useLatestRestorableTime,
          DBInstanceClass: this.__input.dbInstanceClass,
          Port: this.__input.port,
          AvailabilityZone: this.__input.availabilityZone,
          DBSubnetGroupName: this.__input.dbSubnetGroupName,
          MultiAZ: this.__input.multiAz,
          PubliclyAccessible: this.__input.publiclyAccessible,
          AutoMinorVersionUpgrade: this.__input.autoMinorVersionUpgrade,
          LicenseModel: this.__input.licenseModel,
          DBName: this.__input.dbName,
          Engine: this.__input.engine,
          Iops: this.__input.iops,
          OptionGroupName: this.__input.optionGroupName,
          CopyTagsToSnapshot: this.__input.copyTagsToSnapshot,
          Tags: this.__input.tags,
          StorageType: this.__input.storageType,
          TdeCredentialArn: this.__input.tdeCredentialArn,
          TdeCredentialPassword: this.__input.tdeCredentialPassword,
          VpcSecurityGroupIds: this.__input.vpcSecurityGroupIds,
          Domain: this.__input.domain,
          DomainIAMRoleName: this.__input.domainIamRoleName,
          EnableIAMDatabaseAuthentication: this.__input.enableIamDatabaseAuthentication,
          EnableCloudwatchLogsExports: this.__input.enableCloudwatchLogsExports,
          ProcessorFeatures: this.__input.processorFeatures,
          UseDefaultProcessorFeatures: this.__input.useDefaultProcessorFeatures,
          DBParameterGroupName: this.__input.dbParameterGroupName,
          DeletionProtection: this.__input.deletionProtection,
          SourceDbiResourceId: this.__input.sourceDbiResourceId,
          MaxAllocatedStorage: this.__input.maxAllocatedStorage,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RestoreDBInstanceToPointInTime.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesRevokeDbSecurityGroupIngress {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRevokeDbSecurityGroupIngressMessage) {
  }

  public get dbSecurityGroup(): RDSResponsesRevokeDbSecurityGroupIngressDbSecurityGroup {
    return new RDSResponsesRevokeDbSecurityGroupIngressDbSecurityGroup(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesRevokeDbSecurityGroupIngressDbSecurityGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsRevokeDbSecurityGroupIngressMessage) {
  }

  public get ownerId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.OwnerId'),
        outputPath: 'DBSecurityGroup.OwnerId',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.OwnerId', props);
    return resource.getResponseField('DBSecurityGroup.OwnerId') as unknown as string;
  }

  public get dbSecurityGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupName'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupName',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupName', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupName') as unknown as string;
  }

  public get dbSecurityGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupDescription'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupDescription',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupDescription', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.VpcId'),
        outputPath: 'DBSecurityGroup.VpcId',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.VpcId', props);
    return resource.getResponseField('DBSecurityGroup.VpcId') as unknown as string;
  }

  public get ec2SecurityGroups(): shapes.Rdsec2SecurityGroup[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.EC2SecurityGroups'),
        outputPath: 'DBSecurityGroup.EC2SecurityGroups',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.EC2SecurityGroups', props);
    return resource.getResponseField('DBSecurityGroup.EC2SecurityGroups') as unknown as shapes.Rdsec2SecurityGroup[];
  }

  public get ipRanges(): shapes.RdsipRange[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.IPRanges'),
        outputPath: 'DBSecurityGroup.IPRanges',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.IPRanges', props);
    return resource.getResponseField('DBSecurityGroup.IPRanges') as unknown as shapes.RdsipRange[];
  }

  public get dbSecurityGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'revokeDbSecurityGroupIngress',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupArn'),
        outputPath: 'DBSecurityGroup.DBSecurityGroupArn',
        parameters: {
          DBSecurityGroupName: this.__input.dbSecurityGroupName,
          CIDRIP: this.__input.cidrip,
          EC2SecurityGroupName: this.__input.ec2SecurityGroupName,
          EC2SecurityGroupId: this.__input.ec2SecurityGroupId,
          EC2SecurityGroupOwnerId: this.__input.ec2SecurityGroupOwnerId,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'RevokeDBSecurityGroupIngress.DBSecurityGroup.DBSecurityGroupArn', props);
    return resource.getResponseField('DBSecurityGroup.DBSecurityGroupArn') as unknown as string;
  }

}

export class RDSResponsesStartActivityStream {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartActivityStreamRequest) {
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartActivityStream.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          ResourceArn: this.__input.resourceArn,
          Mode: this.__input.mode,
          KmsKeyId: this.__input.kmsKeyId,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartActivityStream.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get kinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartActivityStream.KinesisStreamName'),
        outputPath: 'KinesisStreamName',
        parameters: {
          ResourceArn: this.__input.resourceArn,
          Mode: this.__input.mode,
          KmsKeyId: this.__input.kmsKeyId,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartActivityStream.KinesisStreamName', props);
    return resource.getResponseField('KinesisStreamName') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartActivityStream.Status'),
        outputPath: 'Status',
        parameters: {
          ResourceArn: this.__input.resourceArn,
          Mode: this.__input.mode,
          KmsKeyId: this.__input.kmsKeyId,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartActivityStream.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get mode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartActivityStream.Mode'),
        outputPath: 'Mode',
        parameters: {
          ResourceArn: this.__input.resourceArn,
          Mode: this.__input.mode,
          KmsKeyId: this.__input.kmsKeyId,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartActivityStream.Mode', props);
    return resource.getResponseField('Mode') as unknown as string;
  }

  public get applyImmediately(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartActivityStream.ApplyImmediately'),
        outputPath: 'ApplyImmediately',
        parameters: {
          ResourceArn: this.__input.resourceArn,
          Mode: this.__input.mode,
          KmsKeyId: this.__input.kmsKeyId,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartActivityStream.ApplyImmediately', props);
    return resource.getResponseField('ApplyImmediately') as unknown as boolean;
  }

}

export class RDSResponsesStartDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartDbClusterMessage) {
  }

  public get dbCluster(): RDSResponsesStartDbClusterDbCluster {
    return new RDSResponsesStartDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesStartDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSResponsesStartDbClusterDbClusterScalingConfigurationInfo {
    return new RDSResponsesStartDbClusterDbClusterScalingConfigurationInfo(this.__scope, this.__resources, this.__input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSResponsesStartDbClusterDbClusterScalingConfigurationInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartDbClusterMessage) {
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesStartDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartDbInstanceMessage) {
  }

  public get dbInstance(): RDSResponsesStartDbInstanceDbInstance {
    return new RDSResponsesStartDbInstanceDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesStartDbInstanceDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartDbInstanceMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesStartDbInstanceDbInstanceEndpoint {
    return new RDSResponsesStartDbInstanceDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesStartDbInstanceDbInstanceDbSubnetGroup {
    return new RDSResponsesStartDbInstanceDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesStartDbInstanceDbInstancePendingModifiedValues {
    return new RDSResponsesStartDbInstanceDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesStartDbInstanceDbInstanceListenerEndpoint {
    return new RDSResponsesStartDbInstanceDbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesStartDbInstanceDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesStartDbInstanceDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartDbInstanceMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesStartDbInstanceDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartDbInstanceMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesStartDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesStartDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesStartDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartDbInstanceMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesStartDbInstanceDbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesStartExportTask {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStartExportTaskMessage) {
  }

  public get exportTaskIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.ExportTaskIdentifier'),
        outputPath: 'ExportTaskIdentifier',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.ExportTaskIdentifier', props);
    return resource.getResponseField('ExportTaskIdentifier') as unknown as string;
  }

  public get sourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.SourceArn'),
        outputPath: 'SourceArn',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.SourceArn', props);
    return resource.getResponseField('SourceArn') as unknown as string;
  }

  public get exportOnly(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.ExportOnly'),
        outputPath: 'ExportOnly',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.ExportOnly', props);
    return resource.getResponseField('ExportOnly') as unknown as string[];
  }

  public get snapshotTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.SnapshotTime'),
        outputPath: 'SnapshotTime',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.SnapshotTime', props);
    return resource.getResponseField('SnapshotTime') as unknown as string;
  }

  public get taskStartTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.TaskStartTime'),
        outputPath: 'TaskStartTime',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.TaskStartTime', props);
    return resource.getResponseField('TaskStartTime') as unknown as string;
  }

  public get taskEndTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.TaskEndTime'),
        outputPath: 'TaskEndTime',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.TaskEndTime', props);
    return resource.getResponseField('TaskEndTime') as unknown as string;
  }

  public get s3Bucket(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.S3Bucket'),
        outputPath: 'S3Bucket',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.S3Bucket', props);
    return resource.getResponseField('S3Bucket') as unknown as string;
  }

  public get s3Prefix(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.S3Prefix'),
        outputPath: 'S3Prefix',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.S3Prefix', props);
    return resource.getResponseField('S3Prefix') as unknown as string;
  }

  public get iamRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.IamRoleArn'),
        outputPath: 'IamRoleArn',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.IamRoleArn', props);
    return resource.getResponseField('IamRoleArn') as unknown as string;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.Status'),
        outputPath: 'Status',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

  public get percentProgress(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.PercentProgress'),
        outputPath: 'PercentProgress',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.PercentProgress', props);
    return resource.getResponseField('PercentProgress') as unknown as number;
  }

  public get totalExtractedDataInGb(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.TotalExtractedDataInGB'),
        outputPath: 'TotalExtractedDataInGB',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.TotalExtractedDataInGB', props);
    return resource.getResponseField('TotalExtractedDataInGB') as unknown as number;
  }

  public get failureCause(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.FailureCause'),
        outputPath: 'FailureCause',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.FailureCause', props);
    return resource.getResponseField('FailureCause') as unknown as string;
  }

  public get warningMessage(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'startExportTask',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StartExportTask.WarningMessage'),
        outputPath: 'WarningMessage',
        parameters: {
          ExportTaskIdentifier: this.__input.exportTaskIdentifier,
          SourceArn: this.__input.sourceArn,
          S3BucketName: this.__input.s3BucketName,
          IamRoleArn: this.__input.iamRoleArn,
          KmsKeyId: this.__input.kmsKeyId,
          S3Prefix: this.__input.s3Prefix,
          ExportOnly: this.__input.exportOnly,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StartExportTask.WarningMessage', props);
    return resource.getResponseField('WarningMessage') as unknown as string;
  }

}

export class RDSResponsesStopActivityStream {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopActivityStreamRequest) {
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopActivityStream.KmsKeyId'),
        outputPath: 'KmsKeyId',
        parameters: {
          ResourceArn: this.__input.resourceArn,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopActivityStream.KmsKeyId', props);
    return resource.getResponseField('KmsKeyId') as unknown as string;
  }

  public get kinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopActivityStream.KinesisStreamName'),
        outputPath: 'KinesisStreamName',
        parameters: {
          ResourceArn: this.__input.resourceArn,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopActivityStream.KinesisStreamName', props);
    return resource.getResponseField('KinesisStreamName') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopActivityStream',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopActivityStream.Status'),
        outputPath: 'Status',
        parameters: {
          ResourceArn: this.__input.resourceArn,
          ApplyImmediately: this.__input.applyImmediately,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopActivityStream.Status', props);
    return resource.getResponseField('Status') as unknown as string;
  }

}

export class RDSResponsesStopDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopDbClusterMessage) {
  }

  public get dbCluster(): RDSResponsesStopDbClusterDbCluster {
    return new RDSResponsesStopDbClusterDbCluster(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesStopDbClusterDbCluster {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopDbClusterMessage) {
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.AllocatedStorage'),
        outputPath: 'DBCluster.AllocatedStorage',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.AllocatedStorage', props);
    return resource.getResponseField('DBCluster.AllocatedStorage') as unknown as number;
  }

  public get availabilityZones(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.AvailabilityZones'),
        outputPath: 'DBCluster.AvailabilityZones',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.AvailabilityZones', props);
    return resource.getResponseField('DBCluster.AvailabilityZones') as unknown as string[];
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.BackupRetentionPeriod'),
        outputPath: 'DBCluster.BackupRetentionPeriod',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.BackupRetentionPeriod', props);
    return resource.getResponseField('DBCluster.BackupRetentionPeriod') as unknown as number;
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.CharacterSetName'),
        outputPath: 'DBCluster.CharacterSetName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.CharacterSetName', props);
    return resource.getResponseField('DBCluster.CharacterSetName') as unknown as string;
  }

  public get databaseName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DatabaseName'),
        outputPath: 'DBCluster.DatabaseName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DatabaseName', props);
    return resource.getResponseField('DBCluster.DatabaseName') as unknown as string;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBClusterIdentifier'),
        outputPath: 'DBCluster.DBClusterIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBClusterIdentifier', props);
    return resource.getResponseField('DBCluster.DBClusterIdentifier') as unknown as string;
  }

  public get dbClusterParameterGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBClusterParameterGroup'),
        outputPath: 'DBCluster.DBClusterParameterGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBClusterParameterGroup', props);
    return resource.getResponseField('DBCluster.DBClusterParameterGroup') as unknown as string;
  }

  public get dbSubnetGroup(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBSubnetGroup'),
        outputPath: 'DBCluster.DBSubnetGroup',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBSubnetGroup', props);
    return resource.getResponseField('DBCluster.DBSubnetGroup') as unknown as string;
  }

  public get status(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.Status'),
        outputPath: 'DBCluster.Status',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.Status', props);
    return resource.getResponseField('DBCluster.Status') as unknown as string;
  }

  public get percentProgress(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.PercentProgress'),
        outputPath: 'DBCluster.PercentProgress',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.PercentProgress', props);
    return resource.getResponseField('DBCluster.PercentProgress') as unknown as string;
  }

  public get earliestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.EarliestRestorableTime'),
        outputPath: 'DBCluster.EarliestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.EarliestRestorableTime', props);
    return resource.getResponseField('DBCluster.EarliestRestorableTime') as unknown as string;
  }

  public get endpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.Endpoint'),
        outputPath: 'DBCluster.Endpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.Endpoint', props);
    return resource.getResponseField('DBCluster.Endpoint') as unknown as string;
  }

  public get readerEndpoint(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ReaderEndpoint'),
        outputPath: 'DBCluster.ReaderEndpoint',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ReaderEndpoint', props);
    return resource.getResponseField('DBCluster.ReaderEndpoint') as unknown as string;
  }

  public get customEndpoints(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.CustomEndpoints'),
        outputPath: 'DBCluster.CustomEndpoints',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.CustomEndpoints', props);
    return resource.getResponseField('DBCluster.CustomEndpoints') as unknown as string[];
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.MultiAZ'),
        outputPath: 'DBCluster.MultiAZ',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.MultiAZ', props);
    return resource.getResponseField('DBCluster.MultiAZ') as unknown as boolean;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.Engine'),
        outputPath: 'DBCluster.Engine',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.Engine', props);
    return resource.getResponseField('DBCluster.Engine') as unknown as string;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.EngineVersion'),
        outputPath: 'DBCluster.EngineVersion',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.EngineVersion', props);
    return resource.getResponseField('DBCluster.EngineVersion') as unknown as string;
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.LatestRestorableTime'),
        outputPath: 'DBCluster.LatestRestorableTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.LatestRestorableTime', props);
    return resource.getResponseField('DBCluster.LatestRestorableTime') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.Port'),
        outputPath: 'DBCluster.Port',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.Port', props);
    return resource.getResponseField('DBCluster.Port') as unknown as number;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.MasterUsername'),
        outputPath: 'DBCluster.MasterUsername',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.MasterUsername', props);
    return resource.getResponseField('DBCluster.MasterUsername') as unknown as string;
  }

  public get dbClusterOptionGroupMemberships(): shapes.RdsdbClusterOptionGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBClusterOptionGroupMemberships'),
        outputPath: 'DBCluster.DBClusterOptionGroupMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBClusterOptionGroupMemberships', props);
    return resource.getResponseField('DBCluster.DBClusterOptionGroupMemberships') as unknown as shapes.RdsdbClusterOptionGroupStatus[];
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.PreferredBackupWindow'),
        outputPath: 'DBCluster.PreferredBackupWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.PreferredBackupWindow', props);
    return resource.getResponseField('DBCluster.PreferredBackupWindow') as unknown as string;
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.PreferredMaintenanceWindow'),
        outputPath: 'DBCluster.PreferredMaintenanceWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBCluster.PreferredMaintenanceWindow') as unknown as string;
  }

  public get replicationSourceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ReplicationSourceIdentifier'),
        outputPath: 'DBCluster.ReplicationSourceIdentifier',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ReplicationSourceIdentifier', props);
    return resource.getResponseField('DBCluster.ReplicationSourceIdentifier') as unknown as string;
  }

  public get readReplicaIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ReadReplicaIdentifiers'),
        outputPath: 'DBCluster.ReadReplicaIdentifiers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ReadReplicaIdentifiers', props);
    return resource.getResponseField('DBCluster.ReadReplicaIdentifiers') as unknown as string[];
  }

  public get dbClusterMembers(): shapes.RdsdbClusterMember[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBClusterMembers'),
        outputPath: 'DBCluster.DBClusterMembers',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBClusterMembers', props);
    return resource.getResponseField('DBCluster.DBClusterMembers') as unknown as shapes.RdsdbClusterMember[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.VpcSecurityGroups'),
        outputPath: 'DBCluster.VpcSecurityGroups',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.VpcSecurityGroups', props);
    return resource.getResponseField('DBCluster.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.HostedZoneId'),
        outputPath: 'DBCluster.HostedZoneId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.HostedZoneId', props);
    return resource.getResponseField('DBCluster.HostedZoneId') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.StorageEncrypted'),
        outputPath: 'DBCluster.StorageEncrypted',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.StorageEncrypted', props);
    return resource.getResponseField('DBCluster.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.KmsKeyId'),
        outputPath: 'DBCluster.KmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.KmsKeyId', props);
    return resource.getResponseField('DBCluster.KmsKeyId') as unknown as string;
  }

  public get dbClusterResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DbClusterResourceId'),
        outputPath: 'DBCluster.DbClusterResourceId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DbClusterResourceId', props);
    return resource.getResponseField('DBCluster.DbClusterResourceId') as unknown as string;
  }

  public get dbClusterArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DBClusterArn'),
        outputPath: 'DBCluster.DBClusterArn',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DBClusterArn', props);
    return resource.getResponseField('DBCluster.DBClusterArn') as unknown as string;
  }

  public get associatedRoles(): shapes.RdsdbClusterRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.AssociatedRoles'),
        outputPath: 'DBCluster.AssociatedRoles',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.AssociatedRoles', props);
    return resource.getResponseField('DBCluster.AssociatedRoles') as unknown as shapes.RdsdbClusterRole[];
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBCluster.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBCluster.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get cloneGroupId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.CloneGroupId'),
        outputPath: 'DBCluster.CloneGroupId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.CloneGroupId', props);
    return resource.getResponseField('DBCluster.CloneGroupId') as unknown as string;
  }

  public get clusterCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ClusterCreateTime'),
        outputPath: 'DBCluster.ClusterCreateTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ClusterCreateTime', props);
    return resource.getResponseField('DBCluster.ClusterCreateTime') as unknown as string;
  }

  public get earliestBacktrackTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.EarliestBacktrackTime'),
        outputPath: 'DBCluster.EarliestBacktrackTime',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.EarliestBacktrackTime', props);
    return resource.getResponseField('DBCluster.EarliestBacktrackTime') as unknown as string;
  }

  public get backtrackWindow(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.BacktrackWindow'),
        outputPath: 'DBCluster.BacktrackWindow',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.BacktrackWindow', props);
    return resource.getResponseField('DBCluster.BacktrackWindow') as unknown as number;
  }

  public get backtrackConsumedChangeRecords(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.BacktrackConsumedChangeRecords'),
        outputPath: 'DBCluster.BacktrackConsumedChangeRecords',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.BacktrackConsumedChangeRecords', props);
    return resource.getResponseField('DBCluster.BacktrackConsumedChangeRecords') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.EnabledCloudwatchLogsExports'),
        outputPath: 'DBCluster.EnabledCloudwatchLogsExports',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBCluster.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get capacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.Capacity'),
        outputPath: 'DBCluster.Capacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.Capacity', props);
    return resource.getResponseField('DBCluster.Capacity') as unknown as number;
  }

  public get engineMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.EngineMode'),
        outputPath: 'DBCluster.EngineMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.EngineMode', props);
    return resource.getResponseField('DBCluster.EngineMode') as unknown as string;
  }

  public get scalingConfigurationInfo(): RDSResponsesStopDbClusterDbClusterScalingConfigurationInfo {
    return new RDSResponsesStopDbClusterDbClusterScalingConfigurationInfo(this.__scope, this.__resources, this.__input);
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DeletionProtection'),
        outputPath: 'DBCluster.DeletionProtection',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DeletionProtection', props);
    return resource.getResponseField('DBCluster.DeletionProtection') as unknown as boolean;
  }

  public get httpEndpointEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.HttpEndpointEnabled'),
        outputPath: 'DBCluster.HttpEndpointEnabled',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.HttpEndpointEnabled', props);
    return resource.getResponseField('DBCluster.HttpEndpointEnabled') as unknown as boolean;
  }

  public get activityStreamMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ActivityStreamMode'),
        outputPath: 'DBCluster.ActivityStreamMode',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ActivityStreamMode', props);
    return resource.getResponseField('DBCluster.ActivityStreamMode') as unknown as string;
  }

  public get activityStreamStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ActivityStreamStatus'),
        outputPath: 'DBCluster.ActivityStreamStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ActivityStreamStatus', props);
    return resource.getResponseField('DBCluster.ActivityStreamStatus') as unknown as string;
  }

  public get activityStreamKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ActivityStreamKmsKeyId'),
        outputPath: 'DBCluster.ActivityStreamKmsKeyId',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ActivityStreamKmsKeyId', props);
    return resource.getResponseField('DBCluster.ActivityStreamKmsKeyId') as unknown as string;
  }

  public get activityStreamKinesisStreamName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ActivityStreamKinesisStreamName'),
        outputPath: 'DBCluster.ActivityStreamKinesisStreamName',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ActivityStreamKinesisStreamName', props);
    return resource.getResponseField('DBCluster.ActivityStreamKinesisStreamName') as unknown as string;
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.CopyTagsToSnapshot'),
        outputPath: 'DBCluster.CopyTagsToSnapshot',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBCluster.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get crossAccountClone(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.CrossAccountClone'),
        outputPath: 'DBCluster.CrossAccountClone',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.CrossAccountClone', props);
    return resource.getResponseField('DBCluster.CrossAccountClone') as unknown as boolean;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.DomainMemberships'),
        outputPath: 'DBCluster.DomainMemberships',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.DomainMemberships', props);
    return resource.getResponseField('DBCluster.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.TagList'),
        outputPath: 'DBCluster.TagList',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.TagList', props);
    return resource.getResponseField('DBCluster.TagList') as unknown as shapes.RdsTag[];
  }

  public get globalWriteForwardingStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.GlobalWriteForwardingStatus'),
        outputPath: 'DBCluster.GlobalWriteForwardingStatus',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.GlobalWriteForwardingStatus', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingStatus') as unknown as string;
  }

  public get globalWriteForwardingRequested(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.GlobalWriteForwardingRequested'),
        outputPath: 'DBCluster.GlobalWriteForwardingRequested',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.GlobalWriteForwardingRequested', props);
    return resource.getResponseField('DBCluster.GlobalWriteForwardingRequested') as unknown as boolean;
  }

}

export class RDSResponsesStopDbClusterDbClusterScalingConfigurationInfo {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopDbClusterMessage) {
  }

  public get minCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MinCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ScalingConfigurationInfo.MinCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MinCapacity') as unknown as number;
  }

  public get maxCapacity(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.MaxCapacity',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ScalingConfigurationInfo.MaxCapacity', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.MaxCapacity') as unknown as number;
  }

  public get autoPause(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.AutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ScalingConfigurationInfo.AutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.AutoPause') as unknown as boolean;
  }

  public get secondsUntilAutoPause(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause') as unknown as number;
  }

  public get timeoutAction(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbCluster',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction'),
        outputPath: 'DBCluster.ScalingConfigurationInfo.TimeoutAction',
        parameters: {
          DBClusterIdentifier: this.__input.dbClusterIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBCluster.DBCluster.ScalingConfigurationInfo.TimeoutAction', props);
    return resource.getResponseField('DBCluster.ScalingConfigurationInfo.TimeoutAction') as unknown as string;
  }

}

export class RDSResponsesStopDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopDbInstanceMessage) {
  }

  public get dbInstance(): RDSResponsesStopDbInstanceDbInstance {
    return new RDSResponsesStopDbInstanceDbInstance(this.__scope, this.__resources, this.__input);
  }

}

export class RDSResponsesStopDbInstanceDbInstance {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopDbInstanceMessage) {
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBInstanceIdentifier'),
        outputPath: 'DBInstance.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.DBInstanceIdentifier') as unknown as string;
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBInstanceClass'),
        outputPath: 'DBInstance.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.DBInstanceClass') as unknown as string;
  }

  public get engine(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Engine'),
        outputPath: 'DBInstance.Engine',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.Engine', props);
    return resource.getResponseField('DBInstance.Engine') as unknown as string;
  }

  public get dbInstanceStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBInstanceStatus'),
        outputPath: 'DBInstance.DBInstanceStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBInstanceStatus', props);
    return resource.getResponseField('DBInstance.DBInstanceStatus') as unknown as string;
  }

  public get masterUsername(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.MasterUsername'),
        outputPath: 'DBInstance.MasterUsername',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.MasterUsername', props);
    return resource.getResponseField('DBInstance.MasterUsername') as unknown as string;
  }

  public get dbName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBName'),
        outputPath: 'DBInstance.DBName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBName', props);
    return resource.getResponseField('DBInstance.DBName') as unknown as string;
  }

  public get endpoint(): RDSResponsesStopDbInstanceDbInstanceEndpoint {
    return new RDSResponsesStopDbInstanceDbInstanceEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.AllocatedStorage'),
        outputPath: 'DBInstance.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.AllocatedStorage') as unknown as number;
  }

  public get instanceCreateTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.InstanceCreateTime'),
        outputPath: 'DBInstance.InstanceCreateTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.InstanceCreateTime', props);
    return resource.getResponseField('DBInstance.InstanceCreateTime') as unknown as string;
  }

  public get preferredBackupWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PreferredBackupWindow'),
        outputPath: 'DBInstance.PreferredBackupWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PreferredBackupWindow', props);
    return resource.getResponseField('DBInstance.PreferredBackupWindow') as unknown as string;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.BackupRetentionPeriod'),
        outputPath: 'DBInstance.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.BackupRetentionPeriod') as unknown as number;
  }

  public get dbSecurityGroups(): shapes.RdsdbSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSecurityGroups'),
        outputPath: 'DBInstance.DBSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBSecurityGroups', props);
    return resource.getResponseField('DBInstance.DBSecurityGroups') as unknown as shapes.RdsdbSecurityGroupMembership[];
  }

  public get vpcSecurityGroups(): shapes.RdsVpcSecurityGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.VpcSecurityGroups'),
        outputPath: 'DBInstance.VpcSecurityGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.VpcSecurityGroups', props);
    return resource.getResponseField('DBInstance.VpcSecurityGroups') as unknown as shapes.RdsVpcSecurityGroupMembership[];
  }

  public get dbParameterGroups(): shapes.RdsdbParameterGroupStatus[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBParameterGroups'),
        outputPath: 'DBInstance.DBParameterGroups',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBParameterGroups', props);
    return resource.getResponseField('DBInstance.DBParameterGroups') as unknown as shapes.RdsdbParameterGroupStatus[];
  }

  public get availabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.AvailabilityZone'),
        outputPath: 'DBInstance.AvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.AvailabilityZone', props);
    return resource.getResponseField('DBInstance.AvailabilityZone') as unknown as string;
  }

  public get dbSubnetGroup(): RDSResponsesStopDbInstanceDbInstanceDbSubnetGroup {
    return new RDSResponsesStopDbInstanceDbInstanceDbSubnetGroup(this.__scope, this.__resources, this.__input);
  }

  public get preferredMaintenanceWindow(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PreferredMaintenanceWindow'),
        outputPath: 'DBInstance.PreferredMaintenanceWindow',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PreferredMaintenanceWindow', props);
    return resource.getResponseField('DBInstance.PreferredMaintenanceWindow') as unknown as string;
  }

  public get pendingModifiedValues(): RDSResponsesStopDbInstanceDbInstancePendingModifiedValues {
    return new RDSResponsesStopDbInstanceDbInstancePendingModifiedValues(this.__scope, this.__resources, this.__input);
  }

  public get latestRestorableTime(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.LatestRestorableTime'),
        outputPath: 'DBInstance.LatestRestorableTime',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.LatestRestorableTime', props);
    return resource.getResponseField('DBInstance.LatestRestorableTime') as unknown as string;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.MultiAZ'),
        outputPath: 'DBInstance.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.MultiAZ', props);
    return resource.getResponseField('DBInstance.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.EngineVersion'),
        outputPath: 'DBInstance.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.EngineVersion', props);
    return resource.getResponseField('DBInstance.EngineVersion') as unknown as string;
  }

  public get autoMinorVersionUpgrade(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.AutoMinorVersionUpgrade'),
        outputPath: 'DBInstance.AutoMinorVersionUpgrade',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.AutoMinorVersionUpgrade', props);
    return resource.getResponseField('DBInstance.AutoMinorVersionUpgrade') as unknown as boolean;
  }

  public get readReplicaSourceDbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier'),
        outputPath: 'DBInstance.ReadReplicaSourceDBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.ReadReplicaSourceDBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.ReadReplicaSourceDBInstanceIdentifier') as unknown as string;
  }

  public get readReplicaDbInstanceIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBInstanceIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.ReadReplicaDBInstanceIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBInstanceIdentifiers') as unknown as string[];
  }

  public get readReplicaDbClusterIdentifiers(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers'),
        outputPath: 'DBInstance.ReadReplicaDBClusterIdentifiers',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.ReadReplicaDBClusterIdentifiers', props);
    return resource.getResponseField('DBInstance.ReadReplicaDBClusterIdentifiers') as unknown as string[];
  }

  public get replicaMode(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ReplicaMode'),
        outputPath: 'DBInstance.ReplicaMode',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.ReplicaMode', props);
    return resource.getResponseField('DBInstance.ReplicaMode') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.LicenseModel'),
        outputPath: 'DBInstance.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.LicenseModel', props);
    return resource.getResponseField('DBInstance.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Iops'),
        outputPath: 'DBInstance.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.Iops', props);
    return resource.getResponseField('DBInstance.Iops') as unknown as number;
  }

  public get optionGroupMemberships(): shapes.RdsOptionGroupMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.OptionGroupMemberships'),
        outputPath: 'DBInstance.OptionGroupMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.OptionGroupMemberships', props);
    return resource.getResponseField('DBInstance.OptionGroupMemberships') as unknown as shapes.RdsOptionGroupMembership[];
  }

  public get characterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.CharacterSetName'),
        outputPath: 'DBInstance.CharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.CharacterSetName', props);
    return resource.getResponseField('DBInstance.CharacterSetName') as unknown as string;
  }

  public get ncharCharacterSetName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.NcharCharacterSetName'),
        outputPath: 'DBInstance.NcharCharacterSetName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.NcharCharacterSetName', props);
    return resource.getResponseField('DBInstance.NcharCharacterSetName') as unknown as string;
  }

  public get secondaryAvailabilityZone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.SecondaryAvailabilityZone'),
        outputPath: 'DBInstance.SecondaryAvailabilityZone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.SecondaryAvailabilityZone', props);
    return resource.getResponseField('DBInstance.SecondaryAvailabilityZone') as unknown as string;
  }

  public get publiclyAccessible(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PubliclyAccessible'),
        outputPath: 'DBInstance.PubliclyAccessible',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PubliclyAccessible', props);
    return resource.getResponseField('DBInstance.PubliclyAccessible') as unknown as boolean;
  }

  public get statusInfos(): shapes.RdsdbInstanceStatusInfo[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.StatusInfos'),
        outputPath: 'DBInstance.StatusInfos',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.StatusInfos', props);
    return resource.getResponseField('DBInstance.StatusInfos') as unknown as shapes.RdsdbInstanceStatusInfo[];
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.StorageType'),
        outputPath: 'DBInstance.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.StorageType', props);
    return resource.getResponseField('DBInstance.StorageType') as unknown as string;
  }

  public get tdeCredentialArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.TdeCredentialArn'),
        outputPath: 'DBInstance.TdeCredentialArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.TdeCredentialArn', props);
    return resource.getResponseField('DBInstance.TdeCredentialArn') as unknown as string;
  }

  public get dbInstancePort(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DbInstancePort'),
        outputPath: 'DBInstance.DbInstancePort',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DbInstancePort', props);
    return resource.getResponseField('DBInstance.DbInstancePort') as unknown as number;
  }

  public get dbClusterIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBClusterIdentifier'),
        outputPath: 'DBInstance.DBClusterIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBClusterIdentifier', props);
    return resource.getResponseField('DBInstance.DBClusterIdentifier') as unknown as string;
  }

  public get storageEncrypted(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.StorageEncrypted'),
        outputPath: 'DBInstance.StorageEncrypted',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.StorageEncrypted', props);
    return resource.getResponseField('DBInstance.StorageEncrypted') as unknown as boolean;
  }

  public get kmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.KmsKeyId'),
        outputPath: 'DBInstance.KmsKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.KmsKeyId', props);
    return resource.getResponseField('DBInstance.KmsKeyId') as unknown as string;
  }

  public get dbiResourceId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DbiResourceId'),
        outputPath: 'DBInstance.DbiResourceId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DbiResourceId', props);
    return resource.getResponseField('DBInstance.DbiResourceId') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.CACertificateIdentifier'),
        outputPath: 'DBInstance.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.CACertificateIdentifier') as unknown as string;
  }

  public get domainMemberships(): shapes.RdsDomainMembership[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DomainMemberships'),
        outputPath: 'DBInstance.DomainMemberships',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DomainMemberships', props);
    return resource.getResponseField('DBInstance.DomainMemberships') as unknown as shapes.RdsDomainMembership[];
  }

  public get copyTagsToSnapshot(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.CopyTagsToSnapshot'),
        outputPath: 'DBInstance.CopyTagsToSnapshot',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.CopyTagsToSnapshot', props);
    return resource.getResponseField('DBInstance.CopyTagsToSnapshot') as unknown as boolean;
  }

  public get monitoringInterval(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.MonitoringInterval'),
        outputPath: 'DBInstance.MonitoringInterval',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.MonitoringInterval', props);
    return resource.getResponseField('DBInstance.MonitoringInterval') as unknown as number;
  }

  public get enhancedMonitoringResourceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.EnhancedMonitoringResourceArn'),
        outputPath: 'DBInstance.EnhancedMonitoringResourceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.EnhancedMonitoringResourceArn', props);
    return resource.getResponseField('DBInstance.EnhancedMonitoringResourceArn') as unknown as string;
  }

  public get monitoringRoleArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.MonitoringRoleArn'),
        outputPath: 'DBInstance.MonitoringRoleArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.MonitoringRoleArn', props);
    return resource.getResponseField('DBInstance.MonitoringRoleArn') as unknown as string;
  }

  public get promotionTier(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PromotionTier'),
        outputPath: 'DBInstance.PromotionTier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PromotionTier', props);
    return resource.getResponseField('DBInstance.PromotionTier') as unknown as number;
  }

  public get dbInstanceArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBInstanceArn'),
        outputPath: 'DBInstance.DBInstanceArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBInstanceArn', props);
    return resource.getResponseField('DBInstance.DBInstanceArn') as unknown as string;
  }

  public get timezone(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Timezone'),
        outputPath: 'DBInstance.Timezone',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.Timezone', props);
    return resource.getResponseField('DBInstance.Timezone') as unknown as string;
  }

  public get iamDatabaseAuthenticationEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled'),
        outputPath: 'DBInstance.IAMDatabaseAuthenticationEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.IAMDatabaseAuthenticationEnabled', props);
    return resource.getResponseField('DBInstance.IAMDatabaseAuthenticationEnabled') as unknown as boolean;
  }

  public get performanceInsightsEnabled(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PerformanceInsightsEnabled'),
        outputPath: 'DBInstance.PerformanceInsightsEnabled',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PerformanceInsightsEnabled', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsEnabled') as unknown as boolean;
  }

  public get performanceInsightsKmsKeyId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PerformanceInsightsKMSKeyId'),
        outputPath: 'DBInstance.PerformanceInsightsKMSKeyId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PerformanceInsightsKMSKeyId', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsKMSKeyId') as unknown as string;
  }

  public get performanceInsightsRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PerformanceInsightsRetentionPeriod'),
        outputPath: 'DBInstance.PerformanceInsightsRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PerformanceInsightsRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PerformanceInsightsRetentionPeriod') as unknown as number;
  }

  public get enabledCloudwatchLogsExports(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.EnabledCloudwatchLogsExports'),
        outputPath: 'DBInstance.EnabledCloudwatchLogsExports',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.EnabledCloudwatchLogsExports', props);
    return resource.getResponseField('DBInstance.EnabledCloudwatchLogsExports') as unknown as string[];
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ProcessorFeatures'),
        outputPath: 'DBInstance.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

  public get deletionProtection(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DeletionProtection'),
        outputPath: 'DBInstance.DeletionProtection',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DeletionProtection', props);
    return resource.getResponseField('DBInstance.DeletionProtection') as unknown as boolean;
  }

  public get associatedRoles(): shapes.RdsdbInstanceRole[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.AssociatedRoles'),
        outputPath: 'DBInstance.AssociatedRoles',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.AssociatedRoles', props);
    return resource.getResponseField('DBInstance.AssociatedRoles') as unknown as shapes.RdsdbInstanceRole[];
  }

  public get listenerEndpoint(): RDSResponsesStopDbInstanceDbInstanceListenerEndpoint {
    return new RDSResponsesStopDbInstanceDbInstanceListenerEndpoint(this.__scope, this.__resources, this.__input);
  }

  public get maxAllocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.MaxAllocatedStorage'),
        outputPath: 'DBInstance.MaxAllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.MaxAllocatedStorage', props);
    return resource.getResponseField('DBInstance.MaxAllocatedStorage') as unknown as number;
  }

  public get tagList(): shapes.RdsTag[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.TagList'),
        outputPath: 'DBInstance.TagList',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.TagList', props);
    return resource.getResponseField('DBInstance.TagList') as unknown as shapes.RdsTag[];
  }

}

export class RDSResponsesStopDbInstanceDbInstanceEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Endpoint.Address'),
        outputPath: 'DBInstance.Endpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.Endpoint.Address', props);
    return resource.getResponseField('DBInstance.Endpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Endpoint.Port'),
        outputPath: 'DBInstance.Endpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.Endpoint.Port', props);
    return resource.getResponseField('DBInstance.Endpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.Endpoint.HostedZoneId'),
        outputPath: 'DBInstance.Endpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.Endpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.Endpoint.HostedZoneId') as unknown as string;
  }

}

export class RDSResponsesStopDbInstanceDbInstanceDbSubnetGroup {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopDbInstanceMessage) {
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupName') as unknown as string;
  }

  public get dbSubnetGroupDescription(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupDescription',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupDescription', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupDescription') as unknown as string;
  }

  public get vpcId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.VpcId'),
        outputPath: 'DBInstance.DBSubnetGroup.VpcId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBSubnetGroup.VpcId', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.VpcId') as unknown as string;
  }

  public get subnetGroupStatus(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus'),
        outputPath: 'DBInstance.DBSubnetGroup.SubnetGroupStatus',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBSubnetGroup.SubnetGroupStatus', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.SubnetGroupStatus') as unknown as string;
  }

  public get subnets(): shapes.RdsSubnet[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.Subnets'),
        outputPath: 'DBInstance.DBSubnetGroup.Subnets',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBSubnetGroup.Subnets', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.Subnets') as unknown as shapes.RdsSubnet[];
  }

  public get dbSubnetGroupArn(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn'),
        outputPath: 'DBInstance.DBSubnetGroup.DBSubnetGroupArn',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.DBSubnetGroup.DBSubnetGroupArn', props);
    return resource.getResponseField('DBInstance.DBSubnetGroup.DBSubnetGroupArn') as unknown as string;
  }

}

export class RDSResponsesStopDbInstanceDbInstancePendingModifiedValues {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopDbInstanceMessage) {
  }

  public get dbInstanceClass(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceClass',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.DBInstanceClass', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceClass') as unknown as string;
  }

  public get allocatedStorage(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage'),
        outputPath: 'DBInstance.PendingModifiedValues.AllocatedStorage',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.AllocatedStorage', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.AllocatedStorage') as unknown as number;
  }

  public get masterUserPassword(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword'),
        outputPath: 'DBInstance.PendingModifiedValues.MasterUserPassword',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.MasterUserPassword', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MasterUserPassword') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.Port'),
        outputPath: 'DBInstance.PendingModifiedValues.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.Port', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Port') as unknown as number;
  }

  public get backupRetentionPeriod(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod'),
        outputPath: 'DBInstance.PendingModifiedValues.BackupRetentionPeriod',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.BackupRetentionPeriod', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.BackupRetentionPeriod') as unknown as number;
  }

  public get multiAz(): boolean {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.MultiAZ'),
        outputPath: 'DBInstance.PendingModifiedValues.MultiAZ',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.MultiAZ', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.MultiAZ') as unknown as boolean;
  }

  public get engineVersion(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.EngineVersion'),
        outputPath: 'DBInstance.PendingModifiedValues.EngineVersion',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.EngineVersion', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.EngineVersion') as unknown as string;
  }

  public get licenseModel(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.LicenseModel'),
        outputPath: 'DBInstance.PendingModifiedValues.LicenseModel',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.LicenseModel', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.LicenseModel') as unknown as string;
  }

  public get iops(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.Iops'),
        outputPath: 'DBInstance.PendingModifiedValues.Iops',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.Iops', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.Iops') as unknown as number;
  }

  public get dbInstanceIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.DBInstanceIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.DBInstanceIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBInstanceIdentifier') as unknown as string;
  }

  public get storageType(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.StorageType'),
        outputPath: 'DBInstance.PendingModifiedValues.StorageType',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.StorageType', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.StorageType') as unknown as string;
  }

  public get caCertificateIdentifier(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier'),
        outputPath: 'DBInstance.PendingModifiedValues.CACertificateIdentifier',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.CACertificateIdentifier', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.CACertificateIdentifier') as unknown as string;
  }

  public get dbSubnetGroupName(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName'),
        outputPath: 'DBInstance.PendingModifiedValues.DBSubnetGroupName',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.DBSubnetGroupName', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.DBSubnetGroupName') as unknown as string;
  }

  public get pendingCloudwatchLogsExports(): RDSResponsesStopDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {
    return new RDSResponsesStopDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports(this.__scope, this.__resources, this.__input);
  }

  public get processorFeatures(): shapes.RdsProcessorFeature[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures'),
        outputPath: 'DBInstance.PendingModifiedValues.ProcessorFeatures',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.ProcessorFeatures', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.ProcessorFeatures') as unknown as shapes.RdsProcessorFeature[];
  }

}

export class RDSResponsesStopDbInstanceDbInstancePendingModifiedValuesPendingCloudwatchLogsExports {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopDbInstanceMessage) {
  }

  public get logTypesToEnable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable') as unknown as string[];
  }

  public get logTypesToDisable(): string[] {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable'),
        outputPath: 'DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable', props);
    return resource.getResponseField('DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable') as unknown as string[];
  }

}

export class RDSResponsesStopDbInstanceDbInstanceListenerEndpoint {

  constructor(private readonly __scope: cdk.Construct, private readonly __resources: string[], private readonly __input: shapes.RdsStopDbInstanceMessage) {
  }

  public get address(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ListenerEndpoint.Address'),
        outputPath: 'DBInstance.ListenerEndpoint.Address',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.ListenerEndpoint.Address', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Address') as unknown as string;
  }

  public get port(): number {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ListenerEndpoint.Port'),
        outputPath: 'DBInstance.ListenerEndpoint.Port',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.ListenerEndpoint.Port', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.Port') as unknown as number;
  }

  public get hostedZoneId(): string {
    const props: cr.AwsCustomResourceProps = {
      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: this.__resources }),
      onUpdate: {
        action: 'stopDbInstance',
        service: 'RDS',
        physicalResourceId: cr.PhysicalResourceId.of('RDS.StopDBInstance.DBInstance.ListenerEndpoint.HostedZoneId'),
        outputPath: 'DBInstance.ListenerEndpoint.HostedZoneId',
        parameters: {
          DBInstanceIdentifier: this.__input.dbInstanceIdentifier,
          DBSnapshotIdentifier: this.__input.dbSnapshotIdentifier,
        },
      },
    };
    const resource = new cr.AwsCustomResource(this.__scope, 'StopDBInstance.DBInstance.ListenerEndpoint.HostedZoneId', props);
    return resource.getResponseField('DBInstance.ListenerEndpoint.HostedZoneId') as unknown as string;
  }

}

